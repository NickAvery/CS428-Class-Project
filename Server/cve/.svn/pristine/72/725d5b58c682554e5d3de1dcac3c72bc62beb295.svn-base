$include "../common/defaults.icn"

link gpxop

global whiteboard1
#
# Class WhiteBoard is a Wall that can be drawn on.
#
class WhiteBoard : Wall(url, name, httpconnLive, httpconnDefault, 
			svgwidth, svgheight, txwin, Lcontents, itrLcontents,
			cveBuilder, dispatcher)
						
   method update_whiteboard()
      local win3d
		
      if self.opMode == ("c"|"C") then {
#	 write("Drawing Whiteboard ",name)
	 (win3d := !(\ (dispatcher)).subwins) | fail
	 Texture(win3d, \txwin, tex_dlo.texture_handle)
	 self.world.NeedsRefresh()
	 }
   end

   method readFromDisk()
      local fd

      if not (fd := open(WB_PATH||PS||\name||".svg", "r")) then {
	 write(&errout, "ERROR: readFromDisk() can't open svg ", image(name))
	 fail
	 }
      every put(Lcontents, !fd)
      close(fd)
      #
      # Remember the position of the list till the contents were read from disk
      #
      itrLcontents := *Lcontents+1
#       write("readFromDisk()::svg size read= ",*Lcontents)
      return
   end

   #
   # Careful with where you call this method. This is a special method that
   # only writes the new added svg lines or creates a new file when reading 
   # a fresh file from the default location.
   #
   method dumpToDisk(mode:string:"w")
   local fd, i:=0, itr

      if not (fd := open(WB_PATH||PS||\name||".svg", mode)) then
	 write("ERROR: dumpToDisk can't open ", image(name))
      else {	
	 every itr := itrLcontents to *Lcontents do {
	    write(fd, Lcontents[itr])
	    i+:=1
	    }
	 close(fd)
	 #
	 # Update the new postion of the list
	 #
	 itrLcontents += i
#	 write("dumpToDisk()::svg size written= ", i," svg total= ",*Lcontents)
	 }
   end
	
   method checkpoint()
      if \httpconnDefault then {
	 itrLcontents := 1
#	 write("Creating new SVG")
	 dumpToDisk("w")		
         }
      else if itrLcontents ~= 1 then {
#	  write("Appending SVG")
	  dumpToDisk("wa")
          }
   end
	
   method Read()
   local s, cmd, t, win3d, fillstyle, linewidth, fn, r, g, b

      if (\httpconnDefault & itrLcontents > 1)  then {
	 #
	 # The contents have been dumped to the disk (Stale Data Read)
	 # so the data has been read once from the default SVG file
	 #
	 return
	 }

      if not (s := read(\httpconnDefault | \httpconnLive)) then {
	 #
	 # Enter the contents on to the list. Later we dump it to a file
	 #
	 update_whiteboard()
	 checkpoint()

	 if self.opMode == ("c"|"C") then {   
	    (\ (dispatcher)).del_whiteboard(\httpconnDefault | \httpconnLive)
	    (\ (httpconnDefault | httpconnLive)) := &null
	    (\(self.world.chat)).write_to_chat_win("whiteboard session ended")
	    }
	 fail
	 }
      else {
	 put(Lcontents, s)
	 processSVGLine(s)
	 }
   end
   
   
   method initWBGraphics()
      if *Lcontents > 0 then {
	 every processSVGLine(!Lcontents)
	 update_whiteboard()
	 checkpoint()
	 }
   end

	
   method processSVGLine(s)
   local cmd, t, win3d, fillstyle, linewidth, fn, r, g, b
	   
   s ? {
      ="<"
      cmd := tab(many(&letters)) | fail
      t := (self.cveBuilder).parsesvgfields()
      case cmd of {
	 "svg": {
            svgwidth := t["width"]
            svgheight := t["height"]
            txwin := open("txwin","g","width="||t["width"],
                    "height="||t["height"],"canvas=hidden") |
                stop("can't open win")
            }
            "line": {
            \ t["style"] ? {
                fillstyle := "solid"
                if ="stroke" then fillstyle := "solid"
                tab(find("rgb(")+4)
                r := tab(many(&digits))
                =","
                g := tab(many(&digits))
                =","
                b := tab(many(&digits))
                Fg(txwin, r || "," || g || "," || b)
                =");"
                if ="stroke-width:" then {
                if linewidth ~===:= tab(many(&digits)) then
                    WAttrib(txwin, "linewidth=" || linewidth+1)
                }
                DrawLine(txwin, t["x1"],t["y1"],t["x2"],t["y2"])
            }
            }
            "rect": {
            t["style"] ? {
                fn := if ="fill" then FillRectangle else DrawRectangle
                tab(find("rgb(")+4)
                r := tab(many(&digits)) * 257
                =","
                g := tab(many(&digits)) * 257
                =","
                b := tab(many(&digits)) * 257
                Fg(txwin, r || "," || g || "," || b)
                fn(txwin, 0,0,t["width"],t["height"])
                if self.opMode == ("c"|"C") then {
                	win3d := !dispatcher.subwins
				}
            }
            }
          }
        }
    end

   method render()
      self$Wall.render(0)
      #
      # Render whiteboard always from the cached lines
      #
      initWBGraphics()
#      write("Whiteboard ",name," rendered")

      if self.opMode == ("c"|"C") then {
	 dispatcher.add_whiteboard(\httpconnDefault | \httpconnLive, self)
         }
   end
	 
   method connect()
   local url1, url2
      url1 := "http://hp-inst.cs.nmsu.edu:4491/"
      if 1 then {#not (httpconnLive := open(url1, "m")) then {
	 # write("Whiteboard ",name," is not Live")
	 httpconnLive := &null

	 url2 := "http://www.cs.nmsu.edu/~jeffery/_
	          vcsc/unicron/dat/textures/scribble.svg"
	 if 1 then {#not (httpconnDefault := open(url2, "m")) then {
		 #    write("no default svg file at all")
		     httpconnDefault := &null
		 } #else write("default image is live")
       }
       #
       # Flush the list if reading from a file through a Default whiteboard
       #
       if \httpconnDefault then {
           Lcontents := []
          # write("Connected to the Default SVG File: jeffery/../scribble.svg")
       } else {
           #
           # If the whiteboard is Live or not read from the disk
           #
           readFromDisk()
           if \(httpconnLive) then
                write("Connected to the Live Whiteboard: ",name)
      }
      
    end
    
    #
    # Initialize the whiteboard and the connections only after assigning
    # a name to it.
    #
    method initWB()
        connect()
    end
	
initially(opMode,cveBuilder,dispatcher, t, c[])  ## Wall
   self.opMode := opMode
   self.world := cveBuilder.world
   self.dispatcher := dispatcher
   #self$Wall.initially(opMode,world,t, c)
   whiteboard1 := self
   texture := t
   #connect()
   coords  := c
   if self.opMode == ("c"|"C") then {
   		tex := Texture3D(texture)
   }
   sort_coords()
   set_plane()
   Lcontents := []
   itrLcontents := 1
   httpconnLive := &null
   httpconnDefault := &null
   self.cveBuilder := cveBuilder
end
