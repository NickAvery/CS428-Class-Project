#
# $Id: shelletl.icn
# Author: Hani Bani-Salameh
# Code Name: ShellETL
# This file is in the public domain.
#

import gui
import undo
import lang

$include "guih.icn"

global rnln, # run line
       brkln, # break line
       runs,
       highlightline,
       shellcmd

#
# A scrollable editable text area.
# An CONTENT_CHANGED_EVENT is generated whenever the contents
# are changed by the user, a CURSOR_MOVED_EVENT when the cursor moves,
# and a SELECTION_CHANGED_EVENT whenver the selection changes.
#
class ShellETL : EditableTextList (
   flag,
   contents,
   printable,               # The printable characters
   cursor_x,                #
   cursor_y,                #
   mark_x,                  #
   mark_y,                  #
   direction,               #
   is_held,
   long_line,               #
   undo_manager,
   old_view_list_size,
   old_mw,
   old_cursor_x,
   old_cursor_y,
   old_has_region,
   view_list,
   tab_width,
   wrap_mode,
   line_splitter,
   changed,
   mouse_locked,
   scroll_locked,
   vi,		# virtual line index
   undolist,	# Taken from old-version editabletextlist
   wordlist,	# Taken from old-version editabletextlist
   noedit,	# Taken from old-version editabletextlist
   startdragx,	# Taken from old-version editabletextlist
   enddragx,	# Taken from old-version editabletextlist
   startdragy,	# Taken from old-version editabletextlist
   enddragy,	# Taken from old-version editabletextlist
   donedrag,	# Taken from old-version editabletextlist
   highlightcolor, # Taken from buffertextlist
   autoindent,	# Taken from buffertextlist
   scroll_y,	# Taken from buffertextlist
   objType,
   pos,result,counter,found,
   pmlbl_width
   )
   #
   # Call this method if the contents list, previously
   # set with {set_contents()}, has changed.
   #
   method contents_changed()
      if *contents = 0 then
         #
         # Must have somewhere for the cursor to go.
         #
         contents := [""]

      clear_view_list()
      clear_mark()
      if \ (\parent_dialog).is_open then {
         cursor_y := *contents
         cursor_x >:= *contents[cursor_y] + 1
         compute_and_invalidate()
         constrain_line()
	 }
      undo_manager.clear()
   end
   #
   # Move cursor y to line n, and constrain x within range of that line.
   #
   # @p
   method set_cursor_y(n)
      local d, i, dest

      # Search for the nearest x position on the new line corresponding to
      # the current x position.
      d := TextWidthEx(cwin, contents[cursor_y], 1,
		       cursor_x, tab_width)
      dest := contents[n]
      i := 1
      while (i <= *\dest) & (TextWidthEx(cwin, \dest, 1, i,
					 tab_width) < \d) do
         i +:= 1
      if \dest then
         cursor_x := \*dest      #get_first_line()#i
      cursor_y := *view_list #n

      return n
   end
   #
   # Move the text area displayed so that the cursor is on the screen.
   #
   # @p
   method constrain_line()
      local v, s, i, j, l

      vi := get_view_list_index()

      if \vi < get_first_line() then
         vsb.set_value(line_height * (\vi - 1))
      else if \vi > get_last_line() then
         vsb.set_value(line_height * (\vi - get_max_lines()))

      v := view_list[\vi]
      s := \v.str
      i := TextWidthEx(cwin, s, 1, cursor_x - v.first + 1,
		       tab_width)
      j := i + CharWidth(cwin, s[cursor_x - v.first + 1])
      l := get_left_pos()
      if \hsb then {
         if view.x - l > \i then
            hsb.set_value(i)
         else if view.x - l + view.w < \j then
            hsb.set_value(j - view.w)
         }
   end

   #
   #override original method
   #set attrib
   #will remove old attribute value and replace it with the new one
   #
   method set_attribs(attrval)
   local attr, i
       attrval ? {
           attr := tab(many(&letters)) || ="="
           every i := 1 to *attribs do {
               if match(attr, attribs[i]) then {
                   attribs[i] := attrval
                   return
		   }
               }
           }
      return self$EditableTextList.set_attribs(attrval)
   end
   #
   #
   method Search_IDESession_Table()
      local f_name, counter:=1, found:=1, msg_box_attribute:=[], attrib:="",
	  ftab := world.nsh_dialog.VCSC_tab
      msg_box_attribute := ftab.get_which_one().get_children()[2].attribs
      attrib := msg_box_attribute[1]

      if find("light yellow",attrib) then{#send events only to the yellow
         f_name := world.nsh_dialog.VCSC_tab.get_which_one().label
         while (found=1)&(counter <= idesession.Table_Index) do {
            if (\idesession.Tidesession[counter]).IDEFile==f_name then {
                #it maybe &null for some field for some users
	        found := 0
                }
	    counter +:= 1
            }#end while
          }
     return found||" "||counter
   end

   method create_msg()
      local cpos
      result := Search_IDESession_Table()
      cpos := find(" ",result)
      found := integer(result[1:cpos])
      counter := integer(result[cpos+1:0])
   end

   method handle_shell_messages(case_name, e, key, shortcut, shell_cmd, msg)
      case case_name of {
	 "cut" | "copy" | "paste" | "undo" | "redo"| "select_all" : {
	    if found = 0 then {
	       if find(key,image(e)) then {
		  e := shortcut
          	  }
	       if idesession.Tidesession[counter-1].CIDE == "on" then {
		  session.Write(shell_cmd || counter-1 || " " || image(e))
		  }
              }
           }
	 "page_up" | "page_down" | "start_of_line" | "end_of_line" : {
              if found = 0 then {
      	         if find(key,image(e)) then {
        	    e := shortcut
          	    }
                 if (idesession.Tidesession[counter-1].CIDE == "on") then {
		    session.Write(shell_cmd ||  counter-1 || " "|| e)
		    }
              }
           }
	 "delete_line" | "delete_left" | "delete_right" : {
              if found = 0 then {
                 if idesession.Tidesession[counter-1].CIDE =="on" then {
                    if &shift then idesession.shift_pressed := 1
	            else idesession.shift_pressed := 0
                    session.Write(shell_cmd || counter-1 || " " || image(e))
	            }
                 }
           }
          "vsb" | "hsb": {
             if found = 0 then {
                 if idesession.Tidesession[counter-1].CIDE == "on" then {
      		    session.Write(shell_cmd || msg)
	            }
                 }
              }
          "handle_press" | "handle_drag" | "handle_release" : {
              if found = 0 then {
                 if idesession.Tidesession[counter-1].CIDE == "on" then {
		    session.Write(shell_cmd || msg)
	            }
                 }
              }
          "home" | "end" | "up" | "down" | "left" | "right" : {
            if found = 0 then {
                if idesession.Tidesession[counter-1].CIDE == "on" then {
                   if &shift then idesession.shift_pressed := 1
                   else idesession.shift_pressed := 0
                   session.Write(shell_cmd || counter-1|| " " || e ||
                                 " " || idesession.shift_pressed)
		   }
                }
            }
          default : {
            if found = 0 then {
               if idesession.Tidesession[counter-1].CIDE =="on" then {
                  if \e ~== "-10" then {
                     # exclude maximize/minimize window events
  		     if e == " " then e:="^^"  #handle space
		     session.Write(shell_cmd || counter-1 || " " || e)
                     }
		  }
               }
            }

         }
   end

   method handle_cut(e)
      self.EditableTextList.handle_cut(e)
      create_msg()
      handle_shell_messages("cut", e, "record", "\^x", "\\SHLevent ")
   end

   method handle_copy(e)
      self.EditableTextList.handle_copy(e)
      create_msg()
      handle_shell_messages("copy", e, "record", "\^c", "\\SHLevent ")
   end

   method handle_paste(e)
      self.EditableTextList.handle_paste(e)
      create_msg()
      handle_shell_messages("paste", e, "record", "\^v", "\\SHLevent ")
   end

   method on_vsb(ev,y_coor,enter_here)
      local m
      if /enter_here & \scroll_locked then fail #lock scrollbar
      self.EditableTextList.on_vsb(ev)
      create_msg()
      if \enter_here = 1 then {
	 if \vsb then {
	    vsb.set_value(y_coor)
	    enter_here := 0
	    }
	 }

      m := counter-1 || " " || get_areay() || " " || ev.type || " " ||
           image(ev.param) || " v"
      handle_shell_messages("vsb", ev, "on_vsb", " ", "\\SHLscrol ", m)
   end

   method on_hsb(ev,x_coor,enter_here)
      local m
      if /enter_here & \scroll_locked then fail#lock scrollbar
      self.EditableTextList.on_hsb(ev)
      create_msg()
      if \enter_here = 1 then {
	 if \hsb then {
	    hsb.set_value(x_coor)
	    enter_here := 0
	    }
	 }

      m := counter-1 || " " || get_areax() || " " || ev.type || " " ||
           image(ev.param) || " h"
      handle_shell_messages("hsb", ev, "on_hsb", " ", "\\SHLscrol ", m)
   end

   method handle_undo(e)
      self.EditableTextList.handle_undo(e)
      create_msg()
      handle_shell_messages("undo", e, "&null", "\^z", "\\SHLevent ")
   end

   method handle_redo(e)
      self.EditableTextList.handle_redo(e)
      create_msg()
      handle_shell_messages("redo", e, "&null", "\^y", "\\SHLevent ")
   end

   method handle_press(e,received)
      local m
      if /received & \mouse_locked then fail #lock mouse
      self.EditableTextList.handle_press(e)
      create_msg()
      m := (counter-1) || " " || image(e) || " " || &x || " " || &y
      handle_shell_messages("handle_press", e, "handle_press", " ",
			    "\\SHLmouse ", m)
   end

   method handle_drag(e,received)
      local m
      if /received & \mouse_locked then fail #lock mouse
      self.EditableTextList.handle_drag(e)
      create_msg()
      m := counter-1 || " " || image(e) || " " || &x || " " || &y
      handle_shell_messages("handle_drag", e, "handle_drag", " ",
			    "\\SHLmouse ", m)
   end

   method handle_release(e,received)
      local m
      if /received & \mouse_locked then fail #lock mouse
      self.EditableTextList.handle_release(e)
      create_msg()
      m := (counter-1) || " " || image(e) || " " || &x || " " || &y
      handle_shell_messages("handle_release", e, "handle_release", " ",
			    "\\SHLmouse ", m)
   end

   method handle_start_of_line(e)
      self.EditableTextList.handle_start_of_line(e)
      create_msg()
      handle_shell_messages("start_of_line", e, "start_of_line", " ",
			    "\\SHLevent ")
   end

   method handle_end_of_line(e)
      self.EditableTextList.handle_end_of_line(e)
      create_msg()
      handle_shell_messages("end_of_line", e, "end_of_line", " ","\\SHLevent ")
   end

   method handle_key_home(e)
      self.EditableTextList.handle_start_of_line(e)
      create_msg()
      handle_shell_messages("home", e, "key_home", " ", "\\SHLkey ")
   end

   method handle_key_end(e)
      self.EditableTextList.handle_end_of_line(e)
      create_msg()
      handle_shell_messages("end", e, "key_end", " ", "\\SHLkey ")
   end

   method handle_select_all(e)
      self.EditableTextList.handle_select_all(e)
      create_msg()
      handle_shell_messages("select_all", e, "&null", "\^a", "\\SHLevent ")
   end

   method handle_key_up(e)
      self.EditableTextList.handle_key_up(e)
      create_msg()
      handle_shell_messages("up", e, "key_up", " ", "\\SHLkey ")
      return
   end

   method handle_key_down(e)
      cursor_x := 1
      cursor_y := *contents[cursor_y - 1]-1

      self.EditableTextList.handle_key_down(e)
      create_msg()
      handle_shell_messages("down", e, "key_down", " ", "\\SHLkey ")
      return
   end

   method handle_key_left(e)
      if cursor_x > 1 then {
         self.EditableTextList.handle_key_left(e)
         create_msg()
         handle_shell_messages("left", e, "key_left", " ", "\\SHLkey ")
         }
   end

   method handle_key_right(e)
      if cursor_x <= *(contents[cursor_y]) then {
         self.EditableTextList.handle_key_right(e)
         create_msg()
         handle_shell_messages("right", e, "key_right", " ", "\\SHLkey ")
         }
   end

   method handle_key_page_up(e)
      self.EditableTextList.handle_key_page_up(e)
      create_msg()
      handle_shell_messages("page_up", e, "key_page_up", " ", "\\SHLevent ")
      return
   end

   method handle_key_page_down(e)
      self.EditableTextList.handle_key_page_down(e)
      create_msg()
      handle_shell_messages("page_down", e, "key_page_down", " ","\\SHLevent ")
      return
   end

   method handle_delete_line(e)
      self.EditableTextList.handle_delete_line(e)
      create_msg()
      handle_shell_messages("delete_line", e, "delete_line", " ","\\SHLevent ")
   end

   method handle_delete_left(e)
      if cursor_x > 1 then {
         self.EditableTextList.handle_delete_left(e)
         create_msg()
         handle_shell_messages("delete_left", e, "delete_left", "\b",
			       "\\SHLevent ")
         }
   end

   method handle_delete_right(e)
      self.EditableTextList.handle_delete_right(e)
      create_msg()
      handle_shell_messages("delete_right", e,"delete_right"," ","\\SHLevent ")
   end

   #
   # This method is modified to work as a simple shell in order to
   # handle the shell/debugging commands.
   # Also,to add some line higlighting to the debuggee
   #
   method handle_return(e)
      local pos, result, counter, found, cmdstr, cmdln, s, index, f, str, i

      # insert the return into the buffer.
      # might need to NOT do this if we do not own the lock, unless
      # that is caught before we ever get here.
      #self.EditableTextList.handle_return(e)
      /highlightline := 1

      # grab the command line that was most recently typed.
      # note that after a return, there is a new empty line after it.
      # note that if we aren't at the end of the editable buffer, we
      # probably should not be trying to execute anything.
      if cursor_y < *contents - 2 then {
	 write(&errout, "missing end-of-buffer check before writing to shell")
         goto_line(*contents,1)
         }
      else {
	 cmdln := contents[cursor_y]

	 if \cmdln then {
	    if \debugger = 1 then {
	       # if this session is a lock on a remote session, we are not
	       # supposed to write to our local pty.

	       write(pty, cmdln)

	       cmdln ? {
		  if cmdstr := tab(upto(' ')) then move(1)
		  else cmdstr := cmdln
		  shellcmd := cmdstr
		  case map(\cmdstr) of {
		     "b" | "break" : {
			highlightline := integer(tab(many(&digits)))
			}
		     "r" | "run" : {
			runs := 1
#			every i := 1 to *file_contents do
#			   if find("main", file_contents[i]) then rnln := i
			if \rnln < highlightline then {
			   rnln := highlightline
			   }
			}
		     "q" | "quit" : {
			debugger := 0
			}
		     default : { highlightline := integer(tab(many(&digits))) }
		     }
		  }
	       }
	    else {
	       # ARE we talking to a remote collaborative session on which we
	       # own the lock? Then no local pty; just send network message.

	       # calculate our Tidesession index for the current shelletl
	       s := Search_IDESession_Table()
	       s ? {
		  if ="0 " & (index := integer(tab(0))) &
		      ((\ (idesession.Tidesession[index-1])).PtyOwner ~==
		       world.nsh_dialog.user_me) then {
		     # skip writing to local stuff
		     }
		  else {
		     # if you aren't debugging, you should still be talking
		     # to a pty that is running an sh instead of a gdb.

		     #write(&errout,"launching a new cmd; should feed to pty")
		     ide.system(cmdln || " > " || wiconlog || " 2>&1", dlst, 1)
		     }
		  }
	       }

	    f := open(wiconlog, "a") | stop("Can't open the logfile")
	    close(f)
	    showanyresult(wiconlog, dlst)
	    }

	 result := Search_IDESession_Table()
	 pos := find(" ", result)
	 found := integer(result[1:pos])
	 counter := integer(result[pos+1:0])
	 if found = 0 then {
	    if idesession.Tidesession[counter-1].CIDE =="on" then {
	       if &shift then idesession.shift_pressed := 1
	       else idesession.shift_pressed := 0

	       session.Write("\\SHLevent " || (counter-1) ||" "||image(e))
	       # in the server send the event to all the users in
	       # the Tide table in the server
	       ide.show_compile_message_to_collaboration(dlst)

	       session.Write("\\SHLHighlight "||counter-1 ||" "||highlightline)
	       }
	    }

	 if \autoindent then {
	    str := contents[cursor_y - 1]
	    i := 1

	    while i < *str + 1  do {
	       case str[i] of {
		  " "     : handle_default(" ")
		  "\t"    : handle_tab_text("\t")
		  default : i := *str +2
		  }
	       i +:= 1
	       }
	    }
	 }
      resize()
      #constrain_line()
      refresh(1)
   end
   #
   #
   #
   method showanyresult(fn, dlst)
      local log1, i, s, ln, nerrors := 0, msgboxSize
      delay(800)
      if log1 := open(fn, "rw") then {
         while ln := read(log1) do {
            if *ln > 0 & (ln ~== "   ") then
               put(\dlst, ln)
            }
         s := dlst[*dlst]
         \s ? { \highlightline := tab(many(&digits)) }
         ide.CurrentEditBox().highlight_line(\highlightline)
         put(\dlst, "   ")
         close(log1)
         remove(fn)
         set_contents(\dlst)
         refresh()
         if ( \ (vsb)).set_value(*dlst - vsb.page_size) then
            refresh()
         }
      else {
         put(dlst, "Can't open logfile " || \fn || ": " || \i)
         set_contents(dlst)
         }

      set_cursor_y(*dlst)
      goto_line(*dlst,1)
      handle_delete_line()

      msgboxSize := *(MsgBox.get_contents())
      MsgBox.set_cursor_y(msgboxSize)
      MsgBox.goto_line(msgboxSize, 1)
      MsgBox.handle_delete_line()
   end
   #
   #
   #
   method goto_line(ln,cn)
      if 1 <= ln <= *contents then {
         cursor_y := ln
         cursor_x := cn
         constrain_line()
         refresh(1)
         }
      else MsgBox.set_contents(["nonexistent line number " || ln])
   end
   #
   #
   #
   method handle_default(e)
      self.EditableTextList.handle_default(e)
      create_msg()
      handle_shell_messages("default", e, "handle_default", " ", "\\SHLevent ")
   end

   #
   # Method modified by RAE
   #

   method handle_event(e)
      local old_contents_size, old_mw, E

      if E := (\vsb).handle_event(e) then {
         #
         # Handled by VSB; amend line number and refresh contents
         #
         constrain_cursor()
         refresh()
         text_area_to_high()
	 }
      else if E := (\hsb).handle_event(e) then {
         #
         # Handled by HSB; amend left offset and refresh
         #
         constrain_cursor()
         refresh()
         text_area_to_high()
	 }
      else {
         if e === -11 then fail # window closed, nothing to do?
         old_contents_size := *contents
         changed := moved := &null
         if integer(e) = &lpress then
            handle_press(e)
         else if integer(e) = &ldrag then
            handle_drag(e)
         else if integer(e) = &mpress then
            simulate_wheelbutton()
         else if integer(e) = &lrelease then
            handle_release(e)
         else if \has_focus then {
            case e of {
               Key_Home : handle_key_home(e)
               Key_End : handle_key_end(e)
               Key_PgUp : handle_key_page_up(e)
               Key_PgDn : handle_key_page_down(e)
               Key_Up : handle_key_up(e)
               Key_Down : handle_key_down(e)
               Key_Left :    handle_key_left(e)
               Key_Right : handle_key_right(e)
               #"\t" : handle_tab_text(e)    #not working
               "\b" : handle_delete_left(e)
               "\r" | "\l": handle_return(e)
               "\^k" : handle_delete_line() #handle_nodefault()
               "\^a" : handle_start_of_line(e)
               "\^e" : handle_end_of_line(e)
               "\d" | "\^d" : handle_delete_right(e)
               "\^x" :  handle_cut(e)
               "\^c" :  handle_copy(e)
               "\^v" :  handle_paste(e)
               "\^z" :  handle_undo(e)
               "\^y" :  handle_redo(e)
               default : handle_default(e)    #not working
            }
         }

         if \moved then {
            #
            # Cursor moved.  Make sure still on screen; update scrollbars,
            # and refresh text.
            #
            constrain_line()
            refresh(1)
            text_area_to_high()
            return _Event(e, self, 0)
	    }
         else if \changed then {
            if (*contents ~= old_contents_size) | \long_line |
               (old_mw ~= TextWidth(cwin,contents[long_line])) then {
               #
               # Contents changed.  Re-compute all internal fields, ensure on
               # screen and re-display whole object.
               #
               set_internal_fields()
               constrain_line()
               display()
               #text_area_to_high()
	       }
            else {
               constrain_line()
               refresh(1)
               text_area_to_high()
	       }
            return _Event(e, self, 0)
         }
      }
   end

   #
   # Set cursor from the current &x, &y
   #
   # @p
   method set_cursor_from_pos()
      local l, nlines, s, i, v
      l := (&y - view.y) / line_height
      nlines := get_curr_lines()
      l <:= 0
      l >:= nlines - 1

      v := view_list[l + get_first_line()]
      cursor_y := v.index #*view_list

      s := v.str
      i := 1
      l := get_left_pos()
      while (i < *s) & (TextWidthEx(cwin, s, 1, i + 1,
				    tab_width) < &x - l) do
         i+:= 1

      cursor_x := v.first + i - 1
   end

   method clear_mark()
      mark_x := mark_y := &null
   end

   method has_region()
      return \mark_x & (mark_x ~= cursor_x | mark_y ~= cursor_y)
   end

   method compute_pmlbl_width()
      local promptlbl := "(ICI)", tblbl

      tblbl := ide.CurrentTabItem().label
      if \debugger = 1 then {
         if find(".icn", tblbl) then promptlbl := "(udb)"
         else if find(".cpp", tblbl) then promptlbl := "(gdb)"
         else if find(".java", tblbl) then promptlbl := "(jdb)"
         }
     
      pmlbl_width := TextWidthEx(cbwin, promptlbl)
   end

   method draw_line(xp, yp, i, rev)
      local si, s, off, off1, off2, v, r, fh, asc, desc, line_off, yp2, cw

      compute_pmlbl_width()
      xp +:= pmlbl_width

      fh := WAttrib(cbwin, "fheight")
      asc := WAttrib(cbwin, "ascent")
      desc := WAttrib(cbwin, "descent")
      v := view_list[i]
      s := v.str
      si := cursor_x - v.first + 1

      # Draw the line number.
      left_string(cbwin, xp, yp, detab(s, tab_width + 1))

      if \debugger = 1 then {
         if i = (1 |  *view_list) then {
            Fg(cbwin, "pale red")  #rectangle color
            yp2 :=  yp + ((asc - desc)/2) - asc
            FillRectangle(cbwin, xp - pmlbl_width, yp2, pmlbl_width, fh)
            Fg(cbwin, "black")   #line_num color
            if (i > 1 ) & (find("gdb",!contents)) then
               left_string(cbwin, xp - pmlbl_width, yp,"(gdb)")
            else if (i > 1) & (find("udb"|"Uncompressed Icode",!contents)) then
               left_string(cbwin, xp - pmlbl_width, yp,"(udb)")
            else if (i > 1 ) & (find("jdb",!contents)) then
               left_string(cbwin, xp - pmlbl_width, yp,"(jdb)")
            else {
               left_string(cbwin, xp - pmlbl_width, yp,"(ICI)")  # prompt
	       }
            }
         else {
            Fg(cbwin, "black")   #line_num color
            left_string(cbwin, xp - pmlbl_width, yp,"     ")
            }
         }
      else {
      #if \debugger = 0 &
      #   \shellcmd == "y" then {
         if i = (1 |  *view_list) then {
            #if shellcmd == "y" then
            Fg(cbwin, "pale red")  #rectangle color
            yp2 :=  yp + ((asc - desc)/2) - asc
            FillRectangle(cbwin, xp - pmlbl_width, yp2, pmlbl_width, fh)
            Fg(cbwin, "black")   #line_num color
            left_string(cbwin, xp - pmlbl_width, yp,"(ICI)")
            }
         else {
            Fg(cbwin, "black")   #line_num color
            left_string(cbwin, xp - pmlbl_width, yp,"     ")
            }
         }

      Fg(cbwin, "black")

      if (v.index = \cursor_y) & (v.first <= \cursor_x <= v.last) then {
         if \has_focus then {
            cw := Clone(cbwin, "bg=red", "fg=white")
            off := TextWidthEx(cbwin, s, 1, si, tab_width)
            EraseRectangle(cw, xp + \off, 1 + yp - line_height / 2,
                           CharWidth(cbwin, s[si]), line_height)

            if s[si] ~== "\t" then
               left_string(cw, xp + off, yp + 1, s[si])

            Uncouple(cw)
	    }
	 else {
            cw := Clone(cbwin, "fg=red")
            Rectangle(cw,
                      xp + TextWidthEx(cbwin, s, 1, si, tab_width),
                      1 + yp - line_height / 2,
                      CharWidth(cbwin, s[si]),
                      line_height)
            Uncouple(cw)
         }
      }

      if \mark_y then {
         if (mark_y < v.index < cursor_y) |
            (mark_y > v.index > cursor_y) then {
            # Whole line selected
            r := [v.first, v.last]
	    }
	 else if v.index = mark_y = cursor_y then {
            # Part of line
            if mark_x < cursor_x then {
               r := range(v.first, v.last, mark_x, cursor_x)
	       }
            else if mark_x > cursor_x then {
               r := range(v.first, v.last, cursor_x + 1 , mark_x)
	       }
	    }
	 else if v.index = mark_y then {
            if mark_y < cursor_y then {
               r := range(v.first, v.last, mark_x,
			  *contents[v.index] + 1)
	       }
	    else {
               r := range(v.first, v.last, 1, mark_x)
	       }
	    }
	 else if v.index = cursor_y then {
            if mark_y > cursor_y then {
               r := range(v.first, v.last, cursor_x + 1,
			  *contents[v.index] + 1)
	       }
	    else {
               r := range(v.first, v.last, 1, cursor_x)
	       }
         }
         if \r then {
            off1 := TextWidthEx(cbwin, s, 1, r[1] - v.first + 1,
				tab_width)
            off2 := TextWidthEx(cbwin, s, 1, r[2] - v.first + 1,
				tab_width)
            FillRectangle(rev, xp + off1, 1 + yp - line_height / 2,
			  off2 - off1, line_height)
	    }
      }
   end

   #
   #
   method toggle_autoindent()
      if \autoindent then autoindent:= &null
      else autoindent := 1
   end
   #
   # Not a very good simulation !!!
   #
   method simulate_wheelbutton()

      if \has_focus then {
         scroll_y := &y

	 while Event() === &mdrag do {
	    if &y > scroll_y then {
	       handle_key_down()
	       handle_key_down()
	       handle_key_down()
	       }
	    if &y < scroll_y  then {
	       handle_key_up()
	       handle_key_up()
	       handle_key_up()
	       }
	    constrain_line()
	    refresh(1)
	    text_area_to_high()
	    }
	 }
   end
   #
   #
   #
   method get_left_pos()
      local lineno_space := 0
      compute_pmlbl_width()
      lineno_space := TextWidth(cwin,*contents)
      return (lineno_space + view.x  - (\hsb).get_value() + pmlbl_width) |
             (lineno_space + view.x + pmlbl_width)
   end
   #
   #
   #
   method reset_drag()
      enddragx := startdragx
      enddragy := startdragy
   end
   #
   #  This method returns the offset(or number of added blanks because
   #  of the tabs) up to the end position. If the use_selfcontents parameter
   #  is null then the number of blanks up to the position (endpos) in the
   #  actual line (the line with the blanks that is displayed) is returned.
   #  If use_selfcontents is not null, then the number of blanks that would
   #  be inserted up to the position (endpos) in contents is returned.
   #
   method offset_pos(tab_line,endpos,use_selfcontents)
   local posx := 0, sblnks := 0, linepos := 0, numtabs := 0, x12

   tab_line ? {
      while x12 := move(1) do {
	 linepos +:= 1
         if /use_selfcontents then {
	    if posx == endpos - 1 then # stop at the pos. in the line displayed
               return sblnks - numtabs
            }
         else {
	    if linepos == endpos then  # stop where at endpos in contents
               return  sblnks - numtabs
             }
         if x12 == "\t" then {
            numtabs +:= 1
            posx +:= 1
            sblnks +:= 8 - (posx-1)%8
            posx +:= (8 -  (posx-1)%8) - 1
            }
         else
            posx +:= 1
         } # while
      }

      #  subtract numtabs the positions "\t" since we already counted them
      return sblnks - numtabs
   end

   method highlight_line(i)
      start_handle()
      if /i  then i := 1
      if not(*contents >=  i > 1) then i := 1

      mark_x := 1
      mark_y := i
      cursor_y := i
      cursor_x := *contents[i] + 1
      end_handle()
   end

initially(a[])
   self.EditableTextList.initially()
   printable := cset(&ascii[33:128])
   cursor_x := cursor_y := 1
   highlightcolor := "65535,65535,32428"
   autoindent := &null
   scroll_y := 1
   accepts_focus_flag := &null
   startdragx := 1
   enddragx := 1
   startdragy := 1
   enddragy := 1
   donedrag := 0
   undolist := []
   redolist := []
   wordlist := []
   noedit := 0
end
