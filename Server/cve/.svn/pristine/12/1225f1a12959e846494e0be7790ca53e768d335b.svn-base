# npc.icn - CVE non player character library code
#
# Authors: Clint Jeffery and Jafar Al Gharaibeh
# Date: 10/1/08
#

$ifdef _UNIX
   $define PS  "/"
$else
   $define PS  "\\"
$endif

$define DEBUG 1
$define DEBUGCON 1


$define THREADS 1

$ifdef THREADS
$include "threadh.icn"
$endif



# The NPC's knowledge of other users' avatars 
class NPCAvatar(
   name, x, y, z, angle, isNPC,  # from \move commands
   npc,
   current_quest_id, current_quest, level, score,
   Tactive_quests,
   Tcompleted_quests  # key: quest_title    value: quest
   )

   method get_next_quest_id()
      current_quest_id +:= 1 
      return current_quest_id
   end
   
   method get_current_quest_id()
      return current_quest_id
   end

   method go_back_quest_id()
      current_quest_id -:= 1 
      return current_quest_id
   end
   
   method add_active_quest(quest)
      Tactive_quests[quest.title] := quest
   end
   
   method get_active_quest(quest_title)
      return Tactive_quests[quest_title]
   end
   
   method cancel_active_quest(quest_title)
      local q
      if \(q := Tactive_quests[quest_title]) then{
	 delete(Tactive_quests, quest_title)
	 go_back_quest_id()
	 return q   
	 }
   end

   method finish_active_quest(quest_title)
      local q
      q := Tactive_quests[quest_title]
      delete(Tactive_quests, quest_title)
      /q := npc.knowledge.get_quest(quest_title)
      if /q then fail
      Tcompleted_quests[quest_title]:=q
      return q
   end

   initially(av_name, ax, ay, az, ang, is_npc, npc)
     if \av_name then name := av_name
     if \ax then x := ax
     if \ay then y := ay
     if \az then z := az
     if \ang then angle := ang
     if \is_npc then isNPC := is_npc
     self.npc := npc
     /x := 0
     /y := 0
     /z := 0
     /angle := 0
     current_quest_id := 0
     Tcompleted_quests := table()
     Tactive_quests := table()
end

record InfoCard(name, title, home, visits, dob, current_place)

class ExternalNPC(userid, password,
		  firstname, lastname,
		  emailid, affiliation,
		  homepage, srvport,
		  n,
		  socket_list,
		  x, y, z, angle,
		  command_queue,
		  reconnect_counter,
		  Tnearby_avatars,
		  Tavatars,
		  info_card,
		  chat,
		  knowledge,

# These were statics before threads era. for some of them, the prefix of the
# variable refers to the function where it is used to "live"

   close_to_avatar_t,
   reconnect_t, reconnect_t_sleep,
   Tsock_pendingin,
   profile_section, sections,
   twoPI,
   name_talking_to_me,
 
   localcon,    # local connection: I am running inside the server 
   concurrent   # I am a concurrent npc
)

method login()
   download_webpage()
   connect_to_server()
end

method myopen()
   if /localcon then
      return n := open(srvport, "n")
   else{
$ifdef THREADS
      &current @>> localcon
      return localcon
$endif
      }
end

method connect_to_server()
   local reply, result   
   if not myopen() then
      DEBUGCON("can't connect to ", image(srvport)) & fail

$ifdef THREADS
   ("\\login "||userid||" "||password|| " " || "npc") @>> n
   if not match("Valid", reply := <<@n) then {
      if not (myopen()) then DEBUGCON("can't connect") & fail
      ( "\\login system unicron") @>> n

      if not match("Valid", <<@n) then DEBUGCON("can't login for NPC creation") & fail

      ("\\newuser " || userid ||" "|| password ||" "|| firstname ||
	    " " || lastname ||" "|| emailid ||" "|| affiliation) @>> n

      result := <<@n
$else
   write(n,"\\login "||userid||" "||password|| " " || "npc")
   if not match("Valid", reply := read(n)) then {
      if not (myopen()) then DEBUGCON("can't connect") & fail
      write(n, "\\login system unicron")

      if not match("Valid", read(n)) then DEBUGCON("can't login for NPC creation") & fail

      write(n,"\\newuser " || userid ||" "|| password ||" "|| firstname ||
	    " " || lastname ||" "|| emailid ||" "|| affiliation)

      result := read(n)
$endif

      DEBUGCON("attempted to create NPC ",userid, ": ", image(result))
      DEBUGCON("can't login for NPC ", userid,": ", reply) & fail
   }
   else DEBUGCON("Login to ", image(srvport)," ", reply)
   if not match("Valid", reply) then DEBUGCON("I guess its not Valid...sorry!") & fail

   put(socket_list, \n)
   return
end

#
# Query the server about the coordinates of my "room/location"
# and wait for the response, then teleport
#
method prepare_to_go_to_room(rname, is_rand)
   local msg
   #/rname := get_home()
   rname := "FLOOR1COR" #get_home()
   if rname == "" then
     if \is_rand then
        rname := "FLOOR1COR" #"@Random"
      #else
      #  fail
   if msg := build_action_command("query", "Room", rname ) then
       send_command(msg)
end

method get_home()
   return \(info_card.home)
end

method teleport(xx, yy, zz)
   if ( x <- real(xx)) & 
      ( y <- real(yy)) &
      ( z <- real(zz)) then{
          move_relative(0.0, 0.0, 0.0)
          idlefunc()
          }
end

method reconnect()
   local t2
   t2 := &now
   if t2-reconnect_t < reconnect_t_sleep then{
      if DEBUG~===1 then writes(" " , t2-reconnect_t, " ")
      delay(reconnect_t_sleep*50+1000)
      return
      }
   reconnect_t:=t2
   if connect_to_server() then{
      reconnect_counter := 0
      reconnect_t_sleep := 2 	# 2^(reconnect_counter+2)
      return
      }
   else{      
      reconnect_counter +:=1
      if reconnect_t_sleep < 128 then reconnect_t_sleep *:= 2
	 DEBUG(reconnect_counter, " : trying to reconnect in ", 
	       reconnect_t_sleep , " seconds" )
      }
   if reconnect_counter < 100 then return
end

method do_net()
   # cve connection
   every do_command( get_net_line(n))
end

#### should be implemented by the super class 
method  do_command()
end

method idlefunc()
end
####

# generator that returns all of the available lines on a given connection (con)
method get_net_line(con)
   local L, buffer, buffer2


$ifdef THREADS
   if not (buffer2 := Tsock_pendingin[con] || (<@con) ) then {
$else
   if not (buffer2 := Tsock_pendingin[con] || ready(con) ) then {
$endif

      DEBUG("failed network traffic :", image(con))

      L := socket_list
      socket_list:=[]
      every put(socket_list, con~===!L)
      #n := &null
      fail
      }
   Tsock_pendingin[con] := ""
   buffer2 ? {
      while buffer := tab(find("\n")) do {
	 suspend (buffer)
	 move(1)
         }
      if *(buffer := tab(0)) > 0 then Tsock_pendingin[con] ||:= buffer
      }
end

#
# download the npc homepage
#
method download_webpage()
   local buffer, line
   buffer :=  load_file_http(homepage) | fail
   *buffer > 0 | fail
   
   buffer ? {
      while line := tab(find("\n")) do {
	 handle_http(line)
	 move(1)
      }      
      if line := tab(0) then
	 handle_http(line)
   }
   return
end

# Manages the data coming from the http server which has the npc homepage
method handle_http(line)
   local word

   line ? { # parse line and look for a new section
      if (tab(find("<a" | "<A")+2) & tab(many(' ')) & tab(find("name=")+5)) then{
         tab(upto('"')+1)
         word:= map(tab(upto('"')))
         if member(sections, word) then{
            if profile_section == "id" & word~=="id" then{
   		DEBUG("My info :")
    		DEBUG("\tName  : ", info_card.name)
   		DEBUG("\tTitle : ", info_card.title)
   		DEBUG("\tHome  : ", info_card.home)
   		DEBUG("\tVisits: ", info_card.visits)
   		DEBUG("\tDob   : ", info_card.dob)
                }
            profile_section :=  word
            DEBUG("---------- new section :", profile_section)
            } # if profile
         } # if member
      } # parse line

   case profile_section of {
      "id" :{ parse_id(line) }
      "knowledge":{knowledge.parse(line)}
      "behavior":{}
      "dialogue":{}
      "avatar":{}
      } # case
end


method parse_id_field(s, a)
   local data
   s? {
      if tab(find(a)+*a) then
         if tab(find(":")+1) then{
            data := remove_tags(tab(0))
         }
      }
   /data | return trim(data,' \t', 0)
end

method parse_id(s)
   local d

   if d:=parse_id_field(s,"Name") then info_card.name := d
   else if d:=parse_id_field(s,"Title") then info_card.title := d
   else if d:=parse_id_field(s,"Home") then info_card.home := info_card.current_place := d
   else if d:=parse_id_field(s,"Visits") then info_card.visits := d
   else if \(d:=parse_id_field(s,"Dob")) | (d:=parse_id_field(s,"DOB")) then
      info_card.dob := d
end

#
# "send" doesn't send, it queues things to be sent (basic packet aggregation)
#
method send_command(msg)
   put(command_queue, msg)
end


method do_latency()
end

#
# NPC's main loop.  Generally either a network read or an idlefunc.
#
method mainloop()
   local L
   repeat {
      #do_latency()
      if /localcon & *socket_list=0 then{
	 if reconnect() then next
	 break # no more tries to reconnect. Just exit!
	 }
         
$ifdef THREADS
      if *(L := select(socket_list,1)) > 0 | Attrib(INBOX_SIZE)>0 then {
$else
      if *(L := select(socket_list,1)) > 0 then {
$endif
	 do_net()
         }
      else if *command_queue > 0 then{
         flush_commands()
         }
       else {
	  idlefunc()
         }

      #idlefunc()
      }
end

#
# Build commands using "my" class variables.  So far "move" or "rotate" only.
# L[1] should be the command.
# Returns the command string to be sent over the network.
#
method build_action_command(L[])
   local cmd, args
   case cmd := pop(L) of{
       "move": {   # rotate is done through move
	  args:= userid || " body " || x || " " || y || " " || z || " " || angle
          }
      default: {
	   args := ""
	   every args ||:= !L || " "
	   }
	}

   cmd := "\\" || cmd || " " || args
   DEBUG("cmd=", image(cmd))
   return cmd
end

method cmd_to_list(s)
   local commandL
   s ? {
      tab(many(' '))
      ="\\"
      commandL := []
      while not(pos(0)) do{
	 put(commandL, tab(find(" ")|0))
	 tab(many(' '))
	 }
     }
  if *commandL>0 then return commandL
end

method rotatey(a)
   local msg
   angle +:= a
   if angle >= twoPI then angle -:= twoPI
   else
   if angle < 0.0 then angle +:= twoPI

   # rotate is done through move
   msg := build_action_command("move")
   send_command(msg)
end

method collide_with_avatar(xx, yy, zz)
   local avat, d
   d := 0.45
   /xx := x
   /yy := y
   /zz := z
   every avat := !Tavatars do
      if sqrt((xx-avat.x)^2 + (yy-avat.y)^2 + (zz-avat.z)^2 ) < d then
	 return
end

method move_relative(dx, dy, dz)
   local msg
   x +:= dx
   y +:= dy
   z +:= dz
   msg := build_action_command("move")
   
   #DEBUG("msg:", image(msg))
   send_command(msg)
   return
end

method say(s)
   writen("\\say " || s)
end

method tell(avat_name, s)
  
   if \s then writen("\\tell " || avat_name ||" " || s)
end

method add_avatar(av_name, ax, ay, az, ang, is_npc)
    if not member(Tavatars, av_name) then{
      Tavatars[av_name] := NPCAvatar(av_name, ax, ay, az, ang, is_npc, self)
       }
       tell_npc_command(av_name, "Quest Halo" )
end

method tell_npc_command(avat_name, s)
   DEBUG("npcmsg " || avat_name ||" " || s)
   writen("\\npcmsg " || avat_name ||" " || s)
end

method do_cmd(s)
   local cmd, cmdL, dx, dy, dz, dangle
   (cmdL := cmd_to_list(s) ) | fail
   cmd := pop(cmdL)
   case cmd of{
      "move" :{
          dx := real(pop(cmdL)) | 0
          dy := real(pop(cmdL)) | 0
          dz := real(pop(cmdL)) | 0
          move_relative(dx, dy, dz)
          return
          }
      "teleport" :{
          if *cmdL=1 then
             prepare_to_go_to_room(pop(cmdL))
          else
            teleport(pop(cmdL), pop(cmdL), pop(cmdL))
          return
          }
      "rotate" :{
          dangle := real(pop(cmdL)) | 0
          rotatey(dangle)
          return
          }
       }
end

method npc_command(s)
   local reply, quest, quest_title, chat_state, qL, quest_id,
   avat, msg, av_name, i, word, cmd, cmdL
   
   \s | fail
   s ? {
      if i := find(":") then{
         av_name := trim(tab(i),' ',0)
         move(1)
         tab(many(' '))
         cmd := tab((find(" ") | 0))
         msg := trim(tab(0), ' \t', 0) | ""
         }
         } # s
   
   if /av_name then{
      DEBUG("Error: no avatar name! should never be here!")
      fail
      }
   avat := Tavatars[av_name]
   /avat := Tavatars[av_name] := NPCAvatar(av_name)
   avat.npc := self

   #DEBUG("NEW MSG: ", cmd || msg)

   msg ? case cmd of {
      "RCcmd":{
	 tab(many(' '))
         (cmd := tab(0) )| fail
	 tell(av_name, "Yes Sir! This is what I should do: " || cmd)
	 send_command("\\"||cmd)
	 }
      "RC" : {
         (cmd := tab(0) )| fail
         tell(av_name, "Yes Sir! This is what I should do: " || cmd)
         do_cmd(cmd) | (reply := "dunno how to do:" || cmd)
	 #DEBUG("-----cmd:", image(cmd))
	 }
      "Help" :{
	 tab(many(' \t'))
	 word := map(tab(find(" ")|0),&ucase, &lcase)
	 case  word of{
	    "xyz" | "pos" : reply := x || ", " || y || ", " || z || "  " || angle 
	    "home" : reply := info_card.home
	    "homepage" : reply := homepage
	    "dob"  : reply := info_card.dob
	    "title": reply := info_card.title
	    "info" :{
	       tell(av_name,"home:" || \(info_card.home))
	       tell(av_name,"homepage:" || \homepage)
	       tell(av_name,"dob:" || \(info_card.dob))
	       tell(av_name,"tile:" || \(info_card.title))
	       tell(av_name,"visits:" || \(info_card.visits))
	       reply := "coords:" || x || ", " || y || ", " || z || " " || angle
	       }
	    }
	 }
      "Quest" :{ 
	 if =" Title(" then{		# we have a quest title in this msg
	    quest_title := tab(upto(')'))
	    move(2)				# skip ") " after the quest title
	    }
	 
	 case tab(many(&letters)) of{		# get the command and take the action
	 "Info": {   	# info coming from the server about the quest I just gave to the client
	    move(1)	# for now that means I have to send a new quest
	    quest := knowledge.get_quest(avat.get_next_quest_id())
	    if /quest | /(quest.page_link) then{
	       reply := "Sorry I do not have any quests right now! " ||
	       "pleast try again later"
	       avat.go_back_quest_id()
	       }
	    else{
	       tell_npc_command(av_name,"Quest Title(" || quest.title || 
	       ") URL=" || quest.page_link)
	       avat.add_active_quest(quest)
	       }
	    }
	 "LookFor": {
	    #if /quest then{
	       tell_npc_command(av_name, "Quest Halo" )
	       #reply := "Click on the diamond to see the next available quest..."
	     #  }
	    #else
	     #  reply := "You have to finish the quest " || 
	      # quest.title|| " you already have first "
	    }
	 "GiveMe" : {
	    quest := knowledge.get_quest(avat.get_next_quest_id())
	    if /quest | /(quest.page_link) then{
	       reply := "Sorry I do not have any quests right now! " ||
	       "pleast try again later"
	       avat.go_back_quest_id()
	       }
	    else{
	       tell_npc_command(av_name,"Quest Title(" || quest.title || 
					") URL=" || quest.page_link)
	       avat.add_active_quest(quest)
	       }
	    }
	 "Accept" : {
	    quest:=avat.Tactive_quests[quest_title]	    
	    if /quest then{
	       quest := knowledge.get_quest(quest_title)
	       if \quest then avat.add_active_quest(quest)
	    }
	    if \quest then
	       reply := "Good luck in your new quest: " || \(quest.title)
	    else
	       reply := " I can't seem to know this quest! Good luck anyway"
	       
	    tell_npc_command(av_name, "Quest Halo" )
	    }
	 "Cancel" : {
	    quest := avat.cancel_active_quest(quest_title)
	    reply := " Hope you take the quest (" || quest_title || " ) soon"
	    tell_npc_command(av_name, "Quest Halo" )
	    }
	 "Done" : {
	    if \(quest:=avat.finish_active_quest(quest_title)) then
	       reply := " Congratulations for completing the quest " || \(quest.title)
	    else
	       reply := " I can't seem to know this quest!"
	    }
	 } # case   
         } # if "Quest"
      } # msg ?  case cmd of
      
   if \reply then{
      tell(av_name, reply)
      return
      }
end

method conversation(cmd, s2)
   local s, i, new_name_talking_to_me, msg, reply

   \s2 | fail

   s2 ? {
      if i := find(":") then{
         new_name_talking_to_me := trim(tab(i),' ',0)
         move(1)
         msg := tab(0) | ""
         }
         } # s2

   if \new_name_talking_to_me~===name_talking_to_me then
   name_talking_to_me := new_name_talking_to_me

   
   DEBUG( " name talking to me:")
   DEBUG("---> ", name_talking_to_me)
   

   if /name_talking_to_me then
      DEBUG("whom should I talk to?!!!") & fail # say(msg)

      every reply := chat.update(name_talking_to_me, msg) do
         if \reply then{
            if cmd=="say" then{
               #say(reply)
	       fail
	    }
            else
               tell(name_talking_to_me, reply)
            }
end

method flush_commands()
   local m, msg

   if *command_queue = 0 then return

   msg :=""
   every m := pop(command_queue) do
      msg := msg || m || "\n"
   
   DEBUG("sending...:", msg, " to:", image(n))

$ifdef THREADS
    msg@>>n
$else
    write(n, msg)
$endif

end

# emit a command
method writen(s)
   send_command(s)
end

method distance_to( x1, y1, z1)
   return sqrt((x-x1)^2 + (y-y1)^2 + (z-z1)^2)
end

#
# Check whether "I" am close to some other avatar, avat.
# Make "t" a (better-named) class variable and read it from profile
# to give different avatars different proximity sensitivity.
#
method close_to_avatar(avat)
   local d
   close_to_avatar_t := 4
   if  abs(y-avat.y) > 1.5 then fail

    d:= sqrt((x-avat.x)^2 + (z-avat.z)^2)
    if close_to_avatar_t > d then
       return
    else fail
end

method already_nearby(avatname)
   return member(Tnearby_avatars, avatname)
end

method check_nearby(avat)
   local av
   if \(av := Tavatars[avat.name]) then{
      av.x := avat.x
      av.y := avat.y
      av.z := avat.z
      av.angle := avat.angle
      }
      
   if already_nearby(avat.name) then{
      if close_to_avatar(avat) then
         Tnearby_avatars[avat.name] := avat
      else
         delete(Tnearby_avatars, avat.name)

   
      DEBUG("---------------------------update " || avat.name)
      }
   else
   if close_to_avatar(avat) then{
      Tnearby_avatars[avat.name] := avat
      if /(avat.isNPC) then
         tell("hello " || avat.name)
         #DEBUG("---------------------------hello " || avat.name)
      }
end

   initially
      x:= y := z := angle := 0
      command_queue := []
      socket_list :=[]
      reconnect_counter := 0
      Tnearby_avatars := table()
      Tavatars := table()
      chat := Chat(self)
      knowledge := Knowledge(self)
      info_card := InfoCard(userid,"","","","")

      close_to_avatar_t := 4
      reconnect_t := &now
      reconnect_t_sleep := 2
      Tsock_pendingin := table("")
      profile_section := ""
      sections := set("id", "description", "knowledge", 
		      "behavior", "dialogue", "avatar")
      twoPI := 2 * &pi
      name_talking_to_me:=""



end

#
#  End of NPC
#


record ChatMessage(msg, typ, info)

class Chat( npc,
   Tavatars_talked_to_me,
   avatar_talking_to_me,
   chat_state
   )
method update(av_name, msg)
   local av_chat, cmsg, reply
   av_chat := Tavatars_talked_to_me[av_name]
   avatar_talking_to_me := av_name

   if /av_chat then{
      av_chat := avatarChatHistory()
      Tavatars_talked_to_me[av_name] := av_chat
      suspend " hey, " || av_name
      }
   #if member(avatars_talked_to_me, av_name) then
     every reply := parse_msg(msg) do
        suspend reply
end

method get_last_msg()
local av_chat
   if \(av_chat := Tavatars_talked_to_me[avatar_talking_to_me]) then
      av_chat.get_last_msg()
end

method question(msg)

   msg ? {
      tab(many(' \t'))
      case map(tab(many(&letters))) of {
	 "what" : {
            if find("name") then
               return "my name is " || ( npc.info_card.name |  npc.userid )
            else if find("visit") then {
               if \npc.info_card.visits then
                  return "I live in " || npc.info_card.visits
               else
                  return " sometimes, cve. No other place in my mind right now"
               }
            else if find("doing") then
               return " nothing important!"
            else if find("knowledge") then
               return npc.knowledge.description
            else return "excuse me, are you asking me ?"
            }
        "who":{
           if find("you") then
              return " I am " || ( npc.info_card.name |  npc.userid )
           else return "sorry, I don't know what yo mean! ?"
           }
        "how" : {
           if find("old") then
              return " I don't like to talk about my age, but I'm young!"
           else
           if find("are") & find("you") then
              return " I'm fine! you ?"
           else
              return "excuse me!"
           }
        "where":{
            if find("home") | find ("live") then {
               if \npc.info_card.home then
                  return "I live in " || npc.info_card.home
               else
                  return " I have no specific place at this moment "
               }
            else if find("are") & find ("you") then {
               if \npc.info_card.current_place then
                  return "I'm in " || npc.info_card.current_place
               else
                  return " I'm lost!"
               }
            else if find("go") | find("visit") then{
               if \npc.info_card.visits then
                  return "I go to " || npc.info_card.visits
               else
                  return " sometimes, cve. No other place in my mind right now"
               }
            }
        } # case
      } # msg

end

method parse_msg(msg)
   local reply

      if \ (reply := question(msg)) then
         return reply
      else if get_last_msg()~===msg then 
         return msg


end

initially
   Tavatars_talked_to_me := table()
end
# Chat

#
#
#
class avatarChatHistory(
   name,
   msg_history,
   last_msg_time
   )
method add_msg(s)
  \s | fail
  put(msg_history, s)
  last_msg_time := &time
end

method get_last_msg()
   return msg_history[-1]
end

initially
   msg_history := list()
   last_msg_time := 0
end
# class avatarChatHistory


class ChatBox(Tpattern)


initially
   Tpattern := table()
end




#
#
class KnowledgeCategory(
   title,
   quest_list,
   quest_table # another way to access quests -> hash them by their titles
   )
method add_quest(q)
   put(quest_list, q)
   quest_table[q.title] := q
end

method get_quest(id)
   if /id then return ?quest_list
   if integer(id) then return quest_list[id]   
   if string(id) then return quest_table[id]
end

   initially
      quest_list := []
      quest_table := table()
end
# class KnowledgeCategory

#
#
#
class Knowledge(npc,
   current_category,
   description,
   Tcategory,   #  table of all the categories that the npc knows about

# old statics
   parsestate, category, oldstate, questlink, questtitle, 
   new_quest_link, _quest
   )
   
method load_quest(pagelink, questtitle)
   local quest, fname

   #fname := ".." || PS || ".." || PS || "dat" || PS || "users"  || PS || npc.userid || PS ||
#	    "quests" || PS ||file_name(pagelink)
   
 #  if not stat(fname) then
      fname := pagelink
   
   quest := Quest()
   quest.title := \questtitle | "Quest" # Until we parse the real title
   
   quest.import_html_file(fname) | fail
   
   return quest

end

#
# parse input line coming from http connection to the homepage
#
method parse(line)
   local i, s, con

   if oldstate~==parsestate then{
      DEBUG( " parsing.................... ", parsestate)
      oldstate := parsestate
      }

   line ? {
      case parsestate of{
         "questlink" :{
            if ="EOF" then{
               DEBUG("============== end of quest parsing!!!")
               parsestate := "questend"   # looking for a new quest link
               }
            }
         "questend":{
             if find("<dt>", line)  then
                parsestate := "definition"
             else if find("<li>") then
                parsestate := "category"
             }
         "description":{
             if tab(find("<dl>")+4) then{
                parsestate := "definition"
                line := &subject[&pos:0]
                }
             }
         } # case 
      } # line

   case parsestate of{
      "description" :{  # we are parsing at the begining of the knowledge section
         if (s:=remove_tags(line))~==="" then
            description ||:= s || "\n"
         return
         }
      "definition" :{
         if i:=find("<dt>", line)  then{
            category := KnowledgeCategory()
            category.title := remove_tags(line)
            add_category(category)
            DEBUG(" new category:", category.title)
            parsestate := "category"
            }
         }
      "category" :{
         line ? {
            if tab(find("<li>")+4) then new_quest_link := 1
	    if \new_quest_link & tab(find("href=")+5) & tab(upto('"')+1) then{
	       new_quest_link := &null
               #quest := Quest()
               questlink := tab(find("\""))
               tab(find(">")+1)
               questtitle := trim(tab(find("<")),' ', 0)
               DEBUG(" NPC page, new quest:", questtitle)
               DEBUG(" NPC page quest link :", questlink)
	       
	       if \(_quest := load_quest(questlink)) then
		  category.add_quest(_quest)
	       
               #if \(con := connect_http(quest.page_link) ) then{
               #   category.add_quest(_quest)
               #   npc.push_http_connection(con)
		#  parsestate := "questlink"
                #  }
               }
            } # line
         }
      "questlink" :{
	 if ="EOF" then
	    parsestate := "questend"   # looking for a new quest link
	 else
	    _quest.parse(line)
	 }
      } # case

end

method get_quest(id, cat_title)
   if \cat_title then{
      DEBUG("cat found :", cat_title)
      return Tcategory[cat_title].get_quest(id)
      }
   else if \current_category then{
      DEBUG("cat found :", cat_title)
      return current_category.get_quest(id)
      }
end

method add_category(cat)
   Tcategory[cat.title] := cat
   current_category := cat
end

method add_quest(q, cat)
   /cat :=current_category
   if /cat then fail
      
   (Tcategory[cat]).add_quest(q)
end

   initially
      Tcategory := table()
      description:=""

      parsestate:="description"
      oldstate:=""
end
# class Knowledge
