#
# Virtual table class.
#

class ATable:Obstacle(
            x,         # 'x' position of the table centre
            y,           # 'y' position of the table centre
            z,          # 'z' posiion of the table centre
            color,      # color of the table
            angle,      # angle in which table should be drawn w.r.t. centre
            type,       # it describes whether the table is of 'office' type or
                        #   'lab' type

            minx,miny,minz,maxx,maxy,maxz,  # used in restricting the avatar to
            collide,                      # move through the table.

            name,
            dle0,
            dle1_0,
            dle1_1,
            dle1_2,
            dle2,
            dle3,

            T1,T2,T3,R1,R2,R3) # useful in translating the draws of the table



 method render(render_level)

    local ang_rad,x_trans,z_trans,flag,incr

     if (\dle0) then {
        if render_level=0 then
           dle0.skip := 1
        if render_level=1 then {
           dle0.skip := 0
           (\ dle1_2).skip := 1
           (\ dle3).skip := 1
 
           if type=="lab" then {
              dle1_0.skip := 0
              dle1_1.skip := 0
              dle2.skip := 1
           }
           if type=="office" then {
              dle1_0.skip := 1
              dle1_1.skip := 1
              dle2.skip := 0
           }
        }
        if render_level=2 then {
           dle0.skip := 0
           dle2.skip := 0
           dle1_0.skip := 0
           dle1_1.skip := 0
           (\dle3).skip := 1
           if type=="office" then {
              dle1_2.skip := 0
           }
        }
        if render_level=3 then {
           dle0.skip := 0
           dle2.skip := 0
           dle1_0.skip := 0
           dle1_1.skip := 0
           if type=="office" then {
              dle1_2.skip := 0
              dle3.skip := 0
           }
        }
     }
     else full_detail_table()
end

   method full_detail_table()
   local ang_rad,x_trans,z_trans,flag,incr,win3d

      win3d := !gui::dispatcher.subwins

      dle0 := WSection(win3d, "table0")
      WAttrib("texmode=off")

      PushMatrix()
      Translate(0,0.88,0)

         #Upper one       
         PushMatrix()
           Translate(x,y,z)
           Rotate(angle,0,1,0)
           Rotate(-90,1,0,0)
           case type of {
           "lab" :{ 
           Scale(1.9,0.77,0.07)
            } 
           "office" : {
           Scale(2,1.2,0.07)
             }
           }
           Fg("diffuse"||" " || color )
           DrawCube(0,0,0,0.9)
         PopMatrix()

           ang_rad := dtor(90+angle)
           x_trans := 0.85 * sin(ang_rad)
           z_trans := 0.85 * cos(ang_rad)               
           draw_big_leg(angle,x_trans,z_trans) 

           dle1_0 := WSection(win3d, "table1_0")
              draw_lower_leg(angle,x_trans,z_trans)  
           # dle1_0
           WSection(win3d)

           ang_rad := dtor(-90+angle)
           x_trans := 0.85 * sin(ang_rad)
           z_trans := 0.85 * cos(ang_rad)        
           draw_big_leg(angle,x_trans,z_trans) 

           dle1_1 := WSection(win3d, "table1_1")
              draw_lower_leg(angle,x_trans,z_trans)
           # dle1_1
           WSection(win3d)

        dle2 := WSection(win3d, "table2")
	 # Back Table
         PushMatrix()
           Translate(x,y,z)
           Rotate(angle,0,1,0)
           FillPolygon(-0.86,0,-0.24, -0.86,-0.6,-0.24, 0.86,
		       -0.6,-0.24,0.86,0,-0.24,-0.86,0,-0.24)
         PopMatrix()
        # dle2
        WSection(win3d)


       if type == "office" then {    
	 dle1_2 := WSection(win3d, "table1_2")

           PushMatrix()
             T1 := Translate(x,y,z)
             R1 := Rotate(angle,0,1,0)

             #Bottom            
             FillPolygon(-0.25,-0.6,-0.49, -0.25,-0.6,0.47, -0.8,-0.6,0.47,
                                -0.8,-0.6,-0.49,  -0.25,-0.6,-0.49)
             # Right Side            
             FillPolygon(-0.25,0,-0.49,  -0.25,0,+0.47,   -0.25,-0.6,0.47,
                                -0.25,-0.6,-0.49, -0.25,0,-0.49)      
             #Left side
             FillPolygon(-0.8,0,-0.49, -0.8,0,0.47, -0.8,-0.6,0.47,
                                -0.8,-0.6,-0.49, -0.8,0,-0.49)
             #Front Side
             FillPolygon(-0.8,-0.6,0.47,  -0.8,0,0.47,    -0.25, 0,0.47,  
                                -0.25,-0.6,0.47,  -0.8,-0.6,0.47)
             #Bottom        
             FillPolygon(0.25,-0.6,-0.49, 0.25,-0.6,0.47,  0.8,-0.6,0.47,
                                0.8,-0.6,-0.49, 0.25,-0.6,-0.49)
             #Left side            
             FillPolygon(0.8,0,-0.49, 0.8,0,0.47,  0.8,-0.6,0.47,
                                0.8,-0.6,-0.49, 0.8,0,-0.49)
             # Right side
             FillPolygon(0.25,0,-0.49,    0.25,0,+0.47,   0.25,-0.6,0.47,
                                0.25,-0.6,-0.49, 0.25,0,-0.49)
             #Front Side
             FillPolygon(0.8,-0.6,0.47,  0.8,0,0.47,    0.25, 0,0.47,  
                                0.25,-0.6,0.47,  0.8,-0.6,0.47)
           PopMatrix()
       # dle1_2
       WSection(win3d)
       }

         if type == "office" then {
        dle3 := WSection(win3d, "table3")
           # LEFT PART OF TABLE        
           PushMatrix()
             T1 := Translate(x,y,z)
             R1 := Rotate(angle,0,1,0)
             #Bottom            
             FillPolygon(-0.25,-0.6,-0.49, -0.25,-0.6,0.47, -0.8,-0.6,0.47,
                            -0.8,-0.6,-0.49,  -0.25,-0.6,-0.49)
             # draw1            
             FillPolygon(-0.25,-0.2,-0.49, -0.25,-0.2,0.47,  -0.8,-0.2,0.47,
                            -0.8,-0.2,-0.49,  -0.25,-0.2,-0.49)
             # draw2          
             FillPolygon(-0.25,-0.4,-0.49, -0.25,-0.4,0.47, -0.8,-0.4,0.47,
	                    -0.8,-0.4,-0.49,  -0.25,-0.4,-0.49)
             # RIGHT PART OF TABLE    
             #Bottom        
             FillPolygon(0.25,-0.6,-0.49, 0.25,-0.6,0.47,  0.8,-0.6,0.47,
                             0.8,-0.6,-0.49,  0.25,-0.6,-0.49)
             # draw1           
             FillPolygon(0.25,-0.2,0.47, 0.25,0,0.47, 0.8,0,0.47,
		             0.8,-0.2,0.47,  0.25,-0.2,0.47)
             # draw2          
             FillPolygon(0.25,-0.4,-0.49, 0.25,-0.4,0.47, 0.8,-0.4,0.47,
		             0.8,-0.4,-0.49, 0.25,-0.4,-0.49)
             # LEFT PART OF TABLE   
             # Right Side            
             FillPolygon(-0.25,0,-0.49,  -0.25,0,+0.47,   -0.25,-0.6,0.47,
                             -0.25,-0.6,-0.49, -0.25,0,-0.49)
             #Left side
             FillPolygon(-0.8,0,-0.49, -0.8,0,0.47, -0.8,-0.6,0.47,
                             -0.8,-0.6,-0.49, -0.8,0,-0.49)
             #RIGHT PART OF TABLE            
             #Left side            
             FillPolygon(0.8,0,-0.49, 0.8,0,0.47,  0.8,-0.6,0.47,
                              0.8,-0.6,-0.49,    0.8,0,-0.49)
             # Right side
             FillPolygon(0.25,0,-0.49,    0.25,0,+0.47,   0.25,-0.6,0.47,
                              0.25,-0.6,-0.49, 0.25,0,-0.49)
             # LEFT PART OF TABLE 
             # Bottom closing            
             FillPolygon(-0.25,-0.6,0.47, -0.25,-0.4,0.47, -0.8,-0.4,0.47,
                              -0.8,-0.6,0.47,  -0.25,-0.6,0.47)
             # Draw1 closing           
             FillPolygon(-0.25,-0.2,0.47, -0.25,0,0.47, -0.8,0,0.47,
                              -0.8,-0.2,0.47,  -0.25,-0.2,0.47)
             # Draw2 closing           
             FillPolygon(-0.25,-0.4,0.47, -0.25,-0.2,0.47,  -0.8,-0.2,0.47,
                              -0.8,-0.4,0.47,  -0.25,-0.4,0.47)
             # RIGHT PART OF TABLE 
             # Bottom closing
             FillPolygon(0.25,-0.6,0.47, 0.25,-0.4,0.47, 0.8,-0.4,0.47,
                              0.8,-0.6,0.47,  0.25,-0.6,0.47)
             # Draw1 closing
             FillPolygon(0.25,-0.2,0.47, 0.25,0,0.47, 0.8,0,0.47,
                              0.8,-0.2,0.47,  0.25,-0.2,0.47)
             # Draw2 closing
             FillPolygon(0.25,-0.4,0.47, 0.25,-0.2,0.47, 0.8,-0.2,0.47,
                              0.8,-0.4,0.47,  0.25,-0.4,0.47)
           PopMatrix()
           Fg("diffuse gray blue")
           PushMatrix()
             T2:= Translate(x,y,z)
             R2 := Rotate(angle,0,1,0)
             DrawOpener(-0.525,-0.1)
             DrawOpener(-0.525,-0.3)
             DrawOpener(-0.525,-0.5)
             DrawOpener(0.525,-0.1)
             DrawOpener(0.525,-0.3)
             DrawOpener(0.525,-0.5)
           PopMatrix()
       WSection(win3d)
       }
       WAttrib("texmode=on")
#      }
  PopMatrix()
  # dle0
  WSection(win3d)

end



   # The draw opener draws knobs(Openers) of the desks
   method DrawOpener(p,q)       
      DrawSphere(p,q,0.5,0.025)
   end

   method draw_big_leg(angle_rad,xtrans,ztrans)
      PushMatrix()
        if y ~= 0 then
          Translate(x+xtrans,y-0.24*y,z+ztrans)
         else
           Translate(x+xtrans,y-0.6,z+ztrans)
        Rotate(angle_rad,0,1,0)
        Scale(0.1,2.5,1)
        DrawCube(0,1,-0.1,0.35)
     PopMatrix()
   end



   method draw_lower_leg(angle_rad,xtrans,ztrans)
     PushMatrix()
        Translate(x+xtrans,y-1,z+ztrans)
        Rotate(angle_rad,0,1,0)
        Scale(0.2,0.6,2)
        DrawCube(0,0.44,0,0.45)
     PopMatrix()
   end



   method disallows(x,z)  ## Box
      #calc_boundbox_chair()
      if minx-collide <= x <= maxx+collide &
	  minz-collide <= z <= maxz+collide then {
	  return
	  }
      fail
   end


initially(opMode,coords,A,col,type_table)
   self.opMode := opMode
   x := coords[1]
   y := coords[2]
   z := coords[3]
   color := col
   #direction := dir
   type := type_table
   angle := A
   /x := 0
   /y := 0
   /z := 0
   /color := "gray"
   /minx := x - 0.5
   /miny := y
   /minz := z - 0.5
   /maxx := x + 0.5
   /maxy := y
   /maxz := z + 0.5
   /collide := 0.3
   /type := "office"
   /angle := 0
   /name := "Table"
   #write(color, "table created")
end







