################################################################
#   File:     groups.icn
#   Subject:  Contains all the groups' management methods.
#
#   Author:   Hani Bani-Salameh
#   Date:     February 18, 2010
################################################################

import gui
$include "guih.icn"
$include "keysyms.icn"
#link "../src/ide/imgs"
#link "../client/session"
link datetime

global sendto_grp_menu, invited_user, allusrlst, allgrplst, initpath,
       openedprofile, # opened profile user id
       projfiles_tree, # selected project files tree
       selected_node_obj,   # selected tree node (group or user)
       selected_node,   # selected tree node label
       selected_obj,
       sProject, # selected project
       fileslst,
       grpusrsList,
       profile_tab_item,
       allprojlst,
       member_proj_set,   # set to store the selected member projects' names
       projectdlg, grpSet,
       myprojectslst, myblocklst, myfriendsslst, mypartnersslst,
       num_of_posts, h_val, wall_border, wall_tab_item, dlg_type,
       post_contents, reply_contents, obj_post_dlg, mypPriority,
       my_space, replybtn_lbl, postsTbl, number_of_posts, addPostId,
       obj_desc

$ifdef _UNIX
   $define PS  "/"
$else
   $define PS  "\\"
$endif

class ICIGroups (
   add_grp_menu, invite_usr_menu, del_grp_menu, del_usr_menu, p_menu,
   add_group, add_user, delete_group, add_friend, grp_wall_menu,
   delete_user, sep_1, sep_2, groups_lbl, xpos, ypos, desc_grp_menu,
   view_profile_menu, set_profile_permission_menu, permissions_type,
   tree_pop, set_grp_permission_menu, join_grp_menu, leave_grp_menu,
   location,  view_desc_grp_menu, edit_desc_grp_menu
   )

   #
   # This popup menu allows the user to do :
   # Invite user to joing group, add as friend, view user's profile,
   # invite for collaboration session, leave session, and IDE take turn
   #
   method users_popup_menu()
      local tree_pop, p_menu, invite_to_ide_session,
         leave_ide_session, ide_take_turn, sep_0, sep_1, sep_2, sep_3,
         invite_to_group, user_view_profile, block_user, unblock_user,
         sigName, group_name, grp_name,grps_tree_root,
         sigNode, usrfound, invite_to_project,
         projs_tree_root, p_invited_user, projNode, projName,
         project_name, chat, textchat, audiochat, send_email,
         user_view, view_profile, view_activity_summary, view_active_quests,
         view_completed_quests, p, j, g, new_session_name, session_tree_root,
         mysession, session_name, projSet := set(), selected_node_depth, sa,
         permissionsLst := ["Private", "Public", "Friends"], uNode, nodeParent,
         usr, loc, avatloc, change_status, avat, ustat, status_lst, s, sType,
         gc, view_availability, view_all_availability

      tree_pop := PopupMenu()
      p_menu := Menu()
      tree_pop.set_menu(p_menu)

      tree_pop.set_attribs("bg=white")
      gc := world.nsh_dialog.users_tree.object_get_cursor()
      selected_node := gc.get_label()
      selected_node := trim(selected_node, " ", 0)
      selected_node_depth := (gc).depth
      p_invited_user := invited_user := selected_node
      uNode :=  world.nsh_dialog.users_tree.object_get_cursor()
      nodeParent := (uNode.get_parent_node()).get_label()

      if selected_node_depth = 1 then {
         view_all_availability := TextMenuItem()
         view_all_availability.set_label("Users' Availability")
         view_all_availability.connect(self, "on_view_all_availability",
            ACTION_EVENT)
         p_menu.add(view_all_availability)
         world.nsh_dialog.add(tree_pop)
         tree_pop.init()
         tree_pop.resize()
         tree_pop.popup()
         }
      if selected_node_depth = 2 then {
         if /find("Friends"|"Online"|"Offline"|"NPCs", selected_node) then {
            selected_node ? {
               usr := tab(find(" "))
               move(1)
               loc := tab(0)
               }
            }
         selected_node := usr
         change_status := Menu()
         change_status.set_label("Change Status")

         if \(avat := world.get_avatar(selected_node)) then
           ustat := avat.get_activity_status()

         status_lst := ["Away", "Busy", "Offline", "Online"]
         every s := !status_lst do {
            if s ~== ustat then {
               sType := TextMenuItem()
               sType.set_label(trim(s, " ", 0))
               sType.connect(self, "on_change_user_status", ACTION_EVENT)
               change_status.add(sType)
               }
            }
         p_menu.add(change_status)

         send_email := TextMenuItem()
         send_email.set_label("Email")
         send_email.connect(self, "on_send_email", ACTION_EVENT)
         p_menu.add(send_email)

         user_view := Menu()
         user_view.set_label("View")
         view_profile := TextMenuItem()
         view_profile.set_label("Profile")
         view_profile.connect(self, "on_view_profile", ACTION_EVENT)
         user_view.add(view_profile)

         view_availability := TextMenuItem()
         view_availability.set_label("User's Usage Report")
         view_availability.connect(self, "on_view_availability_report", ACTION_EVENT)
         user_view.add(view_availability)

         view_activity_summary := TextMenuItem()
         view_activity_summary.set_label("Activity Summary")
         view_activity_summary.connect(self, "on_view_activity", ACTION_EVENT)
         user_view.add(view_activity_summary)

         view_active_quests := TextMenuItem()
         view_active_quests.set_label("Active Quests")
         view_active_quests.connect(self, "on_view_active_quests",
            ACTION_EVENT)
         user_view.add(view_active_quests)

         view_completed_quests := TextMenuItem()
         view_completed_quests.set_label("Completed Quests")
         view_completed_quests.connect(self, "on_view_completed_quests",
            ACTION_EVENT)
         user_view.add(view_completed_quests)

         p_menu.add(user_view)

         set_profile_permission_menu := Menu()
         set_profile_permission_menu.set_label("Set Profile Permission")

         every p := !permissionsLst do {
            permissions_type := TextMenuItem()
            permissions_type.set_label(p)
            permissions_type.connect(self, "on_set_profile_permission",
               ACTION_EVENT)
            set_profile_permission_menu.add(permissions_type)
            }
         p_menu.add(set_profile_permission_menu)

         world.nsh_dialog.add(tree_pop)
         tree_pop.init()
         tree_pop.resize()
         tree_pop.popup()
         }
      if selected_node_depth == 3 then {
         selected_node ? {
            usr := tab(find(" "))
            move(1)
            loc := tab(0)
            }
         selected_node := usr

         if find("Online"|"Offline"|"Friends", nodeParent) then {
            if find("Online", nodeParent) |
               find("Offline", nodeParent) then {
               add_friend := TextMenuItem()
               add_friend.set_label("Add as Friend")
               add_friend.connect(self, "on_friend_add", ACTION_EVENT)
               p_menu.add(add_friend)
               }
            invite_to_group := Menu()
            invite_to_group.set_label("Invite User to Group")
            grps_tree_root := world.nsh_dialog.groups_tree.get_root_node()
            #sa := \world.nsh_dialog.users_tree.object_get_selections()[1]
            #invited_user := (sa).get_label()
            if \invited_user then {
               invited_user ? {
                  usr := tab(find(" "))
                  move(1)
                  loc := tab(0)
                  }
               invited_user := usr
               }
            else world.write_chat("Select a user node...")
            every g := !(\allgrplst) do {
               if not (g == ("cpp" | "unicon" | "java" | "se&uml")) then {
                  sigNode := world.nsh_dialog.Search_Tree(g, grps_tree_root)
                  usrfound := MySearchTree(invited_user, sigNode)

                  if /usrfound then
                     if not member(grpSet, g) then insert(grpSet, g)
                  }
               }
            every sigName := !grpSet do {
               group_name := TextMenuItem()
               group_name.set_label(trim(sigName, " ", 0))
               group_name.connect(self, "on_invite_to_group_1", ACTION_EVENT)
               invite_to_group.add(group_name)
               }
            p_menu.add(invite_to_group)

            invite_to_project := Menu()
            invite_to_project.set_label("Invite User to Project")
            projs_tree_root := world.nsh_dialog.projects_tree.get_root_node()
            #p_invited_user := (sa).get_label()

            every projName := !myprojectslst do {
               project_name := TextMenuItem()
               project_name.set_label(trim(projName, " ", 0))
               project_name.connect(self, "on_invite_to_project",
                                 ACTION_EVENT)
               invite_to_project.add(project_name)
               }
            p_menu.add(invite_to_project)

            if not member(myblocklst, selected_node) then {
               block_user := TextMenuItem()
               block_user.set_label("Block")
               block_user.connect(self, "on_block_user", ACTION_EVENT)
               p_menu.add(block_user)
               }
            else {
               unblock_user := TextMenuItem()
               unblock_user.set_label("Unblock")
               unblock_user.connect(self, "on_unblock_user", ACTION_EVENT)
               p_menu.add(unblock_user)
               }

            send_email := TextMenuItem()
            send_email.set_label("Email")
            send_email.connect(self, "on_send_email", ACTION_EVENT)
            p_menu.add(send_email)

            user_view := Menu()
            user_view.set_label("View")
            view_profile := TextMenuItem()
            view_profile.set_label("Profile")
            view_profile.connect(self, "on_view_profile", ACTION_EVENT)
            user_view.add(view_profile)

            view_availability := TextMenuItem()
            view_availability.set_label("User's Usage Report")
            view_availability.connect(self, "on_view_availability_report", ACTION_EVENT)
            user_view.add(view_availability)

            view_activity_summary := TextMenuItem()
            view_activity_summary.set_label("Activity Summary")
            view_activity_summary.connect(self, "on_view_activity",
               ACTION_EVENT)
            user_view.add(view_activity_summary)

            view_active_quests := TextMenuItem()
            view_active_quests.set_label("Active Quests")
            view_active_quests.connect(self, "on_view_active_quests",
               ACTION_EVENT)
            user_view.add(view_active_quests)

            view_completed_quests := TextMenuItem()
            view_completed_quests.set_label("Completed Quests")
            view_completed_quests.connect(self, "on_view_completed_quests",
               ACTION_EVENT)
            user_view.add(view_completed_quests)

            p_menu.add(user_view)
            world.nsh_dialog.add(tree_pop)
            tree_pop.init()
            tree_pop.resize()
            tree_pop.popup()
            }
         }
   end
   #
   # This popup menu allows the user to do :
   # Invite to joing group, remove user from group, send message to group,
   # view user's profile, add group, remove group, join group, and leave group
   #
   method groups_popup_menu()
      local permissionsLst := ["Private", "Public", "Friends"],
         sep_1, sep_2, sep_3, userID, ustat, invited_usr, p,
         u, avat, usrSet := set(), selected_node_depth,
         inv_node, found := &null

      tree_pop := PopupMenu()
      p_menu := Menu()
      tree_pop.set_menu(p_menu)

      tree_pop.set_attribs("bg=white")

      selected_node := world.nsh_dialog.groups_tree.object_get_cursor().get_label()
      selected_node := trim(selected_node, " ", 0)
      selected_node_depth := (world.nsh_dialog.groups_tree.object_get_cursor()).depth
      inv_node := (\world.nsh_dialog.groups_tree.object_get_selections()[1])

   if selected_node_depth = 3 then {
      if selected_node ~== world.nsh_dialog.user_me then {
         every userID := !myfriendsslst do {
            if \(avat := world.get_avatar(userID)) then {
               ustat := avat.get_activity_status()
               every u := trim((!inv_node.subnodes).label, " ", 0) do
                  if userID === u then found := 1
               }
            }
         if \found then {
            add_friend := TextMenuItem()
            add_friend.set_label("Add as Friend")
            add_friend.connect(self, "on_add_friend", ACTION_EVENT)
            p_menu.add(add_friend)
            }
         del_usr_menu := TextMenuItem()
         del_usr_menu.set_label("Remove User from Group")
         del_usr_menu.connect(self, "on_remove_user", ACTION_EVENT)
         p_menu.add(del_usr_menu)
         }
      view_profile_menu := TextMenuItem()
      view_profile_menu.set_label("View Profile")
      view_profile_menu.connect(self, "on_view_group_member_profile", ACTION_EVENT)
      p_menu.add(view_profile_menu)
      }
   if selected_node_depth = 1 then {
      add_grp_menu := TextMenuItem()
      add_grp_menu.set_label("Add Group")
      add_grp_menu.connect(self, "on_add_group", ACTION_EVENT)
      p_menu.add(add_grp_menu)
      }
   if selected_node_depth = 2 then {
      desc_grp_menu := Menu()
      desc_grp_menu.set_label("Description")      
      view_desc_grp_menu := TextMenuItem()
      view_desc_grp_menu.set_label("View")
      view_desc_grp_menu.connect(self, "on_view_group_description", ACTION_EVENT)
      desc_grp_menu.add(view_desc_grp_menu)
      edit_desc_grp_menu := TextMenuItem()
      edit_desc_grp_menu.set_label("Edit")
      edit_desc_grp_menu.connect(self, "on_edit_group_description", ACTION_EVENT)
      desc_grp_menu.add(edit_desc_grp_menu)
      p_menu.add(desc_grp_menu)

      del_grp_menu := TextMenuItem()
      del_grp_menu.set_label("Remove Group")
      del_grp_menu.connect(self, "on_remove_group", ACTION_EVENT)
      p_menu.add(del_grp_menu)
      join_grp_menu := TextMenuItem()
      join_grp_menu.set_label("Join Group")
      join_grp_menu.connect(self, "on_join_group", ACTION_EVENT)
      p_menu.add(join_grp_menu)
      leave_grp_menu := TextMenuItem()
      leave_grp_menu.set_label("Leave Group")
      leave_grp_menu.connect(self, "on_leave_group", ACTION_EVENT)
      p_menu.add(leave_grp_menu)

      invite_usr_menu := Menu()
      invite_usr_menu.set_label("Invite User to Group")

      inv_node := (\world.nsh_dialog.groups_tree.object_get_selections()[1])
      every userID := !myfriendsslst do {
         if \(avat := world.get_avatar(userID)) then {
            ustat := avat.get_activity_status()

         every u := trim((!inv_node.subnodes).label, " ", 0) do
         if userID === u then found := 1
         if /found then
         if \ustat == ("Online" | "Away" | "Busy") then {
            if userID ~== world.nsh_dialog.user_me then {
               invited_usr := TextMenuItem()
               invited_usr.set_label(userID)
               invited_usr.connect(self, "on_invite_to_group_2",
                                   ACTION_EVENT)
               invite_usr_menu.add(invited_usr)
               }
            }
            }
         }

      p_menu.add(invite_usr_menu)
      sendto_grp_menu := TextMenuItem()
      sendto_grp_menu.set_label("Send Message to Group")
      sendto_grp_menu.connect(self, "on_sendto_group", ACTION_EVENT)
      p_menu.add(sendto_grp_menu)
      set_grp_permission_menu := Menu()
      set_grp_permission_menu.set_label("Set Group Permission")

      every p := !permissionsLst do {
         permissions_type := TextMenuItem()
         permissions_type.set_label(p)
         permissions_type.connect(self, "on_set_group_permission", ACTION_EVENT)
         set_grp_permission_menu.add(permissions_type)
         }
      p_menu.add(set_grp_permission_menu)
      grp_wall_menu := TextMenuItem()
      grp_wall_menu.set_label("Wall ...")
      grp_wall_menu.connect(self, "on_wall", ACTION_EVENT)
      p_menu.add(grp_wall_menu)
      }

      world.nsh_dialog.add(tree_pop)
      tree_pop.init()
      tree_pop.resize()
      tree_pop.popup()
   end
   #
   # Search the tree for a specific node (user)
   #
   method MySearchTree(mynode, myroot)
      local found := &null , j := 1 , userNode
      if \mynode then {
         while (j<=*myroot.subnodes) & /found do{
            userNode := trim(myroot.subnodes[j].label, " ", 0)
            if userNode == mynode then
               found := 1
            j:=j+1
            }#end while
         }
      return found
   end
   #
   # Creates the groups tree once the client log on
   # Group as root and members as nodes
   #
   method on_login_groups_creation()
      local sigName, userID, log1, groups_lbl, ustatus
      allgrplst := []
      world.nsh_dialog.groups_tree.set_root_node(&null)
      groups_lbl := Node("label=SCI Groups")
      world.nsh_dialog.groups_tree.set_root_node(groups_lbl)
      tab(many(' '))
      while not (pos(0)) do {
	 sigName := tab(upto('('))
         move(1)
         put(allgrplst, sigName)
         create_group(sigName, ,1)
         while not pos(0) & not(=")") do{
            userID := tab(find(":"))
	    move(1)
            ustatus := tab( upto( ',' ) )
            move(1)
            on_add_user_to_group(sigName, userID, ustatus)
	    }
	 world.nsh_dialog.groups_tree.tree_structure_changed()
         move(1)
         tab(many(' '))
	 }
   end
   #
   #
   #
   method on_change_user_status(ev)
      local ustatus, avat
      ustatus := trim((ev.get_source()).label, " ", 0)
      world.nsh_dialog.users_tree.set_root_node(&null)
      if \is_standalone = 1 then ustatus := "Offline"

      if \(avat := world.get_avatar()) then
         avat.set_activity_status(ustatus)

      world.nsh_dialog.all_users()
      world.nsh_dialog.users_tree.tree_structure_changed()
   end
   #
   # On invite user to join a group
   #
   method on_invite_to_group_1(ev, sigName, userID, flag)
      local r, sigNode, userNode
      /flag := 0
      /sigName := (ev.get_source()).label
      /userID := get_selected_user()

      if (\userID) & (userID ~== world.userId) then {
         session.Write("\\groupInvite " || userID||" "||
            sigName||" "||world.nsh_dialog.user_me)
         world.nsh_dialog.users_tree.tree_structure_changed()
         }
   end
   #
   # On invite user to join a group
   #
   method on_invite_to_group_2(ev, sigName, userID, flag)
      local r, sigNode, userNode
      /flag := 0
      /userID := trim((ev.get_source()).label, " ", 0)
      /sigNode := \world.nsh_dialog.groups_tree.object_get_cursor()
      if /sigNode |
         find(" ", sigNode.get_label()) then
         world.nsh_dialog.write_to_chat_win("Please, highlight the group's node.")
      else {
         /sigName := trim(sigNode.get_label(), " ", 0)

         if (\userID) & (userID ~== world.userId) then
            session.Write("\\groupInvite " || userID||" "||
              sigName||" "||world.nsh_dialog.user_me)
         }
   end
   #
   # On invite user to join a project
   #
   method on_invite_to_project(ev)
      local userNode, projName, usr, userID, loc

      /userNode := \world.nsh_dialog.users_tree.object_get_selections()[1]

      if \userNode then {
         /projName := trim((ev.get_source()).label, " ", 0)
         userID := get_selected_user()

         if (\userID) & (userID ~== world.userId) then
            session.Write("\\projectInvite " || userID||" "||
               projName||" "||world.nsh_dialog.user_me)
         }
   end
   #
   # On add friend menu item
   # called from the groups tree
   #
   method on_add_friend()
      local userNode, userID
      userNode := \(world.nsh_dialog.groups_tree.object_get_selections()[1])
      if \userNode then {
         userID := userNode.get_label()
         session.Write("\\addFriend "||userID||" "||
            world.nsh_dialog.user_me)
         }
   end
   #
   # On add friend menu item
   # called from the users tree
   #
   method on_friend_add()
      local userNode, userID
      userNode := \(world.nsh_dialog.users_tree.object_get_selections()[1])

      if \userNode then {
         userID := get_selected_user()
         session.Write("\\addFriend "||userID||" "||
            world.nsh_dialog.user_me)
         }
   end
   #
   # On add user to the block list
   #
   method on_block_user()
      local userNode, userID
      userNode := \(world.nsh_dialog.users_tree.object_get_selections()[1])
      if \userNode then {
         userID := get_selected_user()
         insert(myblocklst, userID)
         session.Write("\\blockUser "||userID||" "||
            world.nsh_dialog.user_me)
         }
   end
   #
   # On remove user from the block list
   #
   method on_unblock_user()
      local userNode, userID
      userNode := \(world.nsh_dialog.users_tree.object_get_selections()[1])
      if \userNode then {
         userID := get_selected_user()
         delete(myblocklst, userID)
         session.Write("\\unblockUser "||userID||" "||
            world.nsh_dialog.user_me)
	 }
   end
   #
   # On add friend invitation
   #
   method addFriend_invitation(args, flag)
      local index, hostuser, newfriend, sigName

      args ? {
         newfriend := tab(find(" "))
         move(1)
         hostuser := tab(0)
         }
      if flag == 1 then {
         session.Write("\\tell "||hostuser ||" "||
			newfriend||" is now your friend.\n_
		        \\addFriendAccept "||newfriend||" "||hostuser||"\n_
		        \\addFeed "||newfriend|| " and "||hostuser||
			" are now friends."||"@@"||0||"ALL:ALL\n_
		        \\writeToWall "||newfriend||
		        " and "||hostuser||" are now friends.")
         }
      else {
         session.Write("\\tell "||hostuser ||" "||newfriend||
            " has rejected your friendship request")
         }
   end

   method on_text_chat()
   end

   method on_audio_chat()
   end
   #
   # Code not finished yet !!!
   #
   method on_send_email()
      selected_node_obj := "user"
      on_sendto_user()
   end
   #
   # Sends a message to a group member
   #
   method on_sendto_user()
      local sav, d
      selected_node_obj := "user"
      sav := &window
      &window  := &null
         d := Send_To_Group()
         d.show_modal()
      &window := sav
   end
   #
   #
   #
   method get_selected_user()
      local userNode,loc, userID, usr:= world.nsh_dialog.user_me
      userNode := world.nsh_dialog.users_tree.object_get_selections()[1]
      if \userNode then {
         userID := \userNode.get_label()
         userID ? {
            usr := trim(tab(find(" ")), " ", 0)
            move(1)
            loc := tab(0)
            }
         }
      return usr
   end
   #
   # On user's profile view
   #
   method on_view_profile(ev, userID)
      local usr, curr_user
      projMenu.close_file.clear_is_shaded()
      if /userID then
         usr := get_selected_user()

      openedprofile := usr

      curr_user := world.nsh_dialog.user_me
      session.Write("\\userProfile "||usr||" "||curr_user)
      session.Write("\\userProgress "||usr||" "||curr_user)
      session.Write("\\userAvailability "||usr||" "||
         curr_user||" profile")
      world.nsh_dialog.resize()
    end
   #
   # On user's availability view
   #
   method on_view_availability(ev, userID)
      local usr, curr_user
      if /userID then
         usr := get_selected_user()

      openedprofile := usr
      curr_user := world.nsh_dialog.user_me
      session.Write("\\userAvailability "||usr||" "||
         curr_user||" user")
      world.nsh_dialog.resize()
   end
   #
   #
   #
   method on_view_availability_report(ev)
      local usr, curr_user := world.nsh_dialog.user_me

      usr := get_selected_user()
      session.Write("\\avaReport "||usr||" "||curr_user)        
   end
   #
   #
   #
   method on_view_all_availability(ev)
      session.Write("\\usersAvailability "||
         world.nsh_dialog.user_me)
   end
   #
   # On group's member profile view
   #
   method on_view_group_member_profile(ev, userID)
      local userNode, curr_user

      if /userID then {
         if \selected_node then 
            userID := selected_node
         else userID := world.nsh_dialog.user_me
         }
      openedprofile := trim(userID, " ", 0)
      curr_user := world.nsh_dialog.user_me
      session.Write("\\userProfile "||userID||" "||curr_user)
   end
   #
   # View user's activity summary
   #
   method on_view_activity(ev)
      local usr
      usr := get_selected_user()
      session.Write("\\history " ||usr)
   end

   method on_view_active_quests(ev)
      local usr
      usr := get_selected_user()
      session.Write("\\history " ||usr||" QuestActive")
   end

   method on_view_completed_quests(ev)
      local usr
      usr := get_selected_user()
      session.Write("\\history "||usr||" QuestActive")
   end
   #
   # On Set Profile Permissions (Private, Public, or FriendsOnly)
   #
   method on_set_profile_permission(ev)
      local usr, permissionType, curr_user

      usr := get_selected_user()
      curr_user := world.nsh_dialog.user_me
      permissionType := (ev.get_source()).label
      if usr ===  curr_user then
         session.Write("\\setPermissions " ||"profile"||" "||
            usr||" "||permissionType||" "||curr_user)
   end
   #
   # Invite user to start a new collaboration session
   #
   method on_invite_to_new_ide_session(ev)
      local fileName, userID, sdp_flag := 0, projName, fn

      userID := get_selected_user()
      if \userID then {
         if not find("New Session",(ev.get_source()).label) then
            fileName := (ev.get_source()).label
         else {
            fileName := world.nsh_dialog.tab_label
            if world.nsh_dialog.uide.handle_openfile(ev) then
               fileName := world.nsh_dialog.tab_label
            }
         if find("(PF)", fileName) then {
            fileName ? {
               fn := tab(find("(PF):"))
               move(5)
               projName := tab(0)
               }
            fileName := fn
            sdp_flag := 1
            }
         }

      world.nsh_dialog.on_user_invitation_btn(ev, userID,
         fileName, sdp_flag, 1)
   end
   #
   # Invite user to join an existing collaboration session
   #
   method on_invite_to_existing_ide_session(ev)
      local fileName, userID, userNode, sdp_flag := 0, fn, projName

      userID := get_selected_user()
      if \userID then {
         if \((ev.get_source()).label) then
            fileName:= (ev.get_source()).label
         else world.nsh_dialog.tab_label

         if find("(PF)", fileName) then {
            fileName ? {
               fn := tab(find("(PF):"))
               move(5)
               projName := tab(0)
               }
            fileName := fn
            sdp_flag := 1
            }
         world.nsh_dialog.on_user_invitation_btn(ev, userID,
            fileName, sdp_flag, 1)
         }
       else
          world.nsh_dialog.write_to_chat_win("Select a user to invite")
   end
   #
   # The user leaves the IDE session
   #
   method on_leave_ide_session(ev)
      world.nsh_dialog.on_exit_session_btn()
   end
   #
   # The user calls to take turn editing the shared files
   # during the collaboration session.
   #
   method on_ide_take_turn(ev)
      world.nsh_dialog.on_get_lock_btn()
   end
   #
   # View Session's Activity History
   #
   method on_ide_activit_history(ev)
      local sNode, sName

      sNode := world.nsh_dialog.ide_session_tree.object_get_cursor()
      sName := sNode.get_label()

      session.Write("\\sessionActivity "||sName||" "||
         world.nsh_dialog.user_me)
   end
   #
   # On remove user from a group
   #
   method on_remove_user(ev)
      local sigNode, sigName, removedUser

      sigNode := world.nsh_dialog.groups_tree.object_get_cursor()
      if \sigNode then {
         sigName := sigNode.get_parent_node()
         sigName := sigName.get_label()
         removedUser := trim(selected_node, " ", 0)

         session.Write("\\userRemove "||removedUser||" "||
            sigName||" "||world.nsh_dialog.user_me)
         world.nsh_dialog.groups_tree.tree_structure_changed()
         }
      else 
         world.nsh_dialog.write_to_chat_win("Please, highlight the group's node.")
   end
   #
   # Sends a message to all group members
   #
   method on_sendto_group()
      local sav, d, u, sigName, sigNode, found := &null
      selected_node_obj := "group"

      if \selected_node then {
         sigName := selected_node
         sigNode := \world.nsh_dialog.groups_tree.object_get_cursor()
         every u := trim((!sigNode.subnodes).label, " ", 0) do
            if u === world.nsh_dialog.user_me then found := 1

         if \found then {
            sav := &window
            &window  := &null
               d := Send_To_Group()
               d.show_modal()
            &window := sav
            }
         else
            session.Write("\\tell "||world.nsh_dialog.user_me||
               " You are not a member of this group.")
         }
      else 
         world.nsh_dialog.write_to_chat_win("Please, highlight the group's node.")
   end

   method on_replyto_group()
      local sav, d
      selected_node_obj := "group"
      sav := &window
      &window  := &null
         d := Send_To_Group()
         d.show_modal()
      &window := sav

   end
   #
   # On add (create) group
   #
   method on_add_group(ev)
      local oldwindow, makesigdlg

      oldwindow := &window
      &window := world.nsh_dialog.win
         makesigdlg := makeSIG()
         makesigdlg.show_modal()
      &window := oldwindow
   end
   #
   # Create a new group
   # The server sends a message to the add node to all the online users
   # group trees.
   #
   method create_group(sigName, sigOwner, flag)
      local r, sigNode

      r := world.nsh_dialog.groups_tree.get_root_node()

      sigNode:=Node("label="||sigName)
      sigNode.set_bmps([editorimgs("group"),editorimgs("group"),
                     editorimgs("group")])
      r.add(sigNode)
      if flag = 0 then {
         insert(grpSet, sigName)
         add_node_to_group_tree(sigName, sigOwner, "online_owner")
         }
      world.nsh_dialog.groups_tree.tree_structure_changed()
   end
   #
   # On view group description
   #
   method on_view_group_description(ev)
      local sigName

      if \selected_node then {
         sigName := selected_node
         session.Write("\\objDescription "||sigName||" "||
            "sig"||" "||world.nsh_dialog.user_me)
         }
      else 
         world.nsh_dialog.write_to_chat_win("Please, highlight the user's node.")
   end
   #
   # On edit group description
   #
   method on_edit_group_description(ev)
      local sav

      selected_obj := "group"

      sav := &window
      &window  := &null
         obj_desc := objDescEdit()
         obj_desc.show_modal()
      &window := sav
   end
   #
   # On remove (delete) group
   #
   method on_remove_group(ev)
      local sigNode, sigName

      if \selected_node then {
         sigName := selected_node
         session.Write("\\groupRemove "|| sigName||" "||
            world.nsh_dialog.user_me)
         world.nsh_dialog.groups_tree.tree_structure_changed()
         }
      else 
         world.nsh_dialog.write_to_chat_win("Please, highlight the group's node.")
   end

   method on_wall(ev)
      local sigNode, sigName, wall_opened := &null, ts, i
      projMenu.close_file.clear_is_shaded()

      if \selected_node then {
         sigName := selected_node
         ts :=  world.nsh_dialog.VCSC_tab
         every i := 1 to *(ts.children) do {
            if (((ts.children)[i]).label) === ("Group:"||sigName) then
               wall_opened := 1
            }
         if /wall_opened then
            session.Write("\\groupWall "|| sigName||" "||
               world.nsh_dialog.user_me||" sig")
         }
      else 
         world.nsh_dialog.write_to_chat_win("Please, highlight the group's node.")

   end
   #
   # Wall Tab Item
   #
   method wall_tabitem(objName, objType, postsTbl, number_of_posts, objInfo)
      local y_val, space, lbl_space, p, owner_lbl, wall_lbl, date_lbl,
         wall_etl, addPost_btn, pPriority_icn, pOwner, pPriority, postId,
         addReply_btn, delPost_btn, p_sizer, p_user, p_date, members_lbl

      num_of_posts := number_of_posts

      wall_tab_item := TabItem()

      if objType == "sig" then
         wall_tab_item.set_label("Group:"||objName)
      else wall_tab_item.set_label("Project:"||objName)

      wall_border := Border()
      wall_border.set_pos("2", "2")
      wall_border.set_size("100%-4", "90%-4")
      wall_border.set_internal_alignment("l")
      wall_border.set_attribs("font=serif, 12")
      wall_lbl := Label()
      wall_lbl.set_pos("35%", "5")
      wall_lbl.set_size("30%", "5%")
      wall_lbl.set_attribs("bg=pale yellow")
      wall_lbl.set_internal_alignment("c")
      if objType == "sig" then
         wall_lbl.set_label("Group's "||objName||" Wall")
      else wall_lbl.set_label("Project's "||objName||" Wall")
      wall_border.add(wall_lbl)
      wall_tab_item.add(wall_border)

      members_lbl := Label()
      members_lbl.set_pos("35%", "5%+5")
      members_lbl.set_size("30%", "5%")
      members_lbl.set_attribs("bg=pale yellow", "fg=red")
      members_lbl.set_internal_alignment("c")
      members_lbl.set_label("("||objInfo||") Online Users")
      wall_border.add(members_lbl)

      h_val := 100 /(number_of_posts + 2)
      y_val := 5
      my_space := space := 10
      lbl_space := (h_val-10) /2

      every p := key(postsTbl) do {
         p ? {
            pOwner := tab(find("~"))
            move(1)
            pPriority := tab(find("["))
            move(1)
            postId := tab(find("]"))
            }
         pPriority_icn := IconButton()
         pPriority_icn.set_pos(5, (y_val+5)||"%+"||space)
         pPriority_icn.set_size("3%", (h_val/3)||"%")
         pPriority_icn.set_draw_border()
         pPriority_icn.set_attribs("resize=on")
         pPriority_icn.clear_toggles()
         pPriority_icn.set_img(editorimgs(map("newsfeed_"||pPriority)))
         wall_border.add(pPriority_icn)

         postsTbl[p][1] ? {
            p_user := tab(find("Date/Time: "))
            move(11)
            p_date := tab(0)
            }
         owner_lbl := Label()
         owner_lbl.set_pos("5", (y_val+5+(h_val/3))||"%+"||space)
         owner_lbl.set_size("20%-5", (h_val/3)||"%")
         owner_lbl.set_attribs("bg=pale yellow")
         owner_lbl.set_internal_alignment("l")
         owner_lbl.set_label("Posted By: "||pOwner)
         wall_border.add(owner_lbl)

         date_lbl := Label()
         date_lbl.set_pos("5", (y_val+5+((h_val/3)*2))||"%+"||space)
         date_lbl.set_size("20%-5", (h_val/3)||"%")
         date_lbl.set_attribs("bg=pale yellow")
         date_lbl.set_internal_alignment("l")
         date_lbl.set_label(p_date)
         wall_border.add(date_lbl)

         wall_etl := SCETL()
         wall_etl.set_pos("20%", (y_val+5)||"%+"||space)
         wall_etl.set_size("65%-5", h_val||"%")
         wall_etl.set_draw_border()
         wall_etl.set_attribs("bg=white")
         wall_etl.connect(self, "on_wall_etl", GOT_FOCUS_EVENT)
         wall_etl.set_contents(postsTbl[p])
         wall_etl.set_wrap_mode(110)
         #wall_etl.has_focus := &null
         #wall_etl.clear_accepts_focus()
         wall_etl.mouse_locked:=1
         wall_etl.invalidate
         wall_border.add(wall_etl)

         p_sizer := Sizer()
         p_sizer.set_pos("2", (y_val+5+h_val)||"%+"||space)
         p_sizer.set_size("100%-4", "2%")
         p_sizer.set_attribs("bg=red")
         p_sizer.set_is_horizontal()
         wall_border.add(p_sizer)

         addReply_btn := TextButton()
         addReply_btn.set_pos("85%", (y_val+5)||"%+"||space)
         addReply_btn.connect(self, "on_addReply_btn", ACTION_EVENT)
         addReply_btn.clear_toggles()
         addReply_btn.set_label("Reply["||postId||"]")
         addReply_btn.set_attribs("font=serif, 10")
         addReply_btn.set_internal_alignment("c")
         wall_border.add(addReply_btn)

         delPost_btn := TextButton()
         delPost_btn.set_pos("85%", (y_val+5+(h_val/2))||"%+"||space)
         delPost_btn.connect(self, "on_delPost_btn", ACTION_EVENT)
         delPost_btn.clear_toggles()
         delPost_btn.set_label("Del["||postId||"]")
         delPost_btn.set_attribs("font=serif, 10")
         delPost_btn.set_internal_alignment("c")
         wall_border.add(delPost_btn)

         y_val +:= h_val
         space +:= 10
         }

      addPost_btn := TextButton()
      addPost_btn.set_pos("50%", "90%")
      addPost_btn.connect(self, "on_addPost_btn", ACTION_EVENT)
      addPost_btn.clear_toggles()
      addPost_btn.set_label("Add Post")
      addPost_btn.set_internal_alignment("c")
      wall_tab_item.add(addPost_btn)

      if \view.user_me then {
         session.Write("\\updateMode "||world.nsh_dialog.user_me||
            " "||"Wall")
         }

      world.nsh_dialog.VCSC_tab.add(wall_tab_item)
      wall_tab_item.init()
      world.nsh_dialog.resize()
      world.nsh_dialog.VCSC_tab.set_which_one(wall_tab_item)
      world.nsh_dialog.is_subwin_hidden()
   end

   #
   # Refresh the wall contents
   # Gets the last recently changed 5 posts
   #
   method wallRefresh(objName, objType, postsTbl, number_of_posts, objInfo)
      local y_val, space, lbl_space, p, owner_lbl, wall_lbl, date_lbl,
         wall_etl, addPost_btn, pPriority_icn, pOwner, pPriority, postId,
         addReply_btn, delPost_btn, p_sizer, p_user, p_date, members_lbl

      num_of_posts := number_of_posts

      wall_tab_item := world.nsh_dialog.uide.CurrentTabItem()

      if objType == "sig" then
         wall_tab_item.set_label("Group:"||objName)
      else wall_tab_item.set_label("Project:"||objName)

      wall_border := Border()
      wall_border.set_pos("2", "2")
      wall_border.set_size("100%-4", "90%-4")
      wall_border.set_internal_alignment("l")
      wall_border.set_attribs("font=serif, 12")
      wall_lbl := Label()
      wall_lbl.set_pos("35%", "5")
      wall_lbl.set_size("30%", "5%")
      wall_lbl.set_attribs("bg=pale yellow")
      wall_lbl.set_internal_alignment("c")
      if objType == "sig" then
         wall_lbl.set_label("Group's "||objName||" Wall")
      else wall_lbl.set_label("Project's "||objName||" Wall")
      wall_border.add(wall_lbl)
      wall_tab_item.add(wall_border)


      members_lbl := Label()
      members_lbl.set_pos("35%", "5%+5")
      members_lbl.set_size("30%", "5%")
      members_lbl.set_attribs("bg=pale yellow", "fg=red")
      members_lbl.set_internal_alignment("c")
      members_lbl.set_label("("||objInfo||") Online Users")
      wall_border.add(members_lbl)

      h_val := 100 /(number_of_posts + 2)
      y_val := 5
      my_space := space := 10
      lbl_space := (h_val-10) /2

      every p := key(postsTbl) do {
         p ? {
            pOwner := tab(find("~"))
            move(1)
            pPriority := tab(find("["))
            move(1)
            postId := tab(find("]"))
            }
         pPriority_icn := IconButton()
         pPriority_icn.set_pos(5, (y_val+5)||"%+"||space)
         pPriority_icn.set_size("3%", (h_val/3)||"%")
         pPriority_icn.set_draw_border()
         pPriority_icn.set_attribs("resize=on")
         pPriority_icn.clear_toggles()
         pPriority_icn.set_img(editorimgs(map("newsfeed_"||pPriority)))
         wall_border.add(pPriority_icn)

         postsTbl[p][1] ? {
            p_user := tab(find("Date/Time: "))
            move(11)
            p_date := tab(0)
            }
         owner_lbl := Label()
         owner_lbl.set_pos("5", (y_val+5+(h_val/3))||"%+"||space)
         owner_lbl.set_size("20%-5", (h_val/3)||"%")
         owner_lbl.set_attribs("bg=pale yellow")
         owner_lbl.set_internal_alignment("l")
         owner_lbl.set_label("Posted By: "||pOwner)
         wall_border.add(owner_lbl)

         date_lbl := Label()
         date_lbl.set_pos("5", (y_val+5+((h_val/3)*2))||"%+"||space)
         date_lbl.set_size("20%-5", (h_val/3)||"%")
         date_lbl.set_attribs("bg=pale yellow")
         date_lbl.set_internal_alignment("l")
         date_lbl.set_label(p_date)
         wall_border.add(date_lbl)

         wall_etl := SCETL()
         wall_etl.set_pos("20%", (y_val+5)||"%+"||space)
         wall_etl.set_size("65%-5", h_val||"%")
         wall_etl.set_draw_border()
         wall_etl.set_attribs("bg=white")
         wall_etl.set_wrap_mode(110)
         wall_etl.connect(self, "on_wall_etl", GOT_FOCUS_EVENT)
         wall_etl.set_contents(postsTbl[p])
         #wall_etl.has_focus := &null
         #wall_etl.clear_accepts_focus()
         wall_etl.mouse_locked:=1
         wall_etl.invalidate
         wall_border.add(wall_etl)

         p_sizer := Sizer()
         p_sizer.set_pos("2", (y_val+5+h_val)||"%+"||space)
         p_sizer.set_size("100%-4", "2%")
         p_sizer.set_attribs("bg=red")
         p_sizer.set_is_horizontal()
         wall_border.add(p_sizer)

         addReply_btn := TextButton()
         addReply_btn.set_pos("85%", (y_val+5)||"%+"||space)
         addReply_btn.connect(self, "on_addReply_btn", ACTION_EVENT)
         addReply_btn.clear_toggles()
         addReply_btn.set_label("Reply["||postId||"]")
         addReply_btn.set_attribs("font=serif, 10")
         addReply_btn.set_internal_alignment("c")
         wall_border.add(addReply_btn)

         delPost_btn := TextButton()
         delPost_btn.set_pos("85%", (y_val+5+(h_val/2))||"%+"||space)
         delPost_btn.connect(self, "on_delPost_btn", ACTION_EVENT)
         delPost_btn.clear_toggles()
         delPost_btn.set_label("Del["||postId||"]")
         delPost_btn.set_attribs("font=serif, 10")
         delPost_btn.set_internal_alignment("c")
         wall_border.add(delPost_btn)

         y_val +:= h_val
         space +:= 10
         }

      addPost_btn := TextButton()
      addPost_btn.set_pos("50%", "90%")
      addPost_btn.connect(self, "on_addPost_btn", ACTION_EVENT)
      addPost_btn.clear_toggles()
      addPost_btn.set_label("Add Post")
      addPost_btn.set_internal_alignment("c")
      wall_tab_item.add(addPost_btn)

      wall_tab_item.init()
      world.nsh_dialog.resize()
      world.nsh_dialog.VCSC_tab.set_which_one(wall_tab_item)
      world.nsh_dialog.is_subwin_hidden()
   end

   method on_wall_etl(ev)
   end

   method on_addPost_btn(ev)
      local lbl_space, owner_lbl, wall_lbl, date_lbl, wall_etl, wti, b, i,
         pPriority_icn, addReply_btn, delPost_btn, p_sizer, objType, objName,
         my_y_val := ((h_val * num_of_posts) + my_space) - 5

      addPostId := &time
      /mypPriority := "low"
      dlg_type := "post"
      obj_post_dlg := obj_postDialog()
      obj_post_dlg.show_modal()

      lbl_space := (h_val-10) /2

      my_y_val +:= (num_of_posts * 2) + 2

      pPriority_icn := IconButton()
      pPriority_icn.set_pos(5, (my_y_val+5)||"%+"||my_space)
      pPriority_icn.set_size("3%", "4%")
      pPriority_icn.set_draw_border()
      pPriority_icn.set_attribs("resize=on")
      pPriority_icn.clear_toggles()
      pPriority_icn.set_img(editorimgs(map("newsfeed_"||mypPriority)))
      wall_border.add(pPriority_icn)

      owner_lbl := Label()
      owner_lbl.set_pos("5", (my_y_val+5+(h_val/3))||"%+"||my_space)
      owner_lbl.set_size("20%-5", "5%")
      owner_lbl.set_attribs("bg=pale yellow")
      owner_lbl.set_internal_alignment("l")
      owner_lbl.set_label("Posted By: "||world.nsh_dialog.user_me)
      wall_border.add(owner_lbl)

      date_lbl := Label()
      date_lbl.set_pos("5", (my_y_val+5+((h_val/3)*2))||"%+"||my_space)
      date_lbl.set_size("20%-5", "5%")
      date_lbl.set_attribs("bg=pale yellow")
      date_lbl.set_internal_alignment("l")
      date_lbl.set_label(&date)
      wall_border.add(date_lbl)

      wall_etl := SCETL()
      wall_etl.set_pos("20%", (my_y_val+5)||"%+"||my_space)
      wall_etl.set_size("65%-5", h_val||"%")
      wall_etl.set_draw_border()
      wall_etl.set_attribs("bg=white")
      wall_etl.connect(self, "on_wall_etl", GOT_FOCUS_EVENT)
      wall_etl.set_contents(post_contents)
      #wall_etl.has_focus := &null
      #wall_etl.clear_accepts_focus()
      wall_etl.mouse_locked:=1
      wall_etl.invalidate
      wall_border.add(wall_etl)

      p_sizer := Sizer()
      p_sizer.set_pos("2", (my_y_val+5+h_val)||"%+"||my_space)
      p_sizer.set_size("100%-4", )
      p_sizer.set_attribs("bg=red")
      p_sizer.set_is_horizontal()
      wall_border.add(p_sizer)

      addReply_btn := TextButton()
      addReply_btn.set_pos("85%", (my_y_val+5)||"%+"||my_space)
      addReply_btn.connect(self, "on_addReply_btn", ACTION_EVENT)
      addReply_btn.clear_toggles()
      addReply_btn.set_label("Reply["||addPostId||"]")
      addReply_btn.set_attribs("font=serif, 10")
      addReply_btn.set_internal_alignment("c")
      wall_border.add(addReply_btn)

      delPost_btn := TextButton()
      delPost_btn.set_pos("85%", (my_y_val+5+(h_val/3))||"%+"||my_space)
      delPost_btn.connect(self, "on_delPost_btn", ACTION_EVENT)
      delPost_btn.clear_toggles()
      delPost_btn.set_label("Del["||addPostId||"]")
      delPost_btn.set_attribs("font=serif, 10")
      delPost_btn.set_internal_alignment("c")
      wall_border.add(delPost_btn)

      my_y_val +:= h_val
      num_of_posts +:= 1
      my_space +:= 10

      wti := world.nsh_dialog.uide.CurrentTabItem()

      (wti.label) ? {
         objType := tab(find(":"))
         move(1)
         objName := tab(0)
         }

      every i := 1 to *wti.children do {
          b := wti.get_children()[-1] | fail
          wti.remove(b)
          }
      if \objName then {
         if objType == "Group" then
            objType := "sig"
         else objType := "project"

         session.Write("\\refreshWall "|| objName||" "||
            world.nsh_dialog.user_me||" "||objType)
         }

      wall_tab_item.init()
      world.nsh_dialog.resize()
   end
   #
   #
   #
   method on_addReply_btn(ev)
      dlg_type := "reply"

      replybtn_lbl := (ev.get_source()).label
      obj_post_dlg := obj_postDialog()
      obj_post_dlg.show_modal()
   end

   method on_delPost_btn(ev)
      local deletebtn_lbl, objlbl, postId, p, postName, postContents,
         ct_lbl, objType, objName, i, b, wti

      deletebtn_lbl := (ev.get_source()).label
      deletebtn_lbl ? {
         objlbl := tab(find("["))
         move(1)
         postId := tab(find("]"))
         }
      every p := key (postsTbl) do {
         if find(postId, p) then {
            postName := p
            postContents := postsTbl[p]
            }
         }
      if find(world.nsh_dialog.user_me, postName) then {
         #wall_border := &null
         ct_lbl := world.nsh_dialog.uide.CurrentTabItem().label
         ct_lbl ? {
            objType := tab(find(":"))
            move(1)
            objName := tab(0)
            }
         session.Write("\\delWallPost "||
            world.nsh_dialog.user_me||" "||objType||" "||
            objName||" "||postName)
         }

      wti := world.nsh_dialog.uide.CurrentTabItem()
      every i := 1 to *wti.children do {
          b := wti.get_children()[-1] | fail
          wti.remove(b)
          }
      every p := key(postsTbl) do {
         if find(postId, p) then {
            delete(postsTbl, p)
            num_of_posts -:= 1
            }
         }
      wall_tab_item.init()
      world.nsh_dialog.resize()
      world.nsh_dialog.is_subwin_hidden()

      if \objName then {
         if objType == "Group" then
            objType := "sig"
         else objType := "project"

         session.Write("\\refreshWall "|| objName||" "||
            world.nsh_dialog.user_me||" "||objType)
         }
   end
   #
   # On join group
   #
   method on_join_group()
      local sigName, sigNode, u, found := &null

      if \selected_node then {
         sigName := selected_node
         sigNode := \world.nsh_dialog.groups_tree.object_get_cursor()
         every u := trim((!sigNode.subnodes).label, " ", 0) do
            if u === world.nsh_dialog.user_me then found := 1

         if /found then {
            session.Write("\\groupJoin "||
               world.nsh_dialog.user_me||" "||sigName)
            }
         else
            session.Write("\\tell "||world.nsh_dialog.user_me||
               " You are a member of this group.")
         }
      else 
         world.nsh_dialog.write_to_chat_win("Please, highlight the group's node.")
    end
   #
   # Invite user to join group, and add to groups tree once accepted
   # the invitation
   #
   method Invite_to_join_group(args, flag)
      local grphost, userID, sigName, sigOwner

      args ? {
         userID := tab(find(" "))    #invited user
         move(1)
         sigName := tab(find(" "))
         move(1)
         sigOwner := tab(0)
         }

      if flag == 1 then {
	 session.Write(
	    "\\say "||userID||" has joined "|| sigName||" group\n_
	     \\sciAdduser "||"sig"||" "||userID||" "||
                       sigName||" "||sigOwner || "\n_
	     \\addFeed "||world.nsh_dialog.user_me||
	            " joined group "||sigName||".@@0 Group:"||sigName || "\n_
	     \\writeToWall "||world.nsh_dialog.user_me||
	            " joined group "||sigName||".")
         }
      else {
         session.Write("\\say "||userID ||
            " has rejected to join "||sigName||" group")
         }
   end
   #
   # Sends the server once the owner accepted the user request to join
   # a group and add the user
   #
   method accept_group_join_request(args)
      local userID, sigName, sigOwner

      args ? {
         userID := tab(find(" "))
         move(1)
         sigName := tab(find(" "))
         move(1)
         sigOwner:= tab(0)
         }

      session.Write(
	 "\\sciAdduser "||"sig"||" "||userID||" "||sigName||" "||sigOwner||"\n_
	  \\addFeed "||userID ||" joined group "||sigName||"."||"@@"||0||
		  " "||"Group:"||sigName || "\n_
	  \\writeToWall "||world.nsh_dialog.user_me||
		  " joined group "||sigName||".")
   end
   #
   # On leave group
   #
   method on_leave_group()
      local sigNode, sigName, u, found := &null

      if \selected_node then {
         sigName := selected_node
         sigNode := \world.nsh_dialog.groups_tree.object_get_cursor()

         every u := trim((!sigNode.subnodes).label, " ", 0) do
            if u === world.nsh_dialog.user_me then found := 1
         if \found then {
            session.Write("\\groupLeave "||
               world.nsh_dialog.user_me||" "||sigName)
            world.nsh_dialog.groups_tree.tree_structure_changed()
            }
         else
            session.Write("\\tell "||world.nsh_dialog.user_me||
               " You are not a member of this group.")
         }
      else 
         world.nsh_dialog.write_to_chat_win("Please, highlight the group's node.")
   end
   #
   # Add the new user (node) to the group tree
   #
   method add_node_to_group_tree(sigName, userID, ustatus)
      local sigNode, userNode, r, ustat := "offline"
      r := world.nsh_dialog.groups_tree.get_root_node()
      sigNode := world.nsh_dialog.Search_Tree(sigName, r)
      userNode := Node("label= "||userID)
      if /sigNode then sigNode := r
      userNode.set_bmps([editorimgs(ustatus),editorimgs(ustatus),
                      editorimgs(ustatus)])
      sigNode.add(userNode)
      world.nsh_dialog.groups_tree.tree_structure_changed()
   end
   #
   # Delete a user (node) from the group tree
   #
   method delete_node_from_group_tree(sigName, removedUser, flag)
      local sigNode, r, r2

      r:= world.nsh_dialog.groups_tree.get_root_node()
      if flag = 1 then { #Remove the sig from the tree
         delete(grpSet, sigName)
         sigNode := world.nsh_dialog.Search_Tree(sigName, r)
         r.delete_node(sigNode)
         }
      else{ #Remove the user from the group node
         sigNode := world.nsh_dialog.Search_Tree(sigName, r)
         r2 := world.nsh_dialog.Search_Tree(removedUser, sigNode)
         sigNode.delete_node(r2)
         }
      world.nsh_dialog.groups_tree.tree_structure_changed()
   end
   #
   # On add user to a group
   #
   method on_add_user_to_group(sigName, userID, ustatus)
      local sigNode
      if /sigName then {
         sigNode := \world.nsh_dialog.groups_tree.object_get_cursor()
        if /sigNode |
            find(" ", sigNode.get_label()) then
            world.nsh_dialog.write_to_chat_win("Please, highlight the user's node.")
         else {
            sigName := \sigNode.get_label()
            add_node_to_group_tree(sigName, userID, ustatus)
	    }
         }
      else add_node_to_group_tree(sigName, userID, ustatus)
   end
   #
   # On Set Group Permissions (Private, Public, or FriendsOnly)
   #
   method on_set_group_permission(ev)
      local r, sigNode, sigName, permissionType

      if \selected_node then {
         sigName := selected_node
         permissionType := (ev.get_source()).label

         session.Write("\\setPermissions " ||"sig"||" "||
            sigName||" "||permissionType||" "||world.nsh_dialog.user_me)
         }
      else 
         world.nsh_dialog.write_to_chat_win("Please, highlight the group's node.")
   end
   #
   # Exit the popup menu
   #
   method on_exit(ev)
      self.resize()
   end
   #
   # Given a Node n, get the full file path it represents by
   # traversing up the tree structure to the root.
   #
   method get_full_path(n)
      local s
      s := ""
      repeat {
         s := n.get_label() || s
         n := n.get_parent_node() | break
         }
         return s
   end

   initially
      grpSet := set()
      obj_post_dlg := obj_postDialog()
end


class Send_To_Group : Dialog(
    cancel_btn, sendto_btn, replyto_btn, sendto_lbl, sendto_msg_box,
    sendto_usrs_lst, grpusrsList
    )
   method component_setup()
      self.setup()
   end

   method end_dialog()
   end

   method init_dialog()
      local sigNode, sigName, usrsnode, usrsname, log1, userID
      grpusrsList := ["All"]
      if selected_node_obj === "group" then {
         sigNode := world.nsh_dialog.groups_tree.object_get_cursor()
         if /sigNode |
            find(" ", sigNode.get_label()) then
            world.nsh_dialog.write_to_chat_win("Please, highlight the user's node.")
         else {
            sigName := \sigNode.get_label()
            every put(grpusrsList, trim((!sigNode.subnodes).label, " ", 0))
            self.set_attribs("size=441,180", "label=Send To Group ("||sigName||")")
            }
         }
      else if selected_node_obj === "user" then{
         usrsname := ici_groups.get_selected_user()

         put(grpusrsList, trim(usrsname, " ", 0))
         self.set_attribs("size=441,180", "label=Send To User ("||usrsname||")")
         }
      sendto_usrs_lst.set_selection_list(grpusrsList)
      if selected_node_obj === "user" then
         sendto_usrs_lst.set_selection(*grpusrsList)
      else sendto_usrs_lst.set_selection(1)
   end

   method on_cancel_btn(ev)
      dispose()
   end

   method on_sendto_btn(ev)
      local msg := ""
      local sigNode, sName, userID, sType, sigName, usrsnode, usrsname

      every msg ||:= !sendto_msg_box.get_contents() || "NEWLINE"

      if selected_node_obj === "group" then {
         sigNode := world.nsh_dialog.groups_tree.object_get_cursor()
         if /sigNode |
            find(" ", sigNode.get_label()) then
            world.nsh_dialog.write_to_chat_win("Please, highlight the user's node.")
         else {
            sigName := \sigNode.get_label()
            sName := sigName
            }
         }
      else if selected_node_obj === "user" then {
         usrsname := ici_groups.get_selected_user()
         sName := usrsname
         }
      session.Write("\\sendToGroup "||sName||" "||
         grpusrsList[sendto_usrs_lst.get_selection()]||" "||
         world.nsh_dialog.user_me||" "||selected_node_obj||" "||msg)
      dispose()
   end

   method on_replyto_btn(ev)
   end

   method create_users_tree(userID)
      local r, node

      r := world.nsh_dialog.users_tree.get_root_node()

      node:=Node("label= "||userID)
      node.set_bmps([editorimgs("group"),editorimgs("group"),editorimgs("group")])
      r.add(node)
      world.nsh_dialog.users_tree.expand()
   end

   method setup()
      self.set_attribs("size=441,180", "label=Send To:")
      sendto_usrs_lst := EditList()
      sendto_usrs_lst.set_pos("73", "8")
      sendto_usrs_lst.set_size("158", "25")
      sendto_usrs_lst.set_selection_list([])
      self.add(sendto_usrs_lst)
      sendto_lbl := Label()
      sendto_lbl.set_pos(6, 8)
      sendto_lbl.set_size(60, 26)
      sendto_lbl.set_draw_border()
      sendto_lbl.set_attribs("bg=light grey")
      sendto_lbl.set_internal_alignment("l")
      sendto_lbl.set_label("Send To:")
      self.add(sendto_lbl)
      sendto_msg_box := EditableTextList()
      sendto_msg_box.set_pos("7", "40")
      sendto_msg_box.set_size("426", "105")
      sendto_msg_box.set_draw_border()
      sendto_msg_box.set_wrap_mode(60)
      sendto_msg_box.set_attribs("bg=white")
      sendto_msg_box.set_contents([""])
      self.add(sendto_msg_box)
      sendto_btn := TextButton()
      sendto_btn.set_pos(130, 154)
      sendto_btn.set_size("50", "22")
      sendto_btn.set_align("c", "t")
      sendto_btn.connect(self, "on_sendto_btn", ACTION_EVENT)
      sendto_btn.clear_toggles()
      sendto_btn.set_label("Send")
      sendto_btn.set_internal_alignment("c")
      self.add(sendto_btn)
      replyto_btn := TextButton()
      replyto_btn.set_pos(185, 154)
      replyto_btn.set_size("50", "22")
      replyto_btn.set_align("c", "t")
      replyto_btn.connect(self, "on_replyto_btn", ACTION_EVENT)
      replyto_btn.clear_toggles()
      replyto_btn.set_label("Reply")
      replyto_btn.set_internal_alignment("c")
      replyto_btn.set_is_shaded()
      self.add(replyto_btn)
      cancel_btn := TextButton()
      cancel_btn.set_pos(240, 153)
      cancel_btn.set_size("50", "22")
      cancel_btn.set_align("c", "t")
      cancel_btn.connect(self, "on_cancel_btn", ACTION_EVENT)
      cancel_btn.clear_toggles()
      cancel_btn.set_label("Cancel")
      cancel_btn.set_internal_alignment("c")
      self.add(cancel_btn)
   end

   initially
      self.Dialog.initially()
end

class ReadEmail : Dialog(
    cancel_btn, forwardto_btn, replyto_btn, sendto_lbl, sendto_msg_box,
    sendto_usrs_lst, send_btn
    )
   method component_setup()
      self.setup()
   end

   method end_dialog()
   end

   method init_dialog()
      sendto_msg_box.set_contents(["p_args"])
      sendto_msg_box.set_contents(msg_txt)
      grpusrsList := ["All"]
      put(grpusrsList, msgfrom)
      sendto_usrs_lst.set_selection_list(grpusrsList)

        if fwdrply_action == "forward" then {
           sendto_lbl.set_label("Forward To:")
           replyto_btn.set_is_shaded()
           #forwardto_btn.set_is_unshaded()
           }
        if fwdrply_action == "reply" then {
           sendto_lbl.set_label("Reply To:")
           forwardto_btn.set_is_shaded()
           #replyto_btn.set_is_unshaded()
           }
           showEmaildlg.resize()

   end

   method on_cancel_btn(ev)
      dispose()
   end

   method on_form_msg()
      local msg_txt := [], lbl_title, lbl_sender

      put(msg_txt, "")
      put(msg_txt, "")
      put(msg_txt, "_______________________")

      every put(msg_txt, !sendto_msg_box.get_contents())
      sendto_msg_box.set_contents(msg_txt)
   end

   method on_forwardto_btn(ev)
      on_form_msg()
      showEmaildlg.set_attribs("label=Forward Message ...")
      replyto_btn.set_is_shaded()
      forwardto_btn.set_is_shaded()
   end

   method on_replyto_btn(ev)
      on_form_msg()
      showEmaildlg.set_attribs("label=Reply To Message ...")
      replyto_btn.set_is_shaded()
      forwardto_btn.set_is_shaded()
   end

   method on_send_btn()
      local msg := "", sName

      every msg ||:= !sendto_msg_box.get_contents() || "NEWLINE"
      sName := grpusrsList[sendto_usrs_lst.get_selection()]
      session.Write("\\sendToGroup "||sName||" "||
                    grpusrsList[sendto_usrs_lst.get_selection()]||
                    " "||world.nsh_dialog.user_me||" "||"user"||" "||msg)
      dispose()
   end


   method setup()
      self.set_attribs("size=441,180", "label=Read Email")
      sendto_usrs_lst := EditList()
      sendto_usrs_lst.set_pos("103", "8")
      sendto_usrs_lst.set_size("158", "25")
      #sendto_usrs_lst.connect(self, "on_sendto_usrs_lst", SELECTION_CHANGED_EVENT)
      sendto_usrs_lst.set_selection_list([])
      self.add(sendto_usrs_lst)
      sendto_lbl := Label()
      sendto_lbl.set_pos(6, 8)
      sendto_lbl.set_size(90, 26)
      sendto_lbl.set_draw_border()
      sendto_lbl.set_attribs("bg=light grey")
      sendto_lbl.set_internal_alignment("l")
      sendto_lbl.set_label("Reply/Forward To:")
      self.add(sendto_lbl)
      sendto_msg_box := EditableTextList()
      sendto_msg_box.set_pos("7", "40")
      sendto_msg_box.set_size("426", "105")
      sendto_msg_box.set_draw_border()
      sendto_msg_box.set_wrap_mode(60)
      sendto_msg_box.set_attribs("bg=white")
      sendto_msg_box.set_contents([""])
      self.add(sendto_msg_box)
      forwardto_btn := TextButton()
      forwardto_btn.set_pos(80, 154)
      forwardto_btn.set_size("50", "22")
      forwardto_btn.set_align("c", "t")
      forwardto_btn.connect(self, "on_forwardto_btn", ACTION_EVENT)
      forwardto_btn.clear_toggles()
      forwardto_btn.set_label("Forward")
      forwardto_btn.set_internal_alignment("c")
      self.add(forwardto_btn)
      replyto_btn := TextButton()
      replyto_btn.set_pos(135, 154)
      replyto_btn.set_size("50", "22")
      replyto_btn.set_align("c", "t")
      replyto_btn.connect(self, "on_replyto_btn", ACTION_EVENT)
      replyto_btn.clear_toggles()
      replyto_btn.set_label("Reply")
      replyto_btn.set_internal_alignment("c")
      self.add(replyto_btn)

      send_btn := TextButton()
      send_btn.set_pos(190, 154)
      send_btn.set_size("50", "22")
      send_btn.set_align("c", "t")
      send_btn.connect(self, "on_send_btn", ACTION_EVENT)
      send_btn.clear_toggles()
      send_btn.set_label("Send")
      send_btn.set_internal_alignment("c")
      self.add(send_btn)

      cancel_btn := TextButton()
      cancel_btn.set_pos(245, 153)
      cancel_btn.set_size("50", "22")
      cancel_btn.set_align("c", "t")
      cancel_btn.connect(self, "on_cancel_btn", ACTION_EVENT)
      cancel_btn.clear_toggles()
      cancel_btn.set_label("Cancel")
      cancel_btn.set_internal_alignment("c")
      self.add(cancel_btn)
   end

   initially
      self.Dialog.initially()
end

class makeSIG : Dialog(friends_chkbox, public_chkbox, desc_lbl,
   desc_border, private_chkbox, sigName_txt, permission, desc_etl)

   method component_setup()
      self.setup()
   end

   method end_dialog()
   end

   method init_dialog()
      permission := "Public"
   end

   method on_private_chkbox(ev)
      permission := "Private"
   end

   method on_public_chkbox(ev)
      permission := "Public"
   end

   method on_friends_chkbox(ev)
      permission := "Friends"
   end

   method on_cancel_btn(ev)
      self.dispose()
   end

   method on_make_btn(ev)
      local sigName, sigOwner, found := 0,
         dcontents := "", g, desc_contents, sav

      sigName := trim(sigName_txt.get_contents(), ' ', 0)
      sigOwner := world.nsh_dialog.user_me

      if find(" "|"-"|"~"|"_", sigName) then {
         sav := &window
         &window  := &null
            Notice("Check the group name.",
               "It must have no space or",
               "special characters.")
          &window := sav
         }
      else {
         if \allgrplst then {
            every g := !allgrplst do
               if g == sigName then
                  found := 1
            }

         desc_contents := desc_etl.get_contents()

         every dcontents ||:= !desc_contents || "$$"

         if found = 0 then {
            session.Write("\\makesig "||sigName||" "||sigOwner||
               " "||permission||" "||dcontents)
            }
         else
            session.Write("\\say "||sigName||
               " is already there, try another name")
         self.dispose()
         }
   end

   method setup()
      local cancel_btn, check_box_group_3, main_border, make_btn, permissions,
         sigName_lbl, sigName_lbl2, title_lbl

      self.set_attribs("size=294,335", "font=serif,bold,13", "label=New Group",
         "bg=light gray")
      title_lbl := Label()
      title_lbl.set_pos("10", "5")
      title_lbl.set_size("200", "18")
      title_lbl.set_internal_alignment("l")
      title_lbl.set_label("Special Interest Group(SIG)")
      self.add(title_lbl)
      sigName_lbl := Label()
      sigName_lbl.set_pos("10", "28")
      sigName_lbl.set_size("82", "20")
      sigName_lbl.set_internal_alignment("l")
      sigName_lbl.set_label("SIG name: ")
      self.add(sigName_lbl)
      sigName_lbl2 := Label()
      sigName_lbl2.set_pos("70", "48")
      sigName_lbl2.set_size("220", "25")
      sigName_lbl2.set_attribs("font=serif,bold,13", "fg=red")
      sigName_lbl2.set_internal_alignment("l")
      sigName_lbl2.set_label("(Use letters. No spaces or special characters.)")
      self.add(sigName_lbl2)

      sigName_txt := TextField()
      sigName_txt.set_pos("80", "28")
      sigName_txt.set_size("150", "25")
      sigName_txt.set_attribs("bg=white")
      sigName_txt.set_draw_border()
      sigName_txt.set_contents("")
      self.add(sigName_txt)

      desc_lbl := Label()
      desc_lbl.set_pos("10", "62")
      desc_lbl.set_size("200", "18")
      desc_lbl.set_internal_alignment("l")
      desc_lbl.set_label("Description:")
      self.add(desc_lbl)

      desc_border := Border()
      desc_border.set_pos("5", "85")
      desc_border.set_size(285, 100)
      desc_border.set_internal_alignment("l")
      desc_etl := EditableTextList()
      desc_etl.set_pos("2", "2")
      desc_etl.set_size("100%-4", "100%-4")
      desc_etl.set_attribs("bg=white")
      desc_etl.set_wrap_mode(37)
      desc_etl.set_contents([""])
      desc_border.add(desc_etl)
      self.add(desc_border)

      main_border := Border()
      main_border.set_pos("5", "188")
      main_border.set_size(285, 114)
      main_border.set_internal_alignment("l")
      permissions := Label()
      permissions.set_pos("10", "10")
      permissions.set_size("90", "20")
      permissions.set_internal_alignment("l")
      permissions.set_label("Permissions:")
      main_border.add(permissions)
      check_box_group_3 := CheckBoxGroup()
      private_chkbox := CheckBox()
      private_chkbox.set_pos("10", "33")
      private_chkbox.set_size("250", "20")
      private_chkbox.connect(self, "on_private_chkbox", ACTION_EVENT)
      private_chkbox.set_toggles()
      check_box_group_3.add(private_chkbox)
      check_box_group_3.set_which_one(private_chkbox)
      private_chkbox.set_label("Private (Groups Members Only)")
      main_border.add(private_chkbox)
      public_chkbox := CheckBox()
      public_chkbox.set_pos("10", "58")
      public_chkbox.set_size("250", "20")
      public_chkbox.connect(self, "on_public_chkbox", ACTION_EVENT)
      public_chkbox.set_toggles()
      check_box_group_3.add(public_chkbox)
      public_chkbox.set_label("Public (Community)")
      main_border.add(public_chkbox)
      friends_chkbox := CheckBox()
      friends_chkbox.set_pos("10", "84")
      friends_chkbox.set_size("250", "20")
      friends_chkbox.connect(self, "on_friends_chkbox", ACTION_EVENT)
      friends_chkbox.set_toggles()
      check_box_group_3.add(friends_chkbox)
      friends_chkbox.set_label("Friends' Circle (SIG Members Friends)")
      main_border.add(friends_chkbox)
      self.add(main_border)
      make_btn := TextButton()
      make_btn.set_pos("60", "307")
      make_btn.set_size("65", "28")
      make_btn.connect(self, "on_make_btn", ACTION_EVENT)
      make_btn.clear_toggles()
      make_btn.set_label("Make")
      make_btn.set_internal_alignment("c")
      self.add(make_btn)
      cancel_btn := TextButton()
      cancel_btn.set_pos("135", "307")
      cancel_btn.set_size("65", "28")
      cancel_btn.connect(self, "on_cancel_btn", ACTION_EVENT)
      cancel_btn.clear_toggles()
      cancel_btn.set_label("Cancel")
      cancel_btn.set_internal_alignment("c")
      self.add(cancel_btn)
   end

   initially()
      self.Dialog.initially()
end


class obj_postDialog : Dialog(
    contents_lbl, post_etl, border_1, border_2, cancel_btn,
    ok_btn, priority_lbl, priority_lst, priorityList
    )
   method component_setup()
      self.setup()
   end

   method end_dialog()
   end

   method init_dialog()
      priorityList := ["low", "medium", "high"]
      post_etl.set_contents([""])
      if dlg_type === "post" then
         contents_lbl.set_label("Post Contents:")
      else {
         contents_lbl.set_label("Reply Contents:")
         priority_lst.set_is_shaded()
         }
   end

   method on_priority_lst(ev)
      local post_priority

      post_priority := priorityList[priority_lst.get_selection()]
   end

   method on_cancel_btn(ev)
      self.dispose()
   end

   method on_ok_btn(ev)
      local post_priority, rcontents := "", pcontents := "", r, postnode,
         post_lbl, reply_lbl, ct_lbl, objType, objName, objlbl, postId, p,
         postName, postContents, wti, i, b

      ct_lbl := world.nsh_dialog.uide.CurrentTabItem().label
      ct_lbl ? {
         objType := tab(find(":"))
         move(1)
         objName := tab(0)
         }

      post_priority := priorityList[priority_lst.get_selection()]
      /post_priority := "low"
      if dlg_type === "post" then {
         /post_contents := ""
         post_contents := post_etl.get_contents()

         every pcontents ||:= !post_contents || "$$"

         mypPriority := post_priority

        session.Write("\\addWallPost "||
           world.nsh_dialog.user_me||" "||objType||" "||objName||" "||
           addPostId||" "||post_priority||" "||pcontents)
         post_etl.set_contents([""])
         }
      else if dlg_type === "reply" then {
         /rcontents := ""
         reply_contents := post_etl.get_contents()

         every rcontents ||:= !reply_contents || "$$"

         replybtn_lbl ? {
            objlbl := tab(find("["))
            move(1)
            postId := tab(find("]"))
            }
         every p := key (postsTbl) do {
            if find(postId, p) then {
               postName := p
               postContents := postsTbl[p]
               }
            }

         session.Write("\\replyWallPost "||
            world.nsh_dialog.user_me||" "||objType||" "||objName||
            " "||postName||" "||rcontents)
         post_etl.set_contents([""])
         world.nsh_dialog.write_to_chat_win("Reply is sent to the server...")

      wti := world.nsh_dialog.uide.CurrentTabItem()

      every i := 1 to *wti.children do {
          b := wti.get_children()[-1] | fail
          wti.remove(b)
          }
      if \objName then {
         if objType == "Group" then
            objType := "sig"
         else objType := "project"

         session.Write("\\refreshWall "|| objName||" "||
            world.nsh_dialog.user_me||" "||objType)
         }
         }
      self.dispose()
   end

   method setup()
      self.set_attribs("size=500,199")
      border_1 := Border()
      border_1.set_pos("80%-5", "1")
      border_1.set_size("20%+5", "80%")
      border_1.set_internal_alignment("l")
      priority_lbl := Label()
      priority_lbl.set_pos("4", "4")
      priority_lbl.set_size("85%", "10%")
      priority_lbl.set_internal_alignment("l")
      priority_lbl.set_label("Priority")
      border_1.add(priority_lbl)
      priority_lst := List()
      priority_lst.set_pos("4", "10%+5")
      priority_lst.set_size("85%", "15%")
      priority_lst.connect(self, "on_priority_lst", SELECTION_CHANGED_EVENT)
      priority_lst.set_selection_list(["low", "medium", "high"])
      border_1.add(priority_lst)
      self.add(border_1)
      border_2 := Border()
      border_2.set_pos("1", "1")
      border_2.set_size("80%-6", "80%")
      border_2.set_internal_alignment("l")
      post_etl := EditableTextList()
      post_etl.set_pos("4", "10%+4")
      post_etl.set_size("100%-8", "90%-8")
      post_etl.set_draw_border()
      post_etl.set_wrap_mode(70)
      post_etl.set_contents([""])
      border_2.add(post_etl)
      contents_lbl := Label()
      contents_lbl.set_pos("4", "4")
      contents_lbl.set_size("50%", "10%")
      contents_lbl.set_internal_alignment("l")
      contents_lbl.set_label("Post Contents:")
      border_2.add(contents_lbl)
      self.add(border_2)
      cancel_btn := TextButton()
      cancel_btn.set_pos("55%", "85%")
      cancel_btn.set_size("15%", "10%")
      cancel_btn.connect(self, "on_cancel_btn", ACTION_EVENT)
      cancel_btn.clear_toggles()
      cancel_btn.set_label("Cancel")
      cancel_btn.set_internal_alignment("c")
      self.add(cancel_btn)
      ok_btn := TextButton()
      ok_btn.set_pos("35%", "85%")
      ok_btn.set_size("15%", "10%")
      ok_btn.connect(self, "on_ok_btn", ACTION_EVENT)
      ok_btn.clear_toggles()
      ok_btn.set_label("OK")
      ok_btn.set_internal_alignment("c")
      self.add(ok_btn)
   end

   initially
      self.Dialog.initially()
end

class objDescEdit : Dialog(descr_lbl, descr_msgbox, cancel_btn, ok_btn)
   method component_setup()
      self.setup()
   end

   method end_dialog()
   end

   method init_dialog()
      local objNode, objType, objName

      if selected_obj == "group" then {
         if \selected_node then objName := selected_node
         objType := "sig"
         }
      else {
         if \selected_node then objName := selected_node
         objType := "project"
         }
         
      if \selected_node then {
         objName := selected_node
         session.Write("\\getDescription "||objName||" "||
            objType||" "||world.nsh_dialog.user_me)
         }
   end

   method set_descr_contents(lst)
      descr_msgbox.set_contents(lst)
   end

   method on_cancel_btn(ev)
      dispose()
   end

   method on_ok_btn(ev)
      local msg := ""
      local objNode, objName, objType

      every msg ||:= !descr_msgbox.get_contents() || "NEWLINE"

      if selected_obj == "group" then {
         if \selected_node then objName := selected_node
         objType := "sig"
         }
      else {
         if \selected_node then objName := selected_node
         objType := "project"
         }
      
      if \objNode then {
         objName := objNode.get_label()
         session.Write("\\setDescription "||objName||" "||objType||" "||
            world.nsh_dialog.user_me||" "||msg)
         }
      dispose()
   end

   method setup()
      self.set_attribs("size=441,180", "label=Description")
      descr_lbl := Label()
      descr_lbl.set_pos(6, 8)
      descr_lbl.set_size(190, 26)
      descr_lbl.set_draw_border()
      descr_lbl.set_attribs("bg=light grey")
      descr_lbl.set_internal_alignment("l")
      descr_lbl.set_label("Enter Group's/Project's Description:")
      self.add(descr_lbl)
      descr_msgbox := EditableTextList()
      descr_msgbox.set_pos("7", "40")
      descr_msgbox.set_size("426", "105")
      descr_msgbox.set_draw_border()
      descr_msgbox.set_wrap_mode(70)
      descr_msgbox.set_attribs("bg=white")
      descr_msgbox.set_contents([""])
      self.add(descr_msgbox)
      ok_btn := TextButton()
      ok_btn.set_pos(130, 154)
      ok_btn.set_size("50", "22")
      ok_btn.set_align("c", "t")
      ok_btn.connect(self, "on_ok_btn", ACTION_EVENT)
      ok_btn.clear_toggles()
      ok_btn.set_label("Ok")
      ok_btn.set_internal_alignment("c")
      self.add(ok_btn)
      cancel_btn := TextButton()
      cancel_btn.set_pos(240, 153)
      cancel_btn.set_size("50", "22")
      cancel_btn.set_align("c", "t")
      cancel_btn.connect(self, "on_cancel_btn", ACTION_EVENT)
      cancel_btn.clear_toggles()
      cancel_btn.set_label("Cancel")
      cancel_btn.set_internal_alignment("c")
      self.add(cancel_btn)
   end

   initially
      self.Dialog.initially()
end


