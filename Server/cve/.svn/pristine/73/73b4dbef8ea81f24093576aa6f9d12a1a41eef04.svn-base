<title>GDB commands quest</title>

<dl>
<dt> Name
<dd> GDB-Commands
<dt> Summary
<dd> Learn the basics of GDB on Linux.
<dt> Requires
<dd> <A href="http://www2.cs.uidaho.edu/%7Ezsharif/npc/gdb/debugging.html">debugging</A>.
<dt> Steps
<dd>
<ol>
<li> Read about GDB and GDB commands.
<li> Pass a quiz on GDB commands.
</ol>
<dt> Rewards
<dd> GDB: 2; Linux: 1
<dt> Reading
<dd> GDB console provides an interface between you and the GDB session. 
     You can repeat any GDB command by pressing just ENTER. You can also use 
     the UP/DOWN keys to get GDB to find you a command from the list of the 
     current session command history.
     <p>
     GDB commands can be formed in a single line of input. A command usually 
     starts with a command name, then followed by zero or more arguments. 
     Arguments are based on the command itself, each command has different set 
     of possible arguments. A blank line as input to GDB means to repeat the 
     previous command.
     <p>
     You can always ask GDB itself for information on its commands, using the
     command help; it prints a list of all possible commands in the current 
     debugging situation, the list includes a brief description of each command.
     Furthermore, "help command" prints you a complete description of the command
     "command" and its possible arguments.
     <p>
     When GDB starts, your program is not actually running. It won't run until 
     you tell GDB how to run it. Whenever the prompt "(gdb)" appears, you can 
     use the command "run" to start your program execution. The "break" command 
     creates a breakpoint; the program will halt when it gets there. You can 
     place breakpoints on line numbers and function names. i.e. "break main" 
     stops at the beginning of execution. When you run your program and it hits 
     a breakpoint, you'll get a message and (gdb) prompt, so you can make use of
     any other command. You can use the command "delete" to removes breakpoint. 
     The command "info break" gives info about each breakpoint.
     For example, at a break point, you may use the "step" command to executes 
     the current line of the program and stops on the next statement to be executed. 
     The "next" command is like step, however, if the current line of the program 
     contains a function call, it executes the function and stops at the next line. 
     The command "cont" continues the regular execution of the program until a 
     breakpoint is hit or the program stops. The "where" command produces a backtrace; 
     a chain of function calls that brought the program to its current place. The 
     command "backtrace" is equivalent. The "print" command prints the value of an 
     expression (a variable) in the current frame in the program. The "quit" command
     always help you exit GDB.
     
<dt> Quiz (10/11)
<dd>
<dl>
<dt> What kind of interface does GDB provide?
<dd> console
<dt> What is the GDB prompt?
<dd> (gdb)
<dt> Is there a command to run your program? (Multiple Choice)
<dd> Yes (TRUE)
<dd> No
<dt> How can you stop the execution of your program at a particular point?
<dd> using the break command
<dt> Where can a breakpoint be placed?
<dd> line number or function name
<dt> Do you think that you can have more than one breakpoint in your execution? (Multiple Choice)
<dd> Yes (TRUE)
<dd> No
<dt> What command is used to watch a variable x?
<dd> (gdb)watch x
<dt> How can you execute one line from a breakpoint?
<dd> (gdb) step
<dt> How can execute 5 lines from a breakpoint?
<dd> (gdb) step 5
<dt> How can you check the value of a variable x in the execution?
<dd> (gdb) print x
<dt> What command is used trace back the execution stack?
<dd> (gdb) where 
</dl>
</dl>
