# SH-world.icn - the CVE "world" singleton
$include "../common/defaults.icn"

link printf
link selection3D

#
# This is a singleton class (for now) and it is used everywhere.
# By mandate of Dr. J you are to accept that it is Good to make
# singletons that are used everywhere into globals.  Passing it
# as a parameter into everything is not going to "fix" the fundamental
# design flaw of being an example of the "Blob class" antipattern.
# If/when we get to where there are multiple worlds used in a single
# client session, I will recant.
#
global world, cltSceneGraph, TexSmall, select3D, FPS, FPS_refresh

class World(
   Rooms, RoomsTable, curr_room, cam, TAvatars, UpdateObjectSet, UpdateFuncSet,
   framefactor,
   avat_step_move, avat_step_rotate,
   cam_step_move, cam_step_rotate,
   g_priority,
   collide,
   texture_path,
   avatar_path,
   texture_dir,
   current_texture,
   d_floor_tex ,
   d_wall_tex,
   d_ceil_tex,
   userId,
   user_inventory,
   DoorsTable,
   password,
   nsh_dialog,
   chat,
   refresh_flag,
   moodle,
   ip,
   all_registered_users, #all registered friends
   all_friends_location, #all friends locations
   all_npc_users,
   all_npc_location,
   all_other_users,      #Other registered users (both online and offline)
   all_others_location,  #Others locations
   userId_backup,
   password_backup
   )

   # convenience method; globally one can write world.write_chat(s)
   method write_chat(ss[])
   local s
      s := ""
      every s ||:= !ss
      (\ chat).write_to_chat_win(s)
   end

   method NeedsRefresh()
      # Nov 22, 2010, This function will no longer control how often/when 
      # the screen needs to be refreshed. update() will take that role for now.
      fail
      #refresh_flag := 1
   end

   method update()
      local object, func
      every object := !UpdateObjectSet do
         object.update()

      every func := !UpdateFuncSet do
         func()

     refresh_flag := 1
     world.Refresh()
   end
   
   method remove_from_update( x )
      if member(UpdateFuncSet, x ) then{
         delete(UpdateFuncSet, x)
         return
         }
      if member(UpdateObjectSet, x ) then
         delete(UpdateObjectSet, x)
   end

   method add_for_update(x)
      if type(x)=="procedure" then
	insert(UpdateFuncSet, x )
      else
	insert(UpdateObjectSet, x )
   end

   method Refresh()
   local w, t2, vt_lbl
   static real_Refresh, t, fr
   initial{
      real_Refresh := proc("Refresh",0)
      t:=gui::dispatcher.curr_time_of_day()
      fr:=0
      }
      if /refresh_flag then fail
      
      vt_lbl := (view.VCSC_tab.get_which_one()).label
      if vt_lbl ~=== MODEL_NAME then{
	fr := 0
	t:=gui::dispatcher.curr_time_of_day()
	fail
	}
	#write("FPS=====----", FPS)
      fr+:=1
      if \FPS_refresh then{
         t2 := gui::dispatcher.curr_time_of_day()

         FPS := integer( real(fr)/(t2-t+1) * 1000.0) | 1  # write( "WHAT!!!") # +1 to avoid div by 0
	 #write("FPS=====", FPS)
         fr:=0
         t:=t2
	 FPS_refresh := &null
         }
          
       every w := !gui::dispatcher.subwins do{
	 if WAttrib(w,"canvas") ~== "hidden" then{
	    if mynsh.subwin.cwin===w & \(world.cam.need_Eye_refresh) then
	       world.cam.Eye_refresh()
	    else
	       real_Refresh(w)
	    
	    refresh_flag := &null
	    }
	 }

   end

   method setAuth(cauth)
      local cusr, cpw
      \cauth | fail
      cauth ? {
        if cusr := tab(find("~:~")) then{
           move(3)
           cpw := tab(0)
           }
        userId:= userId_backup := decypher(cusr)
        password := password_backup := decypher(cpw)
        }
   end

   # parse cmd line and set parms here
   method process_cmd_line( args )
      local i := 1, cauth

      if cauth := getenv("CVEAUTH", cauth) then{
         setAuth(cauth)
         setenv("CVEAUTH", "")
      }

      while i < *args do {
         case args[i] of {
            "-port": {
	       session.port := integer(args[i+1]);i+:= 1
	       FIRST_PORT := session.port + 10
	       }
            "-server":  {
               session.server := args[i+1]
               i+:= 1
               if i := find(":", session.server) then {
                  session.port := session.server[i+1:0]
		  FIRST_PORT := session.port + 10
                  session.server[i:0] := ""
               }
            }
            "-user": { userId:= userId_backup := args[i+1]; i +:= 1 }
            "-password": { password := password_backup := args[i+1]; i +:= 1 }
            "-texsmall": { TexSmall := 1 }
            "-cauth"   : {
                      setAuth(args[i+1])
                      i +:= 1 
                      }
         }
         i +:= 1
      }
   end

   method set_curr_room(room)
      curr_room := room
      set_label()
   end

   method set_label()
      local s
      s := (\curr_room).name|""
      nsh_dialog.set_label(s)
   end

   method createLinkName(door)
      return ("edge"||door.id)
   end

   # send All the Doors' names to the server?
   # the server presumably already knows this.
   method sendDoorTableToServer(doorTable)
      local doorName := "",strDoorTable := "", message := ""
      every doorName := key(doorTable) do
	 strDoorTable ||:= doorName || "|"
      message := "\\doorTable"|| " " || strDoorTable[1:*strDoorTable]
      #write("DEBUG:doorTable::message: ",message)
      session.Write(message)
   end

   # create avatar in local mode -
   #  broadcast/replication on other logged terminals is done later at login
   #  it seems this should be in avatar class, but we don't have an avatar
   #   object to call it with until its been created here... called from
   #   chat_window.handle_keyboard_input() in response to \avatar cmd
   #
   method avatar_create( avatArgs, isFirst ) # aky
      local avat, msg, init_x, init_y, init_z, init_angle, uid, r, avtfil,shape
      uid := avatArgs[1]

      if (not (session.isUp())) & ( *TAvatars > 0 ) then {
	 msg := "Your avatar already exists. You can have only 1 avatar."
	 chat.write_to_chat_win( msg )
	 return
         }

      if \TAvatars[ uid ] & (isFirst = 1) then {
	 chat.write_to_chat_win( " Avatar already exists." )
	 return
         }

      avtfil := avatar_path || uid || PS || uid || ".avt"

      if not stat( avtfil ) then {
	 msg := " no " || avtfil || " file exists. Use amaker to create."
	 chat.write_to_chat_win( msg )
	 return
         }

      # user's avatar will have the same uid in both local and network mode
      #  and that uid must have a file "uid.avt" in the users subdir
      #
      #This code for the isFirst call may be removed later.. but
      # is kept for the moment for customization if necessary
      if isFirst = 1 then {
	 init_x := cam.x # + 3 * cam.lx #avatArgs[2]
	 init_y := cam.y - 1.5 #avatArgs[3]
	 init_z := cam.z # + 3 * cam.lz#avatArgs[4]
	 init_angle := 0.0
         }

      # Unnecessary code to handle bad database data
      else if avatArgs[2] = 0.0 & avatArgs[3] = 0.0 & avatArgs[4] = 0.0 then {
	 init_x := cam.x + 3 * cam.lx #avatArgs[2]
	 init_y := cam.y #avatArgs[3]
	 init_z := cam.z + 3 * cam.lz#avatArgs[4]
	 init_angle := avatArgs[5]
         }
      else {
	 init_x := avatArgs[2]
	 init_y := avatArgs[3]
	 init_z := avatArgs[4]
	 init_angle := avatArgs[5]
         }

      if not setPos(init_x, init_y + 1.5, init_z) then {
     	 write("couldn't set position")
         }

      shape := parser( world.avatar_path || uid || ".avt")
      
      # default is human 
      case shape of {
	 "dog": {
	    avat := dog(uid, cam.x,init_y,cam.z,init_angle,self)
	    }
	"penguin": {
	    avat := penguinj(uid, cam.x, init_y, cam.z, init_angle, self)
	    }
        "human": {
	    avat := avatron(uid, cam.x, init_y, cam.z, init_angle,self)
	    }
	 }

      avat.initialize( )
      TAvatars[avat.uid] := avat

      # connect users avatar to camera, but not foreign avatars
      # this should only happen at first creation
      cam.avatar     :=   TAvatars[avat.uid]
      cam.reset()

   end


   method parser(file_name)
      local line, file, i, nm, val, shape
      if not (file := datopen(file_name)) then {
	return "human"
	# should request the missing avt file.
	stop("Worldparser: can't open ", file_name)
	}
      while line := trim(read(file)) do {
         if line[1]~=="#" then {
            if not (i := find("=", line) + 1) then {
	       write("avt file format error in ", image(line))
	       break
	       }
	    nm := map(line[1:i-1])
	    if *(val := line[i:0]) = 0 then break
	    if nm =="shape" then shape := val
	       
            }
         }
      close(file)
      if /shape then{ shape:="human" }
      return shape
   end

   # create avatar on other logged users
   #  this should be built into server - users should have persistent
   #   avatar on server
   #  sends server msg which is broadcast to others and creates
   #   remote instances of avatar
   method avatar_create_remote(argList)
      local msg, avat

      avat := TAvatars[session.uid]

      # initially(uid_in ,  x_in, y_in, z_in , world)
      #  world must refer to user on other end's world -
      #     it is added at that point

      avat.actions(1, .001)

      msg := "\\avatar " || avat.uid || " " || argList[2] || " " ||
	  argList[3] || " " || argList[4] || " " || argList[5]
     session.Write(msg)

      WSync()
   end

   #
   #   called in response to \delavatar
   #          from chat_window.handle_keyboard_input() in local mode
   #          it deletes users own avatar
   #   called in response to \delavatar from network
   #          it deletes other users avatars
   method avatar_delete( uid )
      local msg

      if uid == "" then {
	 msg := "You must specify the uid to delete. \\delavatar <uid>  "
	 chat.write_to_chat_win( msg )
	 return
         }

      if session.isUp() then {
	 if uid == session.uid then {
	    msg := "Cannot delete own avatar while logged in."
	    chat.write_to_chat_win( msg )
	    return
	    }
         }

      if \TAvatars[ uid ] then { TAvatars[ uid ].derender() }
      TAvatars[ uid ] := &null
      delete(TAvatars, uid )
   end

   method get_avatar(uid)  # called from chat network_input move & other places
      local avat
      /uid := userId
      avat := TAvatars[ uid ]
      if \avat then
	 return avat
      else
	 fail
   end

   method set_window(win)
      if \win then
	 &window := win
      else
	 fail
   end

   method get_window()
      return &window
   end
   
   method render()

      every (!Rooms).render(self)
      every (!TAvatars).render()

      cam.move(0.00, 0.00)
      cam.eye()
   end

   # search texture_path for texture tex - follows usual path
   #  semantics and returns tex from first directory in the path
   #  which contains it.
   #  maybe should allow tex to include its own path for force
   #   only one directory to be searched
   method find_texture(tex)

      local path, fname, s
      if \tex then {
	 every path := !texture_path do {
	    fname := path || tex
	    s := stat( fname ) |  next
	    return fname
	    }
            if s := stat (tex) then return tex
         }
      writes( "texture ", tex, " not found on texture_path\n   ")
      every writes(!texture_path, " ")
      write()
   end

   method close_cve( msg )

      # do any cleanup here

      if session.isUp() then {
	 # see notes on handle_keyboard_input() usercmd == "logout"
	 session.Write("\\logout")
	 delay(500)
	 WSync()
	 session.disconnect()
	 }

      nsh_dialog.dispose()
      exit( 0 )
   end

   #
   # This is in World, since it handles events from all windows.
   # Open up our GUI, open a net connection if possible, then
   # render and accept input.
   #
   method event_loop()
      local L, x, s, r, LupdatedNodes := [], LupdatedAvatars := []

      #
      # This will setup the loop for accepting network output. So it can take
      # additional commands from the server immediately at the time of login.
      #
      gui::dispatcher := N3Dispatcher()
      chat := nsh_dialog := NSHDialog()
      /cam := Camera()

      #
      # if we have an avatar, server, and password, go ahead
      # and issue a login
      if \session.server & \session.port & \password &
	 session.connect_server(userId, password) then {
	 setMoodle(userId, password)
	 }
      else {
	 # we are not connecting, initiate standalone mode
         cam.x := AVATAR_ORIGIN_X
         cam.z := AVATAR_ORIGIN_Z
         cam.angle := AVATAR_ANGLE
	 change_world_model(DAT)
         userId := "guest"
	 avatar_create( ["guest", 0.0, 0.0, 0.0, 4.6], 1)
      }
      
      #
      # This is the right place to initialize graphics .... after getting
      # dynamic data from the server
      #

      # close the splash screen
      close(&window)
      &window := &null

      #
      # Dynamic data received, populated and rendered. Now show the 3D graphics
      #
      nsh_dialog.show_modal()
      set_window(nsh_dialog.subwin.cwin.parent) # set back to 2D window
   end # method event_loop

   #
   # set the (user's) coordinates
   #
   method setPos(init_x, init_y, init_z)
      local new_room, r, avat,dx,dy,dz
      new_room := []

      if *Rooms = 0 then fail

      #
      # set the curr_room to the one in which the avatar is.
      #
      every r := !Rooms do {
	 if r.isinside(init_x, init_z, init_y) then {
	    put(new_room, r)
	    }
         }

      if (*new_room = 0) & *Rooms > 0 then {
	 write("failed to find a room containing ", init_x, ",", init_z)
	 fail
         }
      else if *new_room > 1 then {
	 write("system error, ", *new_room," rooms contain ",
	       init_x,",",init_z, " at y ", image(init_y))
	 every r := !new_room do write("\t", r.name)
	 fail
         }
      else {
	 world.curr_room := new_room[1]
         }

      if /cam then fail

      dx := ((\ (cam.x) - \ (cam.lookx)) | 7)
      dy := ((\ (cam.y) - \ (cam.looky)) | 0)
      dz := ((\ (cam.z) - \ (cam.lookz)) | 3)

      cam.x     := init_x
      cam.y     := init_y
      cam.z     := init_z
      cam.lookx := init_x - dx # current look x position and so on
      cam.looky := init_y - dy
      cam.lookz := init_z - dz

      if avat := \ (TAvatars[userId]) & cam.view_mode > 1 then {
	 avat.X := cam.x
	 avat.Y := cam.y - 1.5
	 avat.Z := cam.z
         }
      return
   end

   # Intialize the Client Scene graph here....
   method initSceneGraph()
      cltSceneGraph := ClientSceneGraph(0)
   end
 
   method setMoodle(uid,pwd)
      moodle := Moodle(uid,pwd)
   end
   
   method change_world_model(new_dat)
      if \new_dat then DAT := new_dat
      USER_LOCALPATH := DAT ||PS|| "users"
      
      if find("nmsu",DAT) then{
	 AVATAR_ORIGIN_X := "92.0"
	 AVATAR_ORIGIN_Y := "0.0"
	 AVATAR_ORIGIN_Z := "25.9"
	 AVATAR_ANGLE := "4.6"
	 AVATAR_ORIGIN_NODE := "foyer"
      }
      else{
	 AVATAR_ORIGIN_X := "27.5"
	 AVATAR_ORIGIN_Y := "12.5"
	 AVATAR_ORIGIN_Z := "20.0"
	 AVATAR_ANGLE := "1.55"
	 AVATAR_ORIGIN_NODE := "FLOOR2COR"
      }
      
      # used to look in .. and ../.. but now we chdir up beforehand
      texture_path  := []

      # if TexSmall global variable is turned on by config or command line
      # option, then try texsmall\ before trying textures\ everywhere.
#      if \ TexSmall then
	 put(texture_path, DAT || PS || "texsmall" || PS)
      put(texture_path, DAT || PS || "textures" || PS)
      put(texture_path, "dat" || PS || "textures" || PS)

      # Initialize the Client Scene graph here....      
      Rooms := []
      initSceneGraph()
      if \nsh_dialog.image_2 then {
	 nsh_dialog.image_2.set_filename(DAT || PS || "images" || PS ||"logo.gif")
	 nsh_dialog.image_5.set_filename(DAT || PS || "images" || PS || "map.gif")
	 nsh_dialog.image_5.set_scale_up()
	 world.nsh_dialog.VCSC_tab.children[1].set_label(MODEL_NAME)
	 }
      nsh_dialog.teleport_home()
     
      cltSceneGraph.determineCurrRoom(\ (cam.x), \ (cam.z), \ (cam.y))
      #EraseArea(!gui::dispatcher.subwins)
      NeedsRefresh()

   end

initially
   local root
   Rooms     := [ ]      #  prolly should be a table keyed on room name
   RoomsTable:= table()  #  a table keyed on room name
   
   UpdateObjectSet := set()
   UpdateFuncSet := set()

   DoorsTable:= table()  #  a table keyed on door name
   curr_room := &null
   cam       := &null    # the camera
   chat      := &null    # the chat window
   user_inventory := AvatarInventory()
   TAvatars  := table()  # table of avatars -  key = uid, val = avatar
   #  first is ALWAYS the console user, the rest are
   #  from the network -  uid of console user set when

   # These parms are intended to gather all the global variables and parameters
   # in one place for consistent management. Their initial values should be
   # set by editing here.

   framefactor  :=    30.0    # attempt to control movement speed
   #  larger framefactor ==> slower movement

   avat_step_move    :=    0.15    # default step size when moving avatar-
   #  slower movement may need smaller steps to avoid looking jumpy

   avat_step_rotate  :=    0.15    # default step size on rotate

   cam_step_move     :=    0.10    # default step size when moving camera -
   #  slower movement may need smaller steps to avoid looking jumpy

   cam_step_rotate   :=    0.01    # default step size on rotate

   collide := 0.8        # bounding box offset to avoid pixellation & collision

   g_priority   :=    10      # number of graphics events processed before
   #  looking for others

   # used to look in .. and ../.. but now we chdir up beforehand
   texture_path  := []

   # if TexSmall global variable is turned on by config or command line
   # option, then try texsmall\ before trying textures\ everywhere.
   if \ TexSmall then
      put(texture_path, DAT || PS || "texsmall" || PS)
   put(texture_path, DAT || PS || "textures" || PS)
   put(texture_path, "dat" || PS || "textures" || PS)

   if not stat(USER_GLOBALPATH) then {
      mkdir(USER_GLOBALPATH)
      }
   if not stat(GROUP_GLOBALPATH) then {
      mkdir(GROUP_GLOBALPATH)
      }
   if not stat(PROJECT_GLOBALPATH) then {
      mkdir(PROJECT_GLOBALPATH)
      }
   if not stat(NEWSFEED_GLOBALPATH) then {
      mkdir(NEWSFEED_GLOBALPATH)
      }
   if not stat(SESSION_GLOBALPATH) then {
      mkdir(SESSION_GLOBALPATH)
      }

   avatar_path     :=  USER_GLOBALPATH || PS

   current_texture :=  &null

   # default textures for floor, ceiling, walls
   d_floor_tex :=  find_texture("floor.gif")
   d_wall_tex  :=  find_texture("wall.gif")
   d_ceil_tex  :=  find_texture("ceiling.gif")

   write(&window,"  session...")

   session := LoginSession()

   all_registered_users := table()
   all_friends_location := table()
   all_npc_location := table()
   all_npc_users := table()
   all_other_users := table()
   all_others_location := table()

   select3D := Selection3D()

   FPS := 30

   world := self

end
