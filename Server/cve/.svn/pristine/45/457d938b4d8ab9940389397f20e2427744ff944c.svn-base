#
# Project: Collaborative Virtual Environment
# Author: Kosta Tachtevrenidis (tachtek@nmsu.edu)
# Date: 9/10/2004
#

#
# filename: user.icn
# description: class User
# describes the behavior and properties of the
# USER entity in the CVE
#

$include "../common/defaults.icn"
$define INVENTORY_DIR "inventory"
$define QUESTS_DIR "quests"
$define ACTIVEQUESTS_DIR "active"
$define COMPLETEDQUESTS_DIR "completed"

record npc_quest ( npc_name ,title, score, qtime, qdate, url)
record pending_invitation( pid, uname, psubject, ppriority, pdate, pcomment, pstatus)

class User(name,
	   position,
	   filename,
           user_db, state_db,
	   auth_f, reg_f, stats_f, settings_f, privacy_f,
           state_f, ava_f, isLoggedIn,
           afk, IgnoreList, groups,
           def_cmd, def_user, def_group,
	   cveBuilder,
           VoiceState,	# Off, Local, Private, or in the future Group
           IP,
           VoicePort,
	   active_quests_table,
	   quests_path,
	   user_type,	# "user" , "admin", "npc"
	   logins_count,
	   login_time_stamp,
	   afk_time_stamp,	# marks the start of the last afk
	   afk_duration,	# afk time since login
	   afk_duration_total,	# afk time since account creation
	   time_in_cve_total,	# time spent in the cve since account creation
	   activity_status,
	   pending_inv_table,
           project_access_time,
	   friends
           )

   #
   # getAvatarFilename(): peeks into the .avt file and returns the
   #                      filename along with path of the avatar's
   #                      face picture. If it does not find it it fails.
   #
   method getAvatarFilename(avatar_def)
      local ftmp, line, avatar_face

      if ftmp := open(avatar_def) then {
         while (line := read(ftmp)) & (not find(".gif", line))
         if find("FACE PICTURE", line) then
	     avatar_face := "dat"||PS||"users"|| PS || line[14:0]
         close(ftmp)

         return avatar_face
      }

      fail
   end

   #
   # stopIgnoring: removes user uid from your ignore list
   #
   method stopIgnoring(uid)
      local n

      if *IgnoreList > 0 then
         every n := 1 to *IgnoreList do
            if IgnoreList[n] == uid then {
               delete(IgnoreList, n)
               return
            }
   end

   #
   # isIgnored: checks to see if user tofind is currently
   #            being ignored by the user
   #
   method isIgnored(tofind)
      local x

      every x := 1 to *IgnoreList do
         if IgnoreList[x] == tofind then
            return 0

      return 1
   end

   #
   # GroupMember: checks to see if this user if a member of
   #              group tofind
   #
   method GroupMember(tofind)
      return member(groups, tofind)
   end

   #
   # remove_from_group: assuming that you belong to group tofind,
   #                    this method will remove you
   #
   method remove_from_group(tofind)
      write("removing user " || name || " from group " || tofind)
      delete(groups, tofind)
   end

   #
   # which_groups: returns a list of groups that this
   #               user belongs to
   #
   method which_groups()
      local toreturn := "you belong to: "
      local this_group

      if *groups > 0 then {
         every this_group := key(groups) do
            toreturn := toreturn || "\"" || this_group || "\" "
         }
      else
         toreturn := "you don't belong to any groups"

      return toreturn
   end

   #
   # getPosition: returns the x y z coordinates for this user's avatar
   #
   method getPosition()
      return position
   end

   #
   # setPosition: sets the x y z coordinates for this user's avatar
   #
   method setPosition(x, y, z, angle, node)
      node := map( node, " -" ,"__")
      position := [x, y, z, angle, node]
      updateAvatarTable()
   end

   #
   # setPassword: provided that this user exists this method
   #              changes his password
   #
   method setPassword(newpass)
      local fd_db, fd

      if \exists() then {
         if fd := open(auth_f, "w") then {
            write(fd, newpass)
            close(fd)
            }
         }
  end

   method setReginfo(fn,ln,emd,aff)
      local fd_db, fd

      if fd := open(reg_f, "w") then {
         write(fd, fn)
	 write(fd, ln)
	 write(fd, emd)
	 write(fd, aff)
         close(fd)
         }
   end

   #
   # exists: checks to see if this user exists
   #
   method exists()
      local fd, result
      if fd := open(auth_f, "r") then {
         result := read(fd)
         close(fd)
         return \result
         }
   end


   method regexists()
      local fd, result
      if fd := open(reg_f, "r") then {
         result :=  read(fd)
         close(fd)
         return \result
	 }
   end


   #
   # create_user: passed in a password, this function creates
   #              the necessary records in the db for the user
   #
   method create_user(new_password,firstname,lastname,emailid,affiliation)
      local db_fd, fd, uLDays, d, i, serverUpdateFile

      mkdir(USER_GLOBALPATH||PS||name)
      mkdir(USER_LOCALPATH||PS||name)
      if fd := open(auth_f, "w") then {
        write(fd, new_password)
        close(fd)
        }
      if fd := open(reg_f, "w") then {
	 write(fd, firstname)
	 write(fd, lastname)
	 write(fd, emailid)
	 write(fd, affiliation)
         close(fd)
	 }
      if fd := open(settings_f, "w") then{
         write(fd, "Name     = "||firstname ||" "||lastname)
         write(fd, "Username = "||name)
         write(fd, "Email    = "||emailid)
         write(fd, "Password = "||new_password)
         write(fd, "Privacy  = "||"Public")
         close(fd)
         }
      if fd := open(privacy_f, "w") then{
         write(fd, "Projects = EveryOne")
         write(fd, "Groups   = EveryOne")
         write(fd, "NewsFeed = EveryOne")
         write(fd, "Groups   = EveryOne")
         write(fd, "Status   = EveryOne")
         close(fd)
         }

      if fd := open(stats_f, "w") then {
	 write(fd, "Project/Add 0")
	 write(fd, "Project/Access 0")
	 write(fd, "Project/Delete 0")
	 write(fd, "Project/Join 0")
	 write(fd, "Group/Add 0")
	 write(fd, "Group/Delete 0")
	 write(fd, "Group/Join 0")
	 write(fd, "Friend/Add 0")
	 write(fd, "Profile/View 0")
	 write(fd, "Profile/Update 0")
	 write(fd, "Session/Edit 0")
	 write(fd, "Session/Debug 0")
	 write(fd, "File/Compile 0")
	 write(fd, "File/Open 0")
	 write(fd, "File/Run 0")
	 write(fd, "Feed/Add 0")	
	 write(fd, "Feed/Delete 0")
	 write(fd, "Feed/View 0")
	 close(fd)
	 }

      if fd := open(ava_f, "w") then {
         uLDays := ["Sunday", "Monday", "Tuesday", "Wednesday", 
                    "Thursday", "Friday", "Saturday"]
         every d := !uLDays do {
            writes(fd, d[1:4]||" ")
            every i := 1 to 24 do
               writes(fd, 0||" ")
            write(fd)
            }
         close(fd)
         }

      saveState()
      check_quests_dir()		# This will create directories used by quest activities
      if serverUpdateFile := open(DAT||PS||"ServerUpdate.tim", "wa") then {
         write(serverUpdateFile, &now||"\t"||USER_GLOBALPATH||PS||name||PS||name||".avt")
         close(serverUpdateFile)
         }
      else
         write("writing new char to .tim file bombed")
   end

   #
   # remove_user: removes this user from the user and state dbs
   #
   method remove_user()
      delDir(USER_GLOBALPATH||PS||name)
      delDir(USER_LOCALPATH||PS||name)
      #rename(DAT||PS||"users"||PS||name||PS||name||".avt",
      #     DAT||PS||"users"||PS||name||PS||name||".deleted")
   end

   method delDir(s)
     local f

     if f := open(s) then {
     # Empty the directory first
        every remove(s || PS || ("." ~== (".." ~== !f)))
        close (f)
        }
     # Delete the directory itself
     remove(s)
   end

   #
   # saveState: takes a snapshot of the users state and dumps
   #            it in the db
   #
   method saveState()
      local db_fd, fd, s

      if not (s := "name "||name||"\n"||"node "||position[5]||"\n"||
	  "x "||position[1]||"\n"||
	  "y "||position[2]||"\n"||"z "||position[3]||"\n"||
	  "angle "||position[4]) then {
	 write("ERROR: can't construct state for user ", image(name))
	 fail
	 }

      if fd := open(state_f, "w") then {
	 write(fd, s) | write("ERROR: write failed for ", state_f)
	 close(fd)
	 }
      else write("ERROR: can't open state file ", image(state_f))

      if fd := open(NODERPATH||PS||position[5]||PS||name||".state", "w") then {
	 write(fd, s) |
	    write("ERROR: write failed for ",
		  NODERPATH||PS||position[5]||PS||name||".state")
	 close(fd)
	 }
      else
	  write("ERROR: can't open state file ", image(state_f))

   end

   #
   # loadState: loads this user's state (coordinates etc)
   #
   method updateAvatarTable()
    local T
     if /position then fail
     if /name then fail

      server.dynStHandler.srvSceneGraph.avatarTable[ name ] := T := table()
      T["name"] := name
      T["node"] := position[5]
      T["x"] := position[1]
      T["y"] := position[2]
      T["z"] := position[3]
      T["angle"] := position[4]
   end

   method getRoom()
     local T
      T := server.dynStHandler.srvSceneGraph.avatarTable[ name ]
      return ( \T["node"] | "Underground")
   end

   method resetState()
           setPosition(AVATAR_ORIGIN_X, AVATAR_ORIGIN_Y, AVATAR_ORIGIN_Z,
		       AVATAR_ANGLE, AVATAR_ORIGIN_NODE)

           stat(USER_GLOBALPATH||PS||name) | mkdir(USER_GLOBALPATH||PS||name)
	   stat(USER_LOCALPATH||PS||name)  | mkdir(USER_LOCALPATH||PS||name)
           saveState() # added here to maintain referential integrity
	               # between state and user databases
   end

   method loadState()
      local db_fd, fd, coordinates, xtemp, ytemp, ztemp, angletemp, currnode
      local tblAvatars := table()

      if not (fd := open(state_f, "r")) then {
           # no state file found, load defaults
           resetState()
	   fail
	   
      }
      
      tblAvatars := \(cveBuilder.parseplace("",fd))
      if ( /tblAvatars | /tblAvatars["x"] | /tblAvatars["y"] | /tblAvatars["z"] |
                   /tblAvatars["angle" | /tblAvatars["node"]] ) then resetState()

      setPosition( tblAvatars["x"], tblAvatars["y"], tblAvatars["z"],
                   tblAvatars["angle"], map(tblAvatars["node"]," -" ,"__"))
      close(fd)
   end
   
   method load_active_quests()
      local activeq_list, f_list, npc_name, q_title, score, qclock, qdate, q, qf, q_url
      check_quests_dir()
      /active_quests_table := table()
      f_list := open ( quests_path || ACTIVEQUESTS_DIR ) |{  
	 write("Can't open:", quests_path || ACTIVEQUESTS_DIR) 
	 fail
	 }
      
      
      every  q := ("." ~== (".." ~== !f_list)) do{
	 q ? {
	    npc_name := tab(upto('-'))
	    move(1)
	    q_title := tab(upto('.'))
	    }
	    
	 # open the file and read quest data. see the method add_quest below
	 # to see what format the file has
	 qf:=open(quests_path || ACTIVEQUESTS_DIR || PS || q, "r")   | { write("can't open :", q); next }
	 score := read(qf)
	 score := integer(score[7:0])
	 qclock := read(qf)
	 qclock:=qclock[14:0]
	 qdate := read(qf)	 
	 qdate:=qdate[14:0]
	 q_url := read(qf)
	 close(qf)
	 
	 active_quests_table[npc_name||"-"||q_title] := npc_quest( npc_name, q_title, score, qclock, qdate, q_url )
      }
	 
      close(f_list)
      
   end
   
   # returns a string msg of all active quests data
   method get_active_quests()
      local q, msg
      msg := "" 
      every q:=!active_quests_table do{
	 msg ||:= "npc name      : " || q.npc_name || "\n" ||
		  "quest title   : " || q.title ||  "\n" ||
		  "quest started : " || q.qtime || " " || q.qdate || "\n-----\n" 
	 }
      if msg~=="" then{
	 msg:= "============================================\n" ||
	       *active_quests_table || " Active Quest(s) for user : " ||
	       name || "\n" ||
	       "--------------------------------------------\n" ||
	        msg ||
	       "============================================\n"
		
	 return msg
	 }
   end

   # returns a string msg of all completed quests data
   method get_done_quests()
      local q, msg, f_list, npc_name, q_title, score, qclock, qdate, qf, q_url, count

	 f_list := open ( quests_path || COMPLETEDQUESTS_DIR ) |{  
	 write("Can't open:", quests_path || COMPLETEDQUESTS_DIR) 
	 fail
	 }
      
      msg := ""
      count := 0
      
      every  q := ("." ~== (".." ~== !f_list)) do{
	 q ? {
	    npc_name := tab(upto('-'))
	    move(1)
	    q_title := tab(upto('.'))
	    }
	    
	 # open the file and read quest data. see the method add_quest below
	 # to see what format the file has
	 qf:=open(quests_path || COMPLETEDQUESTS_DIR || PS || q, "r")   | { write("can't open :", q); next }
	 score := read(qf)
	 score := integer(score[7:0])
	 qclock := read(qf)
	 qclock:=qclock[14:0]
	 qdate := read(qf)	 
	 qdate:=qdate[14:0]
	 q_url := read(qf)
	 close(qf)
	 msg ||:= "Quest title : " || q_title ||  "\n" ||
		  "From npc : " || npc_name || "\n" ||
		  "Started  : " || qclock || " " || qdate || "\n"
		  "Score    : " || score || "\n-----\n" 
	 count +:= 1
	 } # every q
      
      close(f_list)
      
      if msg~=="" then{
	 msg:= "============================================\n" ||
	    count || " Completed Quest(s) for user : " ||
	    name || "\n" ||
	    "--------------------------------------------\n" ||
	    msg ||
	    "============================================\n"
	 
	 return msg
	 }
      
   end

   method clear_all_quests()
      active_quests_table := table()
      clear_quests( quests_path || ACTIVEQUESTS_DIR )
      clear_quests( quests_path || COMPLETEDQUESTS_DIR )
   end
   
   method clear_quests(qpath)
      local f_list, q
      f_list := open ( qpath ) |{  
	 write("Can't open:", qpath ) 
	 fail
	 }
      every  q:=  ("." ~== (".." ~== !f_list)) do
	  remove(qpath ||PS|| q)  

      close(f_list)      
   end   
   
   #
   # check if the user can not take a quest from an npc
   # fails if the user can, otherwise returns the reason why 
   # the user can not take the quest.
   #   
   method can_not_take_quest(npc_name, q_title)
      local questfname, qfname
      questfname := npc_name || "-" || q_title
      
      if member(active_quests_table, questfname) then 
	 return "Active"
      else if close( open( quests_path || COMPLETEDQUESTS_DIR || PS ||
			      questfname || ".qst", "r" )) then
	 return "Done"
   end
   
   method cancel_quest(npc_name, q_title)
      local questfname , f
      questfname := npc_name || "-" || q_title
      delete(active_quests_table, questfname)
      remove(quests_path || ACTIVEQUESTS_DIR || PS || questfname || ".qst")
   end

   method add_quest(npc_name, q_title, q_url)
      local newquest , f
      newquest := npc_name || "-" || q_title
      active_quests_table[newquest] := npc_quest( npc_name, q_title, 0, &clock, &date, q_url)
      f:= open(quests_path || ACTIVEQUESTS_DIR || PS || newquest || ".qst", "c" ) | 
	    ( write("can't create quest file:", newquest||".qst") & fail )
      write(f, "score:", 0) # score
      write(f, "time started:", active_quests_table[newquest].qtime)
      write(f, "date started:", active_quests_table[newquest].qdate)     
      write(f, q_url)
      close(f)       
   end
   
   method complete_quest(npc_name, q_title, qscore)
      local questfname , f
      questfname := npc_name || "-" || q_title
      delete(active_quests_table, questfname)
      remove(quests_path || ACTIVEQUESTS_DIR || PS || questfname || ".qst")
      f:= open(quests_path || COMPLETEDQUESTS_DIR || PS || questfname || ".qst", "c" ) | 
	    ( write("can't create quest file:", questfname||".qst") & fail )
      write(f, "score: ", qscore) # score
      write(f, "time ended:", &clock)
      write(f, "date ended:", &date)     
      close(f)
   end
   
#   
# Make sure directories used by quest activities exist. Create them if not
#
   method check_quests_dir()
      local user_path, quest_path
      user_path := USER_GLOBALPATH||PS||name||PS
      quest_path := user_path || INVENTORY_DIR || PS || QUESTS_DIR 
      stat(user_path || INVENTORY_DIR ) | { 	# if there is no inventory dir then create one
	 mkdir(user_path || INVENTORY_DIR) | (
	 write("user.icn: can't open ", user_path || INVENTORY_DIR ) &
	 fail )
	 }

      stat(quest_path ) | {	# if there is no quests directories then create them
	 (mkdir(quest_path ) &
	  mkdir(quest_path || PS || ACTIVEQUESTS_DIR) & 
	  mkdir(quest_path || PS || COMPLETEDQUESTS_DIR) ) | 
	 (
	 write("user.icn: can't open ", user_path || INVENTORY_DIR || PS || QUESTS_DIR ) &
	 fail )
	 }
      return
   end
   
   method init_login()
      isLoggedIn := 1
      login_time_stamp := &now
      project_access_time := &now   
   end
   
   method set_afk()      
      if is_not_afk() then{
	 afk_time_stamp := &now
	 afk := 1
	 return
	 }
   end
   
   method is_afk()
      if \afk then return
   end

   method is_not_afk()
      if /afk then return
   end
   
   # Away is different from afk
   
   method is_status(s)
      return activity_status==s
   end

   method is_status_not(s)
      return activity_status~==s
   end

   method set_back(status)
      if is_afk() then{
	 afk_duration := &now - afk_time_stamp
	 afk:=&null
	 activity_status := status
	 return
	 }
      else if activity_status~==status then {
	 activity_status := status
	 return
	 }
   end
   
   method get_activity_status(is_owner_icon)
      if is_afk() & is_status("Online") then 
	 return "Away"
      else
	 return activity_status
   end
   
   
   method get_afk_duration()      
      if is_afk() then
	 return (&now - afk_time_stamp)
      else
	 return 30
   end

   
   method load_summary()
      local old_h:=0, old_m:=0, old_s:=0, line, fin, word, msg
      # open the summary file and get the old data
      if name === "guest" then return
      if fin := open(USER_GLOBALPATH||PS||name||PS|| name ||"_summary.log", "r") then{
	 while line := read(fin) do{
	    if line=="" then next
	    line ? {
	       if ="\t" then next
	       word := map(tab(find(" ")))
	       tab(find(":")+2)
	       case word of{
		  "logins" : {logins_count := integer(tab(many(&digits)))+1}
		  "time"  : {
		     old_h := integer(tab(many(&digits))) | 0
		     tab(upto(&digits))
		     old_m := integer(tab(many(&digits))) | 0
		     tab(upto(&digits))
		     old_s := integer(tab(many(&digits))) | 0
		     time_in_cve_total := old_h*3600 + old_m*60 + old_s
		     }
		  "away"  : {
		     old_h := integer(tab(many(&digits))) | 0
		     tab(upto(&digits))
		     old_m := integer(tab(many(&digits))) | 0
		     tab(upto(&digits))
		     old_s := integer(tab(many(&digits))) | 0
		     afk_duration_total := old_h*3600 + old_m*60 + old_s
		     }
		  }# case
	       }# line
	    }# while      
	 close(fin)
	 }
      else
      {
	 write(" It seems this is the first time to create summary for ", name)
         if fin := open(USER_GLOBALPATH||PS||name||PS||name||"_summary.log", "w") then {
            msg := get_summary()
            write(fin, msg)
            close(fin)
            }
      }

   end

   method load_pending_inv()
      local line, fin, pinv #uname, psubject, ppriority, ptime, pcomment
      # open the pending invitations file and get the data
      if fin := open(USER_GLOBALPATH||PS||name||PS|| "pending_inv.log", "r") then {
	 while line := read(fin) do {
	    if line=="" then next
	    if line=="INVPENDING_BEGIN" then
	       ((line := read(fin)) | break)
	    else
	       break

	    pinv := pending_invitation()

	    line ? {
    	       pinv.pid :=tab(upto(','))
	       =", "
	       pinv.uname :=tab(upto(','))
	       =", "
	       pinv.psubject := tab(upto(','))
	       =", "
	       pinv.ppriority := tab(upto(','))
	       =", "
	       pinv.pdate := tab(0)
	       } # line
	    pending_inv_table[pinv.pid] := pinv
	       pinv.pcomment := ""
	       while line:=read(fin) do{
	          if line == "INVPENDING_END" then break
	          pinv.pcomment ||:= line
	          } #while

	    }# while
	 close(fin)
	 }
      else
      {
	 write(" No pending invitation file was found ", name)
         save_pending_inv()
      }

   end

   method save_pending_inv()
      local fout, pinv
      fout := open(USER_GLOBALPATH||PS||name||PS||
         "pending_inv.log", "w") | 
         write("can't create new file: ",USER_GLOBALPATH||
         PS||name||PS||"pending_inv.log") & fail

         every pinv := !pending_inv_table do{
            write(fout, "INVPENDING_BEGIN")
            write(fout, pinv.pid,", ",
            		pinv.uname,", ",
                        pinv.psubject,", ",
                        pinv.ppriority,", ",
                        pinv.pdate)
            write(fout, pinv.pcomment)
            write(fout, "INVPENDING_END")
           }# every
         close(fout) 
   end

   method seconds_to_clock(t)
      local s , m , h
      s := t % 60
      m := (t/60) % 60      
      h := t/3600
      if s<10 then s:="0"||s
      if m<10 then m:="0"||m
	 
      return  h || ":" || m || ":" || s 
   end
   
   #
   # open the summary file and get the old data and update with the new data
   # don't log. Just return a message of all the summary 
   #(log handler does the logging)
   #
   method get_summary()
      local msg, t, afk_percent
      if /login_time_stamp then login_time_stamp := 0
      if /afk_duration then afk_duration := 0
      t := &now - login_time_stamp
      if t = 0 then t := 1
      afk_percent := integer((real(afk_duration)/t)*10000)/100
      
      msg := "=====================================================\n" ||
	     "Activity summary of user : " || name || "\n" ||
	     "-----------------------------------------------------\n" ||
	     "Last updated on : " || &dateline || "\n\n" ||
	     "Logins count    : " || logins_count || " times\n\n" ||
	     "Last login on   : " || ctime(login_time_stamp) || "\n" ||
	     "\tTime in the cve    : " || seconds_to_clock(t)  || 
		" (hours:minutes:seconds)\n" ||
	     "\tAway from keyboard : " || seconds_to_clock(afk_duration) ||
		" (" || afk_percent || "% of the time)\n" ||
	     "\tActive : " || seconds_to_clock(t-afk_duration) || "\n\n"
	     
      t +:= time_in_cve_total
      afk_percent := integer((real(afk_duration+afk_duration_total)/t)*10000)/100
      
      msg ||:= "Time in the cve (total)    : " || seconds_to_clock(t) || 
		  " (hours:minutes:seconds)\n" ||
	       "Away from keyboard (total) : " || 
		  seconds_to_clock(afk_duration+afk_duration_total) || " ("  ||
		  afk_percent || "% of the time)\n" ||
	       "Active : " || seconds_to_clock(t-afk_duration-afk_duration_total) ||
	       "\n=====================================================\n" 
	     
      return msg
   end

  method isFreind(u)
     return member(friends, u)
  end

   initially(this_name,cveBuilder, type_in)
      local log1
      name := this_name

      self.cveBuilder := cveBuilder
      isLoggedIn := 0
      afk_duration := 0
      activity_status := "Online"
      afk_duration_total := 0
      time_in_cve_total := 0
      logins_count := 1 
      groups := table()
      pending_inv_table:=table()
      position := IgnoreList := list()
      def_cmd := def_user := def_group := ""
      user_db := USER_DB
      state_db := STATE_DB
      auth_f := USER_GLOBALPATH||PS||name||PS||name||".auth"
      state_f := USER_LOCALPATH||PS||name||PS||name||".state"
      reg_f := USER_GLOBALPATH||PS||name||PS||name||".reg"
      settings_f := USER_GLOBALPATH||PS||name||PS||"account_settings.log"
      privacy_f := USER_GLOBALPATH||PS||name||PS||"privacy_settings.log"
      stats_f:= USER_GLOBALPATH||PS||name||PS||"stats.log"
      ava_f := USER_GLOBALPATH||PS||name||PS||"avaTable.log" #availability table

      loadState()
      load_summary()
      IP:=""
      VoicePort := 5000
      user_type := \type_in | "user"
      quests_path := USER_GLOBALPATH ||PS|| name ||PS|| INVENTORY_DIR ||PS|| QUESTS_DIR ||PS
      load_active_quests()
      load_pending_inv()      

      friends := set()

      if log1 := open(USER_GLOBALPATH||PS||name||PS||"friends.log", "r")
      then {
         while  insert(friends, trim(read(log1)))
         close(log1)
         }
end
