$include "../common/defaults.icn"

#
# class: penguin
#
# a super class for every penguin model
#

#
# Class: avatron
# This is a class that renders a humanoid avatar
# The (origx, origy, origz) is located at the intersection
# of the neck and body.
#
global penSize

class penguinj: avatar (origx, origy, origz, sex, 
   angle,ro,mv,h,b,c,la,ra,lg,rg,face,
   X,Y,Z,xsize,ysize,zsize,height,color,
   face_path,
   a_name,
   scolor,   #   Shirt color
   pcolor,   #   Pants color
   shcolor,  #   Shoes color
   hdchoice,
   shape,
   ps,
   moveuid,
   moveuidbody,

   # from the OLD avatar class
   uid,
   x, y, z,           # avatar's coordinates
   lx, lz,                 #  in view mode 2
   fint,  rarm,  larm,
   grouping,
   render_set,
   isRendered,
   vertical_ptr,horizontal_ptr, # angles for pointing
   isPointing,
   object,
   chair,
   sittingDown,
   body_part,
   currObjID
)
   method initialize()
      face_path:= world.avatar_path
      parser( world.avatar_path || uid || ".avt")
      setup( x, y, z, angle)
   end
   method derender()
      local len, i, item, win3d, dispList

      if (\h.headWS) then{
      	h.headWS.skip:=1
     	b.bodyWS.skip:=1
     	la.armWS.skip:=1
      	ra.armWS.skip:=1
      	lg.legWS.skip:=1
      	rg.legWS.skip:=1
        }
      # If room is not rendered then return
      if /(isRendered) then return
	 isRendered := &null
      world.NeedsRefresh()
      return
   end # method derender()

   #
   # flush pending net output
   #
   method flushnet()
      if session.isUp() then {
         session.Write(grouping)
         grouping := list()
	 }
   end
   #
   #  move_part(Name, Dir, Angle)
   #  Purpose: to move a particular body part
   #  Parameters: Name - name of the part to be moved
   #              Dir - direction in which it is to move
   #              Angle - angle for which it is to be rotated
   #
   method move_part(name, dir, ang)
      case name of {
	 "right_arm" : ra.setAngle(ang, dir)
	 "left_arm" :  la.setAngle(ang, dir)
	 "right_leg" : rg.setAngle(ang, dir)
	 "left_leg" :  lg.setAngle(ang, dir)
         }
      world.NeedsRefresh()
      if (self === world.cam.avatar) & session.isUp() then {
	 put(grouping, moveuid || "part " ||  name || " " || dir || " " || ang)
         }
   end
   #
   #  move_part_complex(name,x,z)
   #  Purpose: to move a body part in x,z direction freely
   #           USED for pointing
   #  Parameters: name - name of the body part to be moved
   #              x - angle along the x-axis
   #              z - angle along the z-axis
   #
   method move_part_complex(name,x,y,z)
      local msg

      case name of {
         "right_arm" : ra.setAngleComplex(x,y,z) 
         "head"      : h.setAngleComplex(x,y,z)
         "left_arm"  : la.setAngleComplex(x,y,z)
         "right_leg" : rg.setAngleComplex(x,y,z)
	 "left_leg"  : lg.setAngleComplex(x,y,z) 
         }
      world.NeedsRefresh()
      if (self === world.cam.avatar) & session.isUp() then {
	 msg := moveuid || "part2 " ||  name || " " || x || " " || y || " " ||z
	 put(grouping, msg)
	 }
   end

   #
   #  move(X,Y,Z,angle)
   #  Purpose: to move the avatar
   #  Parameters: [X,Y,Z] - current x, y, z coordinates
   #              Angle - angle in which the avatar should be turned
   #
   method move(posx,posy,posz,ang)
      local degree
      degree := rtod(ang) # use internal fn for conversion
      if /ro then fail
      ro.angle:=degree    # update the angle of rotation matrix (e.g. ro)
      X := posx
      Y := origy+2*height # posy
      Z := posz
      mv.x := X
      mv.y := Y
      mv.z := Z
      if *object > 0 then 
	 object[currObjID].moveAlongAvatar(mv.x,posy,mv.z,degree)
      # view_mode 2 - over shoulder - is too jerky - this fixes it
      if world.cam.view_mode = 2 then {
         world.NeedsRefresh()
         }
   end

  #
   # sets avatar talking state to true
   #
   method isTalking()
      h.isTalking()
      if (self === world.cam.avatar) & session.isUp() then {
	 put(grouping, moveuid || "mouth")
	 }
   end

   #
   # sets avatar talking state to  state="ON" or "OFF"
   #
   method SetTalkState(state)
      h.SetTalkState(state)
      if (self === world.cam.avatar) & session.isUp() then {
	 put(grouping, moveuid || "mouth")
	 }
   end

   #
   #  setup()
   #  Purpose: to set up each part of avatar by instantiating
   #           the body part
   #
   method setup(x,y,z,ang)  
      X:=x;Y:=y;Z:=z;angle:=ang
      h := phead()  
      b := pbody()  
      la := parm()  
      ra := parm()  
      lg := pleg()  
      rg := pleg()  
   end
   #
   #  render()
   #  Purpose: to render graphics of each part thus a whole
   #           avatar
   #
   method render()
     local oldwin

      if \isRendered then return
      isRendered := 1
      oldwin := &window
      &window := !gui::dispatcher.subwins
      actual_render()
      &window := oldwin
   end

   #
   # actual_render() depends on &window being set to the subwindow
   #
   method actual_render()
      PushMatrix()
      height := 1.0
      mv:=Translate(X , origy+height , Z )
      ro:=Rotate(angle,0,1,0)
      Scale(xsize, height, zsize)
	
      h.render(face_path || face, color, hdchoice)
      b.render(a_name, scolor, sex, pcolor, face_path, ps)
      la.render("l", color, scolor)
      ra.render("r", color, scolor)
      lg.render("l", pcolor, shcolor)
      rg.render("r", pcolor, shcolor)
      PopMatrix()
      WAttrib("texmode=on")
   end

   #
   # parse(File)
   # Purpose: Takes a file and parse each line and set them to their
   #          appropriate variables
   #
   method parser(file_name)
      local line, file, i, nm, val

      file := datopen(file_name) | stop("Can't open ", file_name)
      while line := trim(read(file)) do {
         if line[1]~=="#" then {
            if not (i := find("=", line) + 1) then {
	       write("avt file format error in ", image(line))
	       break
	       }
	    nm := map(line[1:i-1])#convert to lowercase
	    if *(val := line[i:0]) = 0 then break
	    case nm of {
	       "name": a_name := val
	       "gender": sex := val
	       "skin color": color := val
	       "shirt color": scolor := val
	       "pants color": pcolor := val
	       "shoes color": shcolor := val
	       "head shape": hdchoice := val
	       "face picture": face := val
	       "shape": shape := val
	       default : self[nm] := val
	       }
            }
         }
      close(file)
   end

   #
   # getcolor()
   #
   # This returns the color of the avatar, when invoked.
   #
   method getcolor()
     return color
   end

$define MINDELTA 0.08

   method test_new_pos(step,deltax, deltaz,y,mov)
      local olddeltax := deltax, olddeltaz := deltaz, room, rdl, typ
      room := world.curr_room

      # rdl means "room disallows list"
      if (rdl := room.disallows(x+deltax,z+deltaz,y)) & (/(rdl|rdl[1])) then {
	  deltax := 0
	  if rdl := room.disallows(x,z+deltaz,y) & (/(rdl|rdl[1])) then {
	      deltaz := 0
	      deltax := olddeltax
	      if rdl := room.disallows(x+deltax,z,y) & (/(rdl|rdl[1])) then {
		  # try a smaller move
		  if abs(deltax|deltaz) > MINDELTA then
		      return test_new_pos(step,deltax*0.8,deltaz*0.8,y,mov)
		  fail
	          }
	      }
          }
      
   typ := (\rdl)[1]

   if mov = (1|3|4) then {

      if /typ then 
	 return [x+deltax, z+deltaz, room.y]
      else if typ = 1 then
	 return [x+deltax,z+(deltaz),y+(0.33*deltaz)]
      else if typ = 2 then
	 return [x+(deltax),z+deltaz,y+(0.33*deltax)]
      else if typ = 3 & y < 1 then {
	 y := 1
	 return [x+deltax,z+deltaz,y]
	 }
      else if typ=3 & y=1 then
	 return [x+deltax,z+deltaz,y]
      else if typ = 4 then {
	 return [x+(rdl[2]/5.0),z+deltaz,y+(rdl[3]/5.0)]
         }
      }
   else {
      if /typ then
	 return [x+deltax,z+deltaz,room.y]
      if typ = 1 then 
	 return [x+deltax,z+(deltaz),y+(0.33*deltaz)]
      if typ = 2 then 
	 return [x+(deltax),z+deltaz,y+(0.33*deltax)]
      if y >= 1 & typ = 3 then 
	 return [x+deltax,z+deltaz,y]
      if y < 1 & typ = 3 then
	 return [x,z+deltaz,y+1]
      }
   end



   method moveabs(nx,ny,nz,na)
      x := nx
      y := ny
      z := nz
      angle := na
      move(nx, ny, nz, na)
      if self === world.cam.avatar then {
	 if world.cam.view_mode > 1 then {
	    cam_follows() # avatar==cam
	    }
	 broadcast_move()
         }
      else world.NeedsRefresh()
   end

   method actions(act, step )
      local deltax, deltaz, newpos
         case act of {
	    "move_forward": {
	    #
	    # move FORWARD
	    #
	       lx     := sin(angle)
	       lz     := cos(angle)
	       deltax := step * lx
	       deltaz := step * lz

	       # write("move(1,",step,") viewmode ", world.cam.view_mode)

	       #
	       # ask test_new_pos if we can move where we want.
	       # if it succeeds, it returns our new [x, z] location.
	       # either deltax or deltaz may get dropped if out of bounds.
	       #
	       if newpos := test_new_pos( step, deltax, deltaz,y,1 ) then {
	          x := newpos[1]
	          z := newpos[2]
                  y := newpos[3]
# world.nsh_dialog.image_5.movearrow(a_name,x,y,z)

	          if \ro then move(x, y, z, angle)
	          if self === world.cam.avatar then {
		     if world.cam.view_mode > 1 then {
		        #write("cam follows move")
		        cam_follows() # avatar==cam
		        }
		     broadcast_move()
                     }
	          else {
		     # need to not refresh for every single avatar move
		     world.NeedsRefresh()
		     }
	          if fint < 3 then {
		     if rarm = 0 & isPointing = 0 then {
		        move_part("right_arm", "fb", 10)
		        }
		     move_part("left_leg", "fb", 10)
		     if larm = 0 then {
		        move_part("left_arm", "fb", -10)
		        }
		     move_part("right_leg", "fb", -10)
		     fint +:= 1
	             }
	          else {
		     if rarm = 0 & isPointing = 0 then {
		        move_part("right_arm", "fb", -10)
		        }
		     move_part("left_leg", "fb", -10)
		     if larm = 0 then {
		        move_part("left_arm", "fb", 10)
		        }
		     move_part("right_leg", "fb", 10)
		     fint +:= 1
		     if fint = 6 then { fint:=0  }
		     }
	          }
               }
            "move_pointer_up" : {
               if isPointing = 1 then {
                  if vertical_ptr > 210 then 
	             vertical_ptr:=vertical_ptr-1
                  move_part_complex("right_arm", vertical_ptr, 0, 
		     horizontal_ptr)
                  move_part_complex("head", vertical_ptr-270, 
	             horizontal_ptr, 0) 
               } 
	    }

	    "move_backward" : {
	       #
	       #  move BACKWARD - moon-walk style
	       #
	          lx     := sin(angle)
	          lz     := cos(angle)
	          deltax := step * lx
	          deltaz := step * lz

	          #  write("avatar move x,y,z, angle ",x," ",y," ",z," ",angle)
	          if newpos := test_new_pos( step, deltax, deltaz,y,2 ) then {
		     x := newpos[1]
		     z := newpos[2]
		     y :=newpos[3]
		     move(x, y, z, angle)

		     if fint < 3 then {
		        if rarm = 0 & isPointing = 0 then {
			   move_part("right_arm", "fb", 10)
			   }
		        move_part("left_leg", "fb", 10)
		        if larm = 0 then {
			   move_part("left_arm", "fb", -10)
			   }
		        move_part("right_leg", "fb", -10)
		        fint +:= 1
		        }
		     else {
		        if rarm = 0 & isPointing = 0 then {
			   move_part("right_arm", "fb", -10)
			   }
		        move_part("left_leg", "fb", -10)
		        if larm = 0 then {
			   move_part("left_arm", "fb", 10)
		   	   }
		        move_part("right_leg", "fb", 10)
		        fint +:= 1
		        if fint = 6 then { fint:=0  }
		        }
		     if self === world.cam.avatar then {
		        if world.cam.view_mode > 1 then {
			   cam_follows() # avatar == cam
  		           }
		        broadcast_move()
		        }
		     }
                 }
            "move_pointer_down" : {
               if isPointing = 1 then {
                  if vertical_ptr < 330 then 
	 	     vertical_ptr:=vertical_ptr+1
                  move_part_complex("right_arm", vertical_ptr, 0, 
		     horizontal_ptr)
                  move_part_complex("head", vertical_ptr-270, 
                     horizontal_ptr, 0)
               }
	       }  
	    "raise_right_arm" : {
	       #
	       # Raising Right Arm
	       #
               isPointing := 1
               move_part_complex("right_arm",0,0,0)
	       move_part_complex("head",0,0,0)
	       if rarm = 0 then {
		  rarm:=1
		  move_part("right_arm", "fb", -180, 1)
	          }
	       else {
		  rarm:=0
		  move_part("right_arm", "fb", 10, 1)
		  }
               }  # end case 3

	    "raise_left_arm" : {
	       #
	       # Raising Left Arm
	       #
	       if larm = 0 then {
		  larm:=1
		  move_part("left_arm", "fb", -180, 1) # -10 ?
		  }
	       else {
		  larm:=0
		  move_part("left_arm", "fb", 10, 1)
		  }
	       } # end case 4

	    "move_right" : {
	       #
	       # move SIDEWAY-right
	       #
	       #  x := x - sin(1.571-angle)*0.1
	       #  z := z + cos(1.571-angle)*0.1

	       #  should these be updated ???
	       #  lx     := sin(1.571-angle)
	       #  lz     := cos(1.571-angle)
	          deltax := step * ( -sin(1.571-angle) )
	          deltaz := step * (  cos(1.571-angle))

	          # write("avatar move x,y,z, angle ",x," ",y," ",z," ", angle)
	          if newpos := test_new_pos( step, deltax, deltaz,y,3 ) then {
		     x := newpos[1]
		     z := newpos[2]
                     y :=newpos[3]

		     lx +:= deltax
		     lz +:= deltaz

		     if fint < 3 then {
		        move_part("right_leg", "s", -10)
		        move(x, y, z, angle)
		        if self === world.cam.avatar then {
			   if world.cam.view_mode > 1 then {
			      cam_follows() #avatar==cam
		           }
			   broadcast_move()
		           }		     
		        fint +:= 1
		        }
		     else {
		        move_part("right_leg", "s", 0)
		        fint +:= 1
		        if fint = 6 then { fint:=0 }
		        }
		     }
                  }
            "move_pointer_right" : {
               if isPointing = 1 then {
                  if horizontal_ptr > -30 then
                     horizontal_ptr:=horizontal_ptr-1
                  move_part_complex("right_arm", vertical_ptr, 0, 
                     horizontal_ptr)
                  move_part_complex("head", vertical_ptr-270, 
                     horizontal_ptr, 0)
                 }
	       }  # end case 5
	    "move_left" : {
	       #
	       # move SIDEWAY-left
	       #

	       #      x := x + sin(1.571-angle)*0.1
	       #      z := z - cos(1.571-angle)*0.1
	          deltax := step * (  sin(1.571-angle))
	          deltaz := step * ( -cos(1.571-angle))

	          # write("avatar move x,y,z, angle ",x," ",y," ",z," ", angle)
	          if newpos := test_new_pos( step, deltax, deltaz,y,4) then {
		     x := newpos[1]
		     z := newpos[2]
                     y := newpos[3]
		     lx +:= deltax
		     lz +:= deltaz

		     if fint < 3 then {
		        move_part("left_leg", "s", 10)
		        move( x, y, z, angle)
		        if self === world.cam.avatar then {
		           if world.cam.view_mode > 1 then {
#write("cam follows move6")
			      cam_follows() # avatar == cam
		           }
			   broadcast_move()
		           }
		     	fint +:= 1
		        }
		     else {
		         move_part("left_leg", "s", 0)
		         fint +:= 1
		         if fint = 6 then { fint:=0 }
		         }
		     }
                 } 
            "move_pointer_left" : {
               if isPointing = 1 then {
                  if horizontal_ptr < 30 then
                     horizontal_ptr:=horizontal_ptr+1
                  move_part_complex("right_arm", vertical_ptr, 0, 
		     horizontal_ptr)
                  move_part_complex("head", vertical_ptr-270, 
                     horizontal_ptr, 0)
                }
            } # end case 6
	    "turn_left" : {
               #
               # turn LEFT
               #
	       #if isPointing=0 then {
	       angle +:= step
	       if abs(angle) > 2 * &pi then  angle := 0.0
	       move( x, y, z, angle)
	       if self === world.cam.avatar then {
	          if world.cam.view_mode > 1 then {
#write("cam follows move7")
		      cam_follows() # avatar == cam
		  }
		     broadcast_move()
	          }
                #}
                #else {
                #  if horizontal_ptr < 30 then
                #     horizontal_ptr:=horizontal_ptr+1
                #  move_part_complex("right_arm", vertical_ptr, 0, 
                #     horizontal_ptr)
                #  move_part_complex("head", vertical_ptr-270, 
                #     horizontal_ptr, 0)
                #}
	       } # end case 7
        "turn_right" : {
               #
               # turn RIGHT
               #
               #if isPointing=0 then {
	       angle -:= step
	       if abs(angle) > 2 * &pi then  angle := 0.0
	       move( x, y, z, angle)
	       if self === world.cam.avatar then {
	          if world.cam.view_mode > 1 then {
#write("cam follows move8")
		      cam_follows() # avatar == cam
		  }
	          broadcast_move()
	          }
                #}
                #else {
                #  if horizontal_ptr > -30 then
                #     horizontal_ptr:=horizontal_ptr-1
                #  move_part_complex("right_arm", vertical_ptr, 0, 
                #     horizontal_ptr)
                #  move_part_complex("head", vertical_ptr-270, 
                #  horizontal_ptr, 0)
                #}
	       } # end case 8
            #
            #  back to NORMAL
            #            
	    "back_default" : {
	       move_part_complex("head", 0, 0, 0)
	       move_part_complex("body", 0, 0, 0)
	       move_part_complex("right_arm", 0, 0, 0)
	       move_part_complex("left_leg", 0, 0, 0)
	       move_part_complex("left_arm", 0, 0, 0)
	       move_part_complex("right_leg", 0, 0, 0)
	       } 

            #
            # pointing
            #
            "toggle_pointer" :   {
               if isPointing=0 then {
                  # Everything goes back to normal
	 	  move_part("right_arm", "fb", 0)
		  move_part("left_leg", "fb", 0)
                  move_part("left_arm", "fb", 0)
                  move_part("right_leg", "fb", 0)
	          vertical_ptr:=270
                  horizontal_ptr:=0
	          move_part("right_arm", "fb", 270)
                  isPointing:=1
                  }
               else {
                  move_part_complex("right_arm",0,0,0)
		  move_part_complex("head",0,0,0)
                  isPointing:=0
                  }
 	    }

          } # end case
      flushnet()
   end # method actions()

   method possess(object1)
      local ownedObj,objCol     

      if *object > 0 then {
         self.object[currObjID].deRender()
	 case self.object[currObjID].getPlacedAt() of {
         "hand" : { la.unpossess()}
         "back" : { b.unpossess() }
	 }
	 }
      currObjID := currObjID + 1
      #write(" CURROBJID = ",currObjID) 
      put(self.object,object1)
      self.object[currObjID].owner:=name
      self.object[currObjID].possessed:=1
      
      move_part("right_arm", "fb", 0)
      move_part("left_leg", "fb", 0)
      move_part("left_arm", "fb", 0)
      move_part("right_leg", "fb", 0)
     
    if (self === world.cam.avatar) & session.isUp() then {
        put(grouping, "\\possess " || self.object[currObjID].Id || " " || a_name || " " || world.curr_room.name)
    }
      self.object[currObjID].setSize(xsize,height,zsize)
      self.object[currObjID].setPosAvatar(x,y,z,angle)
      #self.object[currObjID].mov.x := x
      #self.object[currObjID].mov.y := 1.5
      #self.object[currObjID].mov.z := z
     # self.object[currObjID].rot.angle := angle
     Objects := object
      currObjsID := currObjID
      move(x,y,z,angle)      
      if *object > 0 then {
         case object[currObjID].getPlacedAt() of {
            "hand" : { la.possess(object[currObjID])}
            "back" : { b.possess(object[currObjID]) }
         } 
      }
      #write(" CURROBJID = ",currObjID)
      ownedObj := object[currObjID].name
      objCol :=   object[currObjID].color
      world.nsh_dialog.write_to_chat_win( a_name, " possessed a ",objCol," color ", ownedObj) 
      
       #write(" x,y,z ",self.object[currObjID].x || " " || self.object[currObjID].y || " " ||  self.object[currObjID].z)
      # write(" x,y,z ",self.object[currObjID].mov.x || " " || self.object[currObjID].mov.y || " " ||  self.object[currObjID].mov.z)
       #write(" x,y,z ",self.object[currObjID].mv.x || " " || self.object[currObjID].mv.y || " " ||  self.object[currObjID].mv.z)
      # write(" x,y,z ",self.object[currObjID].mvDraw.x || " " || self.object[currObjID].mvDraw.y || " " ||  self.object[currObjID].mvDraw.z) 
   end
   
   method unpossess()
      local i,ownedObj,objCol,flag 
      flag := 0
      if *object > 0 then {
         #write("entered unpossess")
         object[currObjID].unpossessed(x,y,z)
         object[currObjID].possessed:=0
         ownedObj := object[currObjID].name
         objCol :=   object[currObjID].color
         world.nsh_dialog.write_to_chat_win( a_name, " unpossessed a ",objCol," color ", ownedObj)
        case object[currObjID].getPlacedAt() of {
            "hand" : { la.unpossess()}
            "back" : { b.unpossess() }
         }
       if (self === world.cam.avatar) & session.isUp() then {
        put(grouping, "\\unpossess " || self.object[currObjID].Id || " " || a_name)
    }
         i:=currObjID
         while i < *object do {
            object[i]:=&null
            object[i]:=object[i+1]
            object[i].possessed := 1
            i+:=1
         }        
       if  currObjID > 0 then
          currObjID := currObjID - 1
         
         #write("currObjID = ",currObjID)       
         object[i] := &null
         pull(object)      
         object[currObjID].reRender(world.curr_room.render_level)
         case object[currObjID].getPlacedAt() of {
            "hand" : { la.possess(object[currObjID])}
            "back" : { b.possess(object[currObjID]) }
         }
      currObjsID := currObjsID
      Objects := object 
      move(x,y,z,angle)
      /object := []       
      }
   end

   method switchObjectUp()
      local switchFrom,switchTo,switchFromCol,switchToCol  
      if currObjID < *object then {
        # write("called next method") 
         move_part("right_arm", "fb", 0)
         move_part("left_leg", "fb", 0)
         move_part("left_arm", "fb", 0)
         move_part("right_leg", "fb", 0)
         case self.object[currObjID].getPlacedAt() of {
            "hand" : { la.unpossess()}
            "back" : { b.unpossess() }
         }                                 
         object[currObjID].deRender()
         if (self === world.cam.avatar) & session.isUp() then {
            put(grouping, "\\switchobjectup " || self.object[currObjID].Id ||
		" " || a_name)
            } 
         currObjID:=currObjID+1
         object[currObjID].reRender(world.curr_room.render_level)
         switchFrom := object[currObjID-1].name
         switchFromCol := object[currObjID-1].color
         switchTo :=  object[currObjID].name
         switchToCol := object[currObjID].color
         world.nsh_dialog.write_to_chat_win( a_name, " switched from " ,
					    switchFromCol," color ", 
					    switchFrom, " to ", switchToCol,
					    " color ", switchFrom)
         case object[currObjID].getPlacedAt() of {
            "hand" : { la.possess(object[currObjID])}
            "back" : { b.possess(object[currObjID]) }
         }
      currObjsID := currObjID
      move(x,y,z,angle)    
      }		    
   end

   method switchObjectDown()
      local switchFrom,switchTo,switchFromCol,switchToCol
      if currObjID > 1 then {
         #write("called prev method")
         move_part("right_arm", "fb", 0)
         move_part("left_leg", "fb", 0)
         move_part("left_arm", "fb", 0)
         move_part("right_leg", "fb", 0) 
         case self.object[currObjID].getPlacedAt() of {
            "hand" : { la.unpossess()}
            "back" : { b.unpossess() }
         }                                             
         object[currObjID].deRender()
         if (self === world.cam.avatar) & session.isUp() then {
	    put(grouping, "\\switchobjectdown " || self.object[currObjID].Id ||
		" " || a_name)
	    }
         currObjID:=currObjID-1
         switchFrom := object[currObjID+1].name
         switchFromCol := object[currObjID+1].color
         switchTo :=  object[currObjID].name
         switchToCol := object[currObjID].color
         world.nsh_dialog.write_to_chat_win( a_name, " switched from ",
					    switchFromCol," color ", 
					    switchFrom, " to ", switchToCol,
					    " color ", switchFrom)
         object[currObjID].reRender(world.curr_room.render_level)
         case object[currObjID].getPlacedAt() of {
            "hand" : { la.possess(object[currObjID])}
            "back" : { b.possess(object[currObjID]) }
            }                
	 currObjsID := currObjID
	 move(x,y,z,angle)  
	 }
   end
 
   method getX()
      return x#+la.getX()
   end
   method getY()
      return y#+la.getY()
   end
   method getZ()
      return z#+la.getZ()
   end
   method getName()
      return name
   end

   method cam_follows()
      local adj_angle, r, owcy
      if world.cam.view_mode = 3 then {
         r := h.headr
         owcy := world.cam.y - world.cam.looky
         world.cam.x := x + r * sin(angle) * .6
         # should modify hardwired 1.5's here and below to relate to avatar height
         world.cam.y := y + 1.5
         world.cam.z := z + r * cos(angle) * .6
         world.cam.lx := lx
         world.cam.lz := lz
         world.cam.lookx := x + 4 * sin(angle)

         world.cam.looky := y + 1.5 - owcy
         world.cam.lookz := z + 4 * cos(angle)
         return
         }
      if world.cam.view_mode = 2 then { # camera over shoulder
         adj_angle := angle + dtor(210.0)
         if adj_angle >  2 * &pi then {  adj_angle -:= 2 * &pi }
         if adj_angle < -2 * &pi then {  adj_angle +:= 2 * &pi }
         lx :=  sin( adj_angle )
         lz :=  cos( adj_angle )
         world.cam.x     := (x + 2.4 * lx )
         world.cam.y     := y + 0.2 + 1.5
         world.cam.z     := (z + 2.4 * lz )
         while not world.curr_room.isinside(world.cam.x, world.cam.z) do {
	    lx *:= 0.9; lz *:= 0.9
	    world.cam.x := (x + 2.4 * lx )
	    world.cam.y := y
	    world.cam.z := (z + 2.4 * lz )
         }
         world.cam.lookx := x - lx
         / (world.cam.looky) := y + 1.5
         world.cam.lookz := z - lz
         world.cam.eye()
         return
         }
   end # method cam_follows()

   #   now called from avatar.move()
   #    maybe this should be moved to  move????
   #     ###### cannot seem to access field uid from there - very strange
   method broadcast_move()
      local msg
      msg := moveuidbody || trncReal(x) || " " ||
	       trncReal(y) || " " || trncReal(z) || " " || trncReal(angle)
      put(grouping, msg)
      # WSync()
   end

initially(uid_in, x_in, y_in, z_in, ang) #face_path_in)
 
    scolor:="red"
    pcolor:="red"
    shcolor:="red"
    a_name:="guest"
    X:= 0
    Y:= 0
    Z:= 0
    xsize:=0
    ysize:=0
    zsize:=0
    height:= 0
    origx := 0
    origy := 0
    origz := 0
    sex := "m"
    face_path := &null #face_path_in
    face := "smily.gif"
    hdchoice:=1
$ifdef _UNIX
   ps := "/"
$else
   ps := "\\"
$endif
   # from the OLD avatar class
   uid   := uid_in
   moveuid := "\\move " || uid || " "
   moveuidbody := moveuid || "body "

   x := x_in                   # avatar's cooridinates
   y := y_in                 #   previously named origx, origy, origx
   z := z_in

   lx     := 0.0
   lz     := 0.0

   angle := ang #aky                 # avatar orientation angle
                                #   previously named cam_angle
   fint  := 0
   rarm  := 0
   larm  := 0
   render_set := set()           # capture display list elts for \delavatar
   isRendered := &null
   grouping := list()
   
   isPointing:=0
   vertical_ptr:=0
   horizontal_ptr:=0        #  angles for pointing

   # for object interactions
   /object:=[]        # object list
   chair:=&null      # chair to sit on
   sittingDown:=0    
   body_part := ""
 #  position := ""
   /currObjID:=0
   /Objects := []
   /currObjsID := 0

   penSize :=  0.35
end
#
# Class: phead
# This class just renders the head
#
class phead : avatarParts( 
   headx,heady,headz,headr,             # Head coodinate, radius of the head 
   neckx,necky,neckz,neckh,neckt,neckb, # Neck coor. and other info. on neck
   m1,m2,m3,m4,     # stuff for talking effect
   counter,
   ch,
   romx,romy, romz  # rotation matrix for x and z axis
   ,headWS
)

   method render(face, color, choice)
    local win3d 
      
    ch:=choice
    win3d := !gui::dispatcher.subwins
    headWS := WSection(win3d, "head")
    
    PushMatrix()
	Translate(0.0, penSize -1.7 , 0.0)
        WAttrib("texmode=off")
      	# head   at the top of the body 1.5*penSize
        Translate(0.0, 1.75*penSize , 0.0)
	PushMatrix()
    	    Scale(1.0, 0.8, 1.0)
    	    Fg("black")
    	    DrawSphere( 0.0, 0.0 ,0.0,  penSize*0.625 )    # head
    	PopMatrix()
    	
    	PushMatrix()
	    Rotate(110.0, 1.0, 0.0, 0.0)
    	    Scale(1.0, 1.0, 0.2 )
    	    Fg("yellow")                            # beak
    	    DrawCylinder(0.0, penSize*0.25, 0.0, penSize*0.667, penSize*0.4, penSize*0.167)
            DrawCylinder(0.0, penSize*0.25, penSize*0.08, penSize*0.667, penSize*0.4, penSize*0.167)
    	PopMatrix()
    	
    	PushMatrix()        # left eye
    	    Rotate(-12.0, 1.0, 0.0, 0.0 )
	    # eyes are a bit higher than the center of the head
    	    Rotate( -20.0, 0.0, 1.0, 0.0 )
	    # go 20 degrees to the left for the left eye
    	    Translate(0.0, 0.0, penSize*0.588)
	    # move to the surface of the head    	   
	    Scale(1.0, 1.0, 0.6)
	    Fg("black")
	    DrawSphere( 0.0,  -penSize*0.06 ,0.0,  penSize* 0.10 )
     	    Scale(0.5, 1.0, 0.2)
    	    Fg("white")
	    DrawTorus( 0.0, 0.0, penSize*0.1, penSize*0.083, penSize*0.167 )
    	PopMatrix()
    	
    	PushMatrix()     # right eye
	    Rotate( -12.0, 1.0, 0.0, 0.0 )
	    Rotate(  20.0, 0.0, 1.0, 0.0 )  # same as left eye except for this rotation angle!
	    Translate( 0.0, 0.0, penSize*0.588)
	    Scale(1.0, 1.0, 0.6)
	    Fg("black")
	    DrawSphere( 0.0,  -penSize*0.06 ,0.0,  penSize* 0.10 )
    	    Scale( 0.5, 1.0, 0.2)
    	    Fg( "white")
    	    DrawTorus( 0.0, 0.0, penSize*0.1, penSize*0.083, penSize*0.167 )
        PopMatrix()
    	
    PopMatrix()   
    WSection(win3d)
   end

initially()
   counter:=0
   ch:=1
  headx := 0
   heady := 0.6
   headz := 0
   headr := 0.5
   neckx := 0
   necky := 0
   neckz := 0
   neckh := 0.3
   neckt := 0.1
   neckb := 0.1
end

#
# Class: pbody
# This class just renders the body
#
class pbody : avatarParts(
   bodyWS
)
   method render(name, scolor, sex, pcolor, letter_path, ps)
    local win3d
   
    win3d := !gui::dispatcher.subwins
    bodyWS := WSection(win3d, "body")
	
    PushMatrix()
	Translate(0.0, penSize -1.7 , 0.0)
        #  body   sphere.. scaled 1.5 along the y axis		
        Scale(1.0,1.5,0.8)
    	Fg("black")
    	DrawSphere(0.0,0.0, 0.0, penSize)
	Fg("white")
    	DrawSphere(0.0,0.0, penSize*0.04, penSize)
	createNameTag(name,penSize * 1.5 ,0,penSize * 0.4, penSize, letter_path, ps)
    PopMatrix()
    WSection(win3d)
   end
initially()

end

#
# Class: parm
# This class renders the wings
#
class parm : avatarParts (          
 
   armWS
   )
   #
   #  render
   #  Purpose: to render the left arm of the avatar
   #
 method render(side,color,scolor)
   local win3d
   
   win3d := !gui::dispatcher.subwins
   armWS := WSection(win3d, "arm")
   PushMatrix()
	Translate(0.0, penSize -1.7 , 0.0)

        Translate(0.0, penSize*0.75, 0.0)
       
        if side == "r" then
           Rotate(100.0, 0.0, 0.0, 1.0)    # right wing    	    
        else
	   Rotate(-100.0, 0.0, 0.0, 1.0)    # left wing    	    

        Scale(1.0, 1.0, 0.4 )
	initRMatrix()    	
	Fg("black")
    	DrawCylinder(0.0, 0.0, 0.0, penSize*2.0, penSize*0.71, penSize * 0.10)
    PopMatrix()
    WSection(win3d)
   end

initially()

end

#
# Class: pleg
# This class renders the legs
# 
#
class pleg : avatarParts (                    
   rot,legWS
   )

  method render(side,pcolor,shcolor)
   local win3d

   win3d := !gui::dispatcher.subwins
   legWS := WSection(win3d, "leg")
   PushMatrix()
	Translate(0.0, penSize -1.7 , 0.0)
        if side == "r" then 
	    Translate( penSize * 0.3, -penSize, 0.0)
	else 
	    Translate(-penSize * 0.3, -penSize, 0.0)

	initRMatrix()	
	Fg("white")
    	DrawCylinder(0.0, -penSize * 0.7 , 0.0, penSize * 0.5, penSize*0.15, penSize*0.17)
        Rotate(90.0, 1.0, 0.0, 0.0)
	Translate(0.0, -penSize * 0.15, penSize * 0.7)
	Scale(1.0, 1.0, 0.1 )
        
        if side == "r" then 
          Rotate(-25.0, 0.0, 0.0, 1.0) # right foot
        else
          Rotate( 25.0, 0.0, 0.0, 1.0) # left foot    
 
	Fg("yellow")
    	DrawCylinder( 0.0 , 0.0 , 0.0 , penSize* 0.7, penSize*0.20, penSize/3.0)
    PopMatrix()
    WSection(win3d)
   end
   method incrementAngle()
      rot.angle:=rot.angle+1
   end
   method decrementAngle()
      rot.angle:=rot.angle-1
   end
   method setAnglePart(ang)
      rot.angle:=ang
   end
initially()
 
end
