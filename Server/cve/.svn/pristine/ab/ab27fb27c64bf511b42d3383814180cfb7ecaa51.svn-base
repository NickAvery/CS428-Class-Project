# class Portal represents a teleporting connection between rooms
# this will be sub-class of class Opening which itself is based off the
# opening's location and not the rooms' locations
#

global world

class Portal:Opening(x1, y1, z1, x2, y2, z2, 
                     rotator,
                     openness, # 0<=o<=1: render angle must be >.67 to walk thru
                     texturec, tx,
                     renderedCounter,#a counter to determine rendering of doors
                     dle,    #display list entry
                     dirnum  #which tells the direction north,south,east or west
		   
		     )


   method add_room(r) 
      put(rooms, r)
   end

   method other(room)  
      local r

      every r := !rooms do if r.name ~=== room.name then return r
      write("other room failed")
   end
   
   method allows(px,pz)  
      if ( ( plane = 3 )            &        # z plane
       ( x1+0.06 < px < x1 + width-0.06 )   &
       ( abs( z1 - pz ) < collide+ 0.10) ) then {
	  return
          }
      if ( ( plane = 1 )            &        # x plane
	  ( z1+0.06 < pz < z1 + width-0.06 )   &
	  ( abs( x1 - px ) < collide + 0.10) ) then
	 return
      if ( ( plane = 3 )            &        # z plane
       ( x2+0.06 < px < x2 + width-0.06 )   &
       ( abs( z2 - pz ) < collide+ 0.10) ) then {
	  return
          }
      if ( ( plane = 1 )            &        # x plane
	  ( z2+0.06 < pz < z2 + width-0.06 )   &
	  ( abs( x2 - px ) < collide + 0.10) ) then
	 return
      fail
   end  
   
   method deRender()
      local len, i, item, win3d, dispList

      #If door is not rendered then return
      renderedCounter -:= 1
      #write("derender ", image(id), " goes to ", renderedCounter)
      if renderedCounter ~= 0 then return

      if /dle then stop("nothing to derender in door.icn")
      dle.skip := 1

      return
   end 
      
   method render()  
      local dispList, win3d, i, item, oldtexmode

      # If the door is already rendered then don't render it again.
      renderedCounter +:= 1
      if renderedCounter ~= 1 then return
      if \dle then { dle.skip := 0; return }

      dle := WSection(&window, "door" || id)

      if self.opMode == ("c"|"C") then {
	 if world.current_texture ~=== texturec then {
	    world.current_texture := texturec
	    }
         }
      
      oldtexmode := WAttrib("texmode")
      if tx := Texture(\texturec) then {
	 Texcoord(1,0, 0,0, 0,1, 1,1)
         } 
      else {
         WAttrib("texmode=off","fg=very light yellow")
	 }

      if plane = 1 then {
         PushMatrix()
         Translate(x1, y1, z1)
         PushMatrix()
         Translate(0, height/2.0, -width/2.0)
         Translate(0, 0, width)
         FillPolygon(0, -height/2.0, -width/2.0,
                     0, -height/2.0, width/2.0,
                     0, height/2.0, width/2.0,
                     0, height/2.0, -width/2.0)
         PopMatrix()
         PopMatrix()
         PushMatrix()
         Translate(x2, y2, z2)
         PushMatrix()
         Translate(0, height/2.0, -width/2.0)
         Translate(0, 0, width)
         FillPolygon(0, -height/2.0, -width/2.0,
                     0, -height/2.0, width/2.0,
                     0, height/2.0, width/2.0,
                     0, height/2.0, -width/2.0)
         PopMatrix()
         PopMatrix()
      }
      else {
         PushMatrix()
         Translate(x1, y1, z1)
         PushMatrix()
         Translate(-width/2.0, height/2.0, 0)
         Translate(0, 0, width)
         FillPolygon(0, -height/2.0, -width/2.0,
                     0, -height/2.0, width/2.0,
                     0, height/2.0, width/2.0,
                     0, height/2.0, -width/2.0)
         PopMatrix()
         PopMatrix()
         PushMatrix()
         Translate(x2, y2, z2)
         PushMatrix()
         Translate(0, height/2.0, -width/2.0)
         Translate(0, 0, width)
         FillPolygon(0, -height/2.0, -width/2.0,
                     0, -height/2.0, width/2.0,
                     0, height/2.0, width/2.0,
                     0, height/2.0, -width/2.0)
         PopMatrix()
         PopMatrix()
      }
      if oldtexmode===(0|"off") then WAttrib("texmode=off")
      else WAttrib("texmode=on")
      WSection(&window)

      return
   end  # method render()


   initially(opMode, world, dispatcher, xx1, yy1, zz1, xx2, yy2, zz2, collide_in, wd, ht)
   self$Opening.initially(opMode,xx1, yy1, zz1, collide_in) # (x, y, z)
   # be sure x,y,z,w,h,t  are floats
   
   x1 := xx1
   y1 := yy1
   z1 := zz1
   x2 := xx2
   y2 := yy2
   z2 := zz2

   # / x := 0.0
   # / y := 0.0
   # / z := 0.0
   width := wd
   / width     := 1.0   # default = 1 meter
   height := ht
   / height    := 2.6   # default = 2.6 meters

   texturec :=  "dat/textures/portal.gif" # default texture for this room

   # textures[tex] := texture(tex)

   openness := 1.0
   direction := 999
   delt := 0.0
   open_angle := 999
   renderedCounter := 0
   plane := 3
end # class Door
