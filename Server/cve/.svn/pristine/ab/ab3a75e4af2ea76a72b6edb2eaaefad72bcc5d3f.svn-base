##############################################################################
#
#  Project:  Collaborative Virtual Environment (CVE)
#
#  File:     cSceneGr.icn - ClientSceneGraph
#
#  Subject:  Class that provides methods for handling Creation,
#            Storage and Management of the Scene Graph for the CVE
#
#  Author:   Akshay V. Dabholkar
#
#  Date:     February 27, 2005
#
##############################################################################
#
#   This file is in the public domain.
#
##############################################################################
#
#     This class generates a Scene Graph for the entire CVE based on the
#  rooms as nodes and doors, openings, windows as edges. 
#
#     It also provides an array of methods that help manipulate the graph
#  and retrieve the information intelligently.
#
##############################################################################

$include "../common/defaults.icn"
link basename

class ClientSceneGraph : CVESceneGraph()
#
# SHARED Methods (15) (Inherited)
#  method generateSceneGraph()
#  method printGraph()
#  method createEdgeName() 
#  method determineCurrRoom()
#  method getAdjacencyList()
#  method clearVisited()
#  method checkRights()
#  method storeToDisk()
#  method populateEdgeTblFrmNode()
#  method getAdjDynamicStateForNode()
#  method getDynStateForNode()
#  method getEdgeStates()
#  method getAvatarStates()
#
# CLIENT Methods (4)
#  method updateDynamicState()
#  method handleNodeState()
#  method printRenderedNodes()
#  method deRenderNodes()
#

# CLIENT Methods  
   #
   method putRoomInWorld(r)
      put(world.Rooms, r) 
   end
   
   method assignCurrRoom(r)
      world.curr_room := r
   end
   
   #  
   # Called by client in response to the dynamic state string
   # from the server
   #
   # @param strDynstate     The dynamic state string of the form returned 
   #         by getAdjDynamicStateForNode()
   # @param TupdatedNodes   Needed to determine the nodes that need to 
   #         rendered after updating their dynamic states
   # @param TupdatedAvatars Needed to determine the avatars that need to 
   #         rendered after updating their dynamic states
   #
   method updateDynamicState(strDynstate, TupdatedNodes, TupdatedAvatars)
      local strNodeState

      #checkRights("c","updateDynamicState")    
      if not strDynstate[-1] == "|" then
	 view.write_to_chat_win("Warning does not end with |:\n",image(strDynstate))
      strDynstate ? {
	 while strNodeState := tab(find("|")) do { 
	    handleNodeState(strNodeState, TupdatedNodes, TupdatedAvatars)
	    move(1)	    # Skip |
	    }
	 }
   end
   
   #
   # Here we directly modify the edgesTable as the per node exits list has
   # references to these table values which get modified automatically.
   # @param strNodeState   The dynamic state string of the form returned 
   #              by getDynStateForNode() 
   # @param TupdatedNodes     Semantics same as previous function 
   #
   # @param TupdatedAvatars   Semantics same as previous function
   #                    
   method handleNodeState(strNodeState, TupdatedNodes, TupdatedAvatars)
      local nodeName, strEdgeStates, strAvtStates, strEdgeName, avtName
      local openness, delta, direction, node, x, y, z, angle, t

      #checkRights("c","handleNodeState")    

      strNodeState ? {
	 nodeName := tab(find("{"))
	 move(1)
	 # Populate the list with the node thats going to be updated
	 if not(member(TupdatedNodes,nodeName)) then
	    TupdatedNodes[nodeName] := \self.nodesTable[nodeName]

	 #
	 # &subject=strNodeState
	 #
	 if ="edges" then {

	    move(1) 	    # Skip (

	    if strEdgeStates := tab(find(",")) then strEdgeStates ? { 
	       # strEdgeStates=edgename[openness delta direction]...)

	       while strEdgeName := tab(find("[")) do {
		  #write("strEdgeName: ",strEdgeName)

		  move(1) 		  # Skip [
		  openness := cveBuilder.parseval(tab(upto(' \t')))
		  tab(many(' \t'))
		  delta := cveBuilder.parseval(tab(upto(' \t')))
		  tab(many(' \t'))
		  direction := cveBuilder.parseval(tab(find("]")))
		  edgesTable[strEdgeName].openness   := openness
		  edgesTable[strEdgeName].delt := delta
		  edgesTable[strEdgeName].direction  := direction

		  move(1)		# Skip ]
		  }
	       }
	    }
	 else 
	    stop("Message Syntax Error: Need <edges> after " || nodeName,"{")

	 move(1)			# Skip )

      #
      # &subject=strNodeState
      #
      if ="avatars" then {

	 move(1)			# Skip (

	 if strAvtStates := tab(find("}")) then strAvtStates ? { 
	    # strAvtStates=avatarname[x y z angle]...)

	    while avtName := tab(find("[")) do {
	       # write("avtName: ",avtName)

	       move(1)				# Skip [
	       node := cveBuilder.parseval(tab(upto(' \t')))
	       tab(many(' \t'))
	       x := cveBuilder.parseval(tab(upto(' \t')))
	       tab(many(' \t'))
	       y := cveBuilder.parseval(tab(upto(' \t')))
	       tab(many(' \t'))
	       z := cveBuilder.parseval(tab(upto(' \t')))
	       tab(many(' \t'))
	       angle := cveBuilder.parseval(tab(find("]")))

	       move(1)				# Skip ]
	       nodesTable[nodeName].Tavatars[avtName] := t := table()
	       t["node"] := node
	       t["x"] := x
	       t["y"] := y
	       t["z"] := z
	       t["angle"] := angle

	       # Populate the list with the avatar thats going to be updated
	       if not member(TupdatedAvatars,avtName) then {
		  if / (avatarTable[avtName]) then {
		     avatarTable[avtName] := t
		     }
		  TupdatedAvatars[avtName] := \self.avatarTable[avtName]
		  }
	       }
	    }
	 }
      else 
	 stop("Message Syntax Error: Need <avatars> after ,")
      }
   end 
   
    
   #
   # This method just checks if atleast one node of the CVE is rendered
   # @return the number of nodes that are rendered
   # @param outType  1: prints the node names, 2: returns the node count,
   #        3: returns a table populated with the rendered  nodes
   method printRenderedNodes(outType)
      local node, count := 0, TrenderedNodes := table()

      #checkRights("c","printRenderedNodes") 
      every node := !nodesTable do {

	 if \(node.isRendered) then {
	    case outType of {
	       1: write(node.name, " ")
	       2: count +:= node.isRendered
	       3: TrenderedNodes[node.name] := node
	       }
	    } 
         }
      if outType = (1|2) then 
	 return count
      else 
	 return TrenderedNodes
   end
   
   #
   # This method derenders the nodes when necessary based on the current node
   #
   method deRenderNodes(currNodeName,TnodesToBeRendered,TavatarsToBeRendered)
      local renderCount:=0, deRenderCount:=0, c2:=0, edgeName, derenderset
      local TadjList:=table(), node,node1, Edge, TrenderedNodes := table()

      #
      # Get the current count of rendered nodes
      #
      renderCount := printRenderedNodes(2)

      if renderCount > 0 then {

	 # Calculate the number of nodes to be derendered
	 if (deRenderCount := renderCount-MAX_NODES_ACTIVE) <= 0 then {
	    view.write_to_chat_win("Nothing to be derendered at the moment <",
            deRenderCount,">")
	    return
	    }

	 #
	 # Get the adjacency upto 4 levels so those nodes should not be 
	 # selected for derenderimg
	 #
	 getAdjacencyList(currNodeName, TadjList, MAX_DERENDER_LEVEL, 1)

	 # 
	 # Don't forget to add the current node. otherwise the user will be
	 # standing in VOID
	 #
	 TadjList["ROOT"] := \self.nodesTable[currNodeName]

	 #
	 # Start derendering until deRenderCount falls to 0
	 #
	 # write("Maximum ",deRenderCount," nodes will be Derendered...")
	 TrenderedNodes := printRenderedNodes(3)

	 #write("Preserving ",*TadjList," nodes in adjacency..")

	 #
	 # Derender the nodes that don't appear in the ToBeRendered set.
	 #
	 every node := !TrenderedNodes do {
	    if not member(TadjList, node.name) then
	       node.deRender()
	    }

	 # note: derendering edges is handled implicitly as nodes derender
         }
      else return
   end
   
initially(dyn,logging) 
   CheckForUpdates()
   ApplyUpdates()
   self$CVESceneGraph.initially()
   genDyn := dyn
   cltSceneGraph := self			# a global reference
   if \logging then
      logHandler := logging 
   else 
      logHandler := Logger()
   cveBuilder := CVEBuilder("c", self, world, gui::dispatcher)
   generateSceneGraph()
   WcveBuilder := cveBuilder
end

procedure CheckForUpdates()
   local clientFileName, toSend
   if not stat(DAT || PS || "ClientUpdate.tim") then
   {
      if clientFileName := open(DAT || PS || "ClientUpdate.tim", "w") then {
         write(clientFileName, "0")
         close(clientFileName)
         }
   }
   if clientFileName := open(DAT || PS || "ClientUpdate.tim", "r") then
   {
      toSend := "\\checkforupdates " || read(clientFileName)
      session.Write(toSend)
      close(clientFileName)
      if clientFileName := open(DAT || PS || "ClientUpdate.tim", "w") then {
         write(clientFileName, &now)
         close(clientFileName)
         }
   }
   else view.write_to_chat_win("checkforupdates() didn't work")
end

procedure ApplyUpdates()
   local rad, saveDatFile, breakPoint, saveDatFileName, saveDatFileData,
         newFileName, newFilePath

   rad := session.Read()
   while rad ~=== "BREAK" do {
      if rad === "" then 
         rad := session.Read()
      else {
         breakPoint := find("\t", rad)
         if /breakPoint | /rad then break
         saveDatFileName := rad[1:breakPoint]
         saveDatFileData := rad[breakPoint+1:0]
         saveDatFileData := map(saveDatFileData, "$", "\n")
         if saveDatFile := open(saveDatFileName, "w") then {
            write(saveDatFile, saveDatFileData)
            close(saveDatFile)
	    }
         else {
	    # Couldn't open saveDatFileName in specified path.
	    # Try making the requested directory first.
            newFileName := basename(saveDatFileName)
            newFilePath := saveDatFileName[1:*saveDatFileName - *newFileName]
            mkdir(newFilePath)
            if saveDatFile := open(saveDatFileName, "w") then {
               write(saveDatFile, saveDatFileData)
               close(saveDatFile)
               }
            else
	       view.write_to_chat_win("cannot update \"" || newFileName ||"\"")
         }
         rad := session.Read()
      }
   }
end
