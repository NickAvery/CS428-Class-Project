##############################################################################
#
#   Project:  Unicron Collaborative Virtual Environment (uCVE)
#
#   File:     ServerCVESceneGraph.icn
#
#   Subject:  Class that provides methods for handling Creation, Storage and
#             Mannagement of the Scene Graph for the CVE
#
#   Author:   Akshay V. Dabholkar (adabholk@cs.nmsu.edu)
#
#   Date:     February 27, 2005
#
##############################################################################
#
#   This file is in the public domain.
#
##############################################################################
#
#   This class generates a Scene Graph for the entire CVE based on the rooms
#   as nodes and doors, openings, windows as edges.
#
#   It also provides an array of methods that help manipulate the graph an
#   retreive the information intelligently.
#
##############################################################################
#
#   Edges:  ServerGraphModel
#
##############################################################################

$include "../common/defaults.icn"


class ServerCVESceneGraph : CVESceneGraph()
#
#   SHARED Methods (15) (Inherited)
#   method generateSceneGraph()
#   method printGraph()
#   method createEdgeName()
#   method determineCurrRoom()
#   method getAdjacencyList()
#   method clearVisited()
#   method checkRights()
#   method storeToDisk()
#   method populateEdgeTblFrmNode()
#   method getAdjDynamicStateForNode()
#   method getDynStateForNode()
#   method getEdgeStates()
#   method getAvatarStates()
#

# SERVER Methods (8)
#   method getAvatarState()
#   method updateAvatarState()
#   method updateEdgeState()
#   method updateBlackboardState()          To be implemented
#   method handleAvatarNodeChange()
#   method getAvatarsForEdgeMove()
#   method getAvatarsForAvtMove()
#   method populateAvtTblFrmNode()
#   method pulse()

# SHARED Methods (15)

    #
    # Beware of the Fragile Base Class Problem and Sibling Call Phenomena.
    # This will be a Polymorphic call and actual method is implemented in
    # derived class
    #
    method getRoom(r)
        return r.name
    end

# SERVER Methods

   #
   # Populates the avatar state from the avatarTable into a list
   #
   method getAvatarState(avatarName)
      local avtState := [], state := table()

      if \ (state:= self.avatarTable[avatarName]) then {
	 avtState := [state["x"],state["y"],state["z"],state["angle"],
                      state["node"] ]
         }
      return avtState
   end

   #
   # Update the avatar state
   # If the current room (as returned by determineCurrRoom()) is not already defined, this immediately stops;
   # else it modifies the field avatarTable to be a new table cntaining the avatar's information, and also modifies that
   # room's Tavatars field (where is the avatar removed when it leaves a room? -- zzzbap)
   #
   #
   method updateAvatarState(avatarName, x, y, z, angle, node, TonlineUsers,
                                                moveCounter:integer:MAX_MOVES)
      local currNodeName, i := 0, j:= 0

      #
      # Currently can't save the avatar state when it crosses the exit as at
      # that time as its current node cannot be determined. So I save only
      # when it is logically in a room.
      #
      #while /(self.nodesTable[currNodeName]) do {
      #   currNodeName := determineCurrRoom(x-i,z-j)
      #   i +:= 1
      #   j +:= 0.5
      #}
      currNodeName := determineCurrRoom(x-i,z-j,y)
      if /(self.nodesTable[currNodeName]) then return
      #write("currNodeName:",currNodeName, "|i: ", i)
      #
      # Update the global avatar table, this will update
      # the per node avatar table too, as structures are
      # stored by reference
      #
      self.avatarTable[avatarName] := table()
      self.avatarTable[avatarName]["name"] := avatarName
      self.avatarTable[avatarName]["node"] := currNodeName
      self.avatarTable[avatarName]["x"] := x-i
      self.avatarTable[avatarName]["y"] := y
      self.avatarTable[avatarName]["z"] := z-j
      self.avatarTable[avatarName]["angle"] := angle

      #
      # To ensure the avatars are populated to the per node table in case
      # when no avatar file exists
      #
      self.nodesTable[currNodeName].Tavatars[avatarName] :=
	  self.avatarTable[avatarName]


      #
      # Store all the avatars in the current node containing the avatar
      #
      if moveCounter >= MAX_MOVES then {
	 #
         # Save only that nodes state
         #
	 storeToDisk(2,[currNodeName],[],TonlineUsers)
	 logHandler.logit("updateAvatarState(): Updated "||avatarName||
			  "'s state: node="||currNodeName||
			  " x="||x||" y="||y||" z="||z|| " angle="||angle)
         }
   end

   #
   # Here the global edgesTable and the per node table should be kept
   # consistent which is automatic due to references. So the per node
   # edge table is also automatically updated
   # @param edgeName
   # @param openness   0.0 <= real <= 1.0
   # @param delta 0.0 <= real <= 90.0
   # @param direction  -1,1
   #
   method updateEdgeState(edgeName, openness, delta, direction)
      local currNodeName

      if / (edgesTable[edgeName]) then {
	 write(&errout, "null edgstat ", image(edgeName))
	 fail
         }

      #
      # No need to update Openings
      #
      if type(self.edgesTable[edgeName]) == "Opening__state" then
	 return

      if openness > 0.0 & delta > 0.0 then openness := 1.0

      self.edgesTable[edgeName].openness := openness
      self.edgesTable[edgeName].delt := delta
      self.edgesTable[edgeName].direction := direction

      #
      # Currently storing every door motion to the FS.
      #
      storeToDisk(3,[],[edgeName],table()) # Save only that nodes state
      #logHandler.logit("updateEdgeState(): Updated "||edgeName||
      #               "'s state: openness="||openness||" delta="||delta)
   end

   method updateBlackboardState()

   end

   #
   # Deletes Avatar from one node and adds it to adjacent other node
   # Here we assume that the avatar state is automatically updated
   # during moves.
   # @param avatarName         String
   # @param oldNodeName        String
   # @param newNodeName        String
   #
   method handleAvatarNodeChanges(avatarName, oldNodeName, newNodeName,
                                                                TonlineUsers)
      local avatarState, oldNode, oNodeName, nNodeName

      #
      # Update the current containing node in the universal avatar table
      #
      self.avatarTable[avatarName]["node"] := newNodeName

      #
      # If both are same then no need to do the store as it is already done
      # at the end
      #
      if oldNodeName ~== newNodeName then {
	 #
         # Delete the avatar from the old node
         #
	 oldNode := nodesTable[oldNodeName]
	 if /oldNode then {
	    write(&errout, "oh no, not a third time")
	    if find(" " | "-", oldNodeName) &
	       \ (nodesTable[oNodeName := map(oldNodeName," -","__")]) then {
	       oldNodeName := oNodeName
	       oldNode := nodesTable[oldNodeName]
	       }
	    }
         delete(self.nodesTable[oldNodeName].Tavatars, avatarName)
	 storeToDisk(2,[oldNodeName],[],TonlineUsers)
         }

      #
      # Add the avatar to the new node
      #
      if / (self.nodesTable[newNodeName]) then {
	 write(&errout, "nonexistant new node ", image(newNodeName))
	 if find(" " | "-" , newNodeName) &
	    \ (nodesTable[nNodeName := map(newNodeName," -","__")]) then {
	    newNodeName := nNodeName
	    }
	 else {
	    system("mail jeffery@cs.uidaho.edu -s " ||
		   "\"nonexistent node " || newNodeName || "\" </dev/null")
	    return
	    }
         }

      nodesTable[newNodeName].Tavatars[avatarName] := avatarTable[avatarName]
      storeToDisk(2,[newNodeName],[],TonlineUsers)

      #
      # Save the new states of the respective nodes
      #
      #if (oldNodeName == newNodeName) then {
      #   storeToDisk(2,[newNodeName])
      #} else
      #   storeToDisk(2,[oldNodeName,newNodeName])
   end

   #
   # This function returns the avatar table to
   # send door movements to.
   # It calculates the avatars in the connecting nodes and additionally from
   # the nodes where there are open edges from the two nodes. This is done
   # only upto 1 level
   #
   method getAvatarsForEdgeMove(edgeName)
      local avtTbl := table(), avtName, nodeEdge, currNode, nextNode

      if / ( \ self.edgesTable[edgeName]) then {
	  write(&errout, "null edgesTable for ", image(edgeName))
      }
      else
      every currNode := !(\(\self.edgesTable[edgeName]).rooms) do {

	 #
	 # Add all avatars in the current node
	 #
	 populateAvtTblFrmNode(avtTbl,currNode)

	 #
	 # Check to see if more avatars need to be added from connecting
	 # nodes and add if necessary
	 #
	 # Check for each edge for the node
	 #
	 every nodeEdge := !currNode.exits do {
	    #
	    # Add the avatars only if the edge is active ("open" / > 0.0)
	    #
	    if nodeEdge.openness > 0.0 then {

	       #
	       # Get the child node for current node
	       #
	       nextNode := (nodeEdge.other(currNode))

	       #
	       # One redundant check can not avoided as one of
	       # the nextNode values will be from  the edge's own
	       # rooms list.
	       #
	       # Add all avatars in the node
	       #
	       populateAvtTblFrmNode(avtTbl,nextNode)
	       }
            }
         }
      return avtTbl
   end

   #
   # This function returns the avatar table to
   # send avatar movements to.
   # It calculates the avatars in the connecting nodes if their respective
   # edges are active.
   # This is done for only 1 level
   #
   method getAvatarsForAvtMove(avatarName)
      local avtTbl:=table(), avtName, nodeEdge, currNodeName, cnn,
	  currNode, nextNode

      currNodeName := self.avatarTable[avatarName]["node"]
      currNode := self.nodesTable[currNodeName]
      if /currNode then {
	 write(&errout, "oh no, not again")
	 if find(" " | "-", currNodeName) &
	    \ (currNode := nodesTable[cnn := map(currNodeName," -","__")]) then {
	    currNodeName := avatarTable[avatarName]["node"] := cnn
	    }
	 }
      
      #
      # Add all avatars in the current node
      #
      populateAvtTblFrmNode(avtTbl,currNode)

      #
      # Check to see if more avatars need to be added from connecting nodes
      # and add if necessary
      #
      # Check for each edge for the node
      #
      every nodeEdge := !currNode.exits do {
	 #
	 # Add the avatars only if the edge is active ("open" / > 0.0)
	 #
	 if nodeEdge.openness > 0.0 then {
	    #
	    # Get the child node for current node
	    #
	    nextNode := (nodeEdge.other(currNode))

	    #
	    # Add all avatars in the node
	    #
	    populateAvtTblFrmNode(avtTbl,nextNode)
            }
        }
        return avtTbl
    end

    #
    # Add all avatars from the node to the avtTbl
    # Here we are passing the avtTbl too as we just want to add to the table
    # not return a new table
    # @param avtTbl     Table       The table to be populated with
    # @param node       Room        The node from which to populate
    #
    method populateAvtTblFrmNode(avtTbl, node)
        local avtName := ""

        #
        # every avtTbl[avtName:=key(node.Tavatars)] := node.Tavatars[avtName]
        # (Compilcated short form)
        #
        every avtName := key(node.Tavatars) do {
            if \avtName ~== "system" then {
                avtTbl[avtName] := node.Tavatars[avtName]
            }
        }
    end

    # Send every actor in the graph a heartbeat message. 
    method pulse_actors()
       local room, actor
       
       every room := !\nodesTable  do {
	 every actor := !room.actors do {
	    actor.heartbeat()
	 }	 
      }
    end

    # This is a badly named method -- we need to think about how to
    # cleanly separate this and the other actor methods from the scene
    # graph

    method notify_actors_of_arrival(nodeName, uid)
       local node, actor

       if not member(nodesTable, nodeName) then {
	  write("The node named " || nodeName ||" is unknown to the scene graph!")
	  fail
       }
       
       node := nodesTable[nodeName]
       every actor := !node.actors do {
	  actor.spotted(uid)
       }
    end

    method rssify(sock,name)
       local node := nodesTable[name]
       if /node then {
	  write("Unknown room")
       } else {
	  write("somethign with node")
       }
    end

    initially(dyn,logging)
        self$CVESceneGraph.initially()
	self.is_server := 1
    	self.genDyn := dyn
        logHandler := logging
        self.cveBuilder := CVEBuilder("s",self)
	self.services := Services()
        self.generateSceneGraph()
end
