class Services(ports, listen_sockets, attachs, handler_table,
arg # Argument    -- TODO this is a bletcherous hack!
)
    
   # Any pending input on the ports will get handed off and the port
   # re-opened
   method handle_pending()
      local sockets := []
      local pending := []
      local i, j
      local func

      every put(sockets, (!listen_sockets)[1])
      put(sockets, 0)
       
      if pending := select ! sockets  & *pending > 0 then {
	 every i := 1 to *pending do {	     
	    every j := 1 to *listen_sockets do {
	       if listen_sockets[j][1] === pending[i] then {
		  func := (\ ((\handler_table)[listen_sockets[j][2]]))
		  if func == "rss" then
		     rssify(listen_sockets[j][1], listen_sockets[j][2])
		  close(pending[i])
		  }
	       }
	    }
	 }
    end
			    
    method rssify(sock, port)
       /sock := arg
       write(sock, "Content-Type: text/html\n\n\n_
		   <html><head><title>Room</title></head>_
		   <body>An RDF view, if you squint at it.</body></html>");
       close(sock)
       open(":"||port, "nl") & put(listen_sockets, [sock, port])       
    end

    method associate(name, pattern,room)
       write("Associating "||image(name)||" and "||image(pattern)||
	     " with room "||image(room))
       /(attachs[name]) := []
       put(attachs[name], room)
   end

   method bind(attachment)
   local sock, port, handler

      port := attachment.port
      handler := attachment.handler

      write("the attachment "||image(attachment)||" is bound to " ||
	    image(attachs[attachment.name]))

      if /port then return
       
      sock := open(":" || port, "nl") & put(listen_sockets, [sock, port])
      if (port = 8080) then {
	 handler := "rss"   # Services_rssify
	 handler_table["8080"] := handler
	 }
      else {
	 # How to handle dynamic look up of a class? How would the linking work?
	 }
      write("After binding, listen_sockets is "||image(listen_sockets))
   end
    
initially(ports)
   listen_sockets := []
   attachs := table()

   every bind(Attach(!\ports))
   handler_table := table()
end
