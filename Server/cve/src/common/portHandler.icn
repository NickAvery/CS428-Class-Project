$include "defaults.icn"

class portHandler ( port_range, first_port, port_list, avatar_port_udp,
		    last_used_port )

   method getAvatarPort()
      return avatar_port_udp
   end

   method getNextPort()
      local i 
      
      # try to find a port that hasn't been used for a while.
      # OS usually doesn't free ports instantly, avoid using the 
      # last freed port if there are others available. (use circular queue)
      
      i := last_used_port+1
      while i < (first_port + port_range)  do {
	 # if the port is available then make it unavailable and return it
         if port_list[i] == 0  then  {
            # make it unavailable and return it
            port_list[i] := 1
	    last_used_port:=i
            return i
	    i+:=1
	    }
	 }

      # try again from the begining until the recently used port
      i := first_port
      while i < last_used_port  do {
	 # if the port is available then make it unavailable and return it
         if port_list[i] == 0  then  {
            # make it unavailable and return it
            port_list[i] := 1
            return i
	    i+:=1
	    }
	 }
	 

      # if no ports were found available then fail
   end

   method releasePort(num)
      # if the port to be released is within range then release it
      if first_port <= num < first_port+port_range then {
         port_list[num] := 0
         return num
	 }
   end

   method init_ports()
      every port_list[ first_port to (first_port +port_range-1)] := 0
   end

   initially
      avatar_port_udp := AVATAR_MOVE_UDP
      port_range := PORT_RANGE
      first_port := FIRST_PORT
      last_used_port:=first_port
      port_list := table(0)
      init_ports()
end
