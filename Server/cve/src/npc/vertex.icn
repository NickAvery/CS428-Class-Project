#
# vertex.icn - an NPC
#

global npcs, one_npc

# run n+5 npcs
procedure run_threads(n, com)
   local npc, user, concurrent
   /n := 0
   npcs := []

   concurrent :=  &features=="concurrent threads"
   if /concurrent then stop("Threads are not supported! shutting down...")


   every usr := ("npc" || (1 to n)) |
      "vertex" do #| "tux" | "sid" | "dog" | "tausha" do
      put(npcs, CustomNPC(["-user", usr ], concurrent, com))

   every wait((!npcs).npcthread)       

end

# run n+5 npcs
procedure run_processes(n)
   local npc, user
    /n := 0
   npcs := []
   every usr := ("npc" || (1 to n) | "vertex") do #| "tux" | "sid" | "dog" | "tausha" do
      put(npcs, system("./vertex -user " || usr , , , , "nowait"))

   wait()
   #every kill(!npcs, 0)
end

procedure main(av)
   local com, npc_mode, npc_n

   trap("SIGINT", SIGINT_handler)

  
   every i:=1 to *av do
      case av[i] of {
	 "-LTnpc" : {
	     com := &main
	     npc_mode := "T"
	     npc_n := integer(av[i+1])
	     }
	 "-Tnpc" : {
	     npc_mode := "T"
	     npc_n := integer(av[i+1])
	     }
	 "-Pnpc" :{
	     npc_mode := "P"
	     npc_n := integer(av[i+1])
            }
         } # case


   case npc_mode of {
      "T" :  run_threads(npc_n, com)
      "P" :  run_processes(npc_n)
      default:{
         one_npc := CustomNPC(av, com)
         }
      }

   write( " Done in main : good bye!")
end

#
# SIGINT_handler: handles CTRL-Cs to this process
#
procedure SIGINT_handler(s)
   if \npcs then{
      if integer(npcs[1]) then
         every kill(!npcs, 0)
      else
         every (!npcs).clean_and_exit()
     }
   #else
   #   one_npc.clean_and_exit()
   stop("\nReceived <CTRL-C> Done : good bye!")
end
