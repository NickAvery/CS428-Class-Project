#
# class Room would denote a block with bounding walls.
# Inside it are obstacles (affect movement) and decorations.
# Exits may include doors and openings, both connecting to
# other "Rooms".  Cooridoors are rooms with openings.
#
# Room forms a natural unit of visibility, especially
# when doors are closed.  This may reduce the amount
# of the world that needs to be rendered and the number
# of textures that have to be loaded.
#

class Room : Box(floor,
   ceiling,
   obstacles, # things that should stop movement
   decorations, # things to just look at
   tools, #things that can be held by an avatar
   exits, # x-z ways to leave room
   name,
   nearest_door,   #  avatar picks this one to open
   Tavatars,   #  The list of avatars in the room
   isVisited,      #  Used for cltSceneGraph traversal when there could be
                    #  cycles where the children may traverse back to parent
   isRendered,     #  Used to ensure that the same room is not rendered twice

       # Flag that determines whether the node is marked for derendering
   debug,           #  switch for detailed debug info
   dle,             # used for WSection
   x,y,z,l,w,h,
   dispatcher,
   directionTable, # This contains a table of nodes for each direction
   rangeTable,
   levelTable,      # This contains levels
   render_level,
   actors
   )

   # similar to disallows, except, no collide factor
   # used to keep the camera inside the walls
   method isinside(x,z,y)
      if /minx then calc_boundbox()
      if minx < x < maxx & minz < z < maxz & (/y | miny <= y <= maxy) then
	 return
   end

   method str_xyzlwh()
     return string(x) || "  " || string(y) || "  " || string(z) || "  " ||
            string(l) || "  " || string(w) || "  " || string(h)
   end


   #
   # move from this room to another room
   #
   method changeroom(new_room)
   local msg, av
      #  change rooms and notify other users

      if session.isUp() then {

	 #
	 # Send nodechange to the server to get the dynamic state for rendering
	 #
	 av := world.TAvatars[world.userId]
	 msg := "\\nodechange " || map(name," ","-")||
		" " || map(new_room.name," ","-")||
	       " " || av.X || " " || av.Y ||
	       " " || world.cam.lookx  || " " || world.cam.lookz
	 session.Write( msg )
      }

      world.curr_room := new_room

      if not (session.isUp()) then {
	 gui::dispatcher.do_netline("\\dynstate NOUPDATE")
	 }
   end

   # a room disallows a move if: (a) outside or (b) something in the way
   method disallows(x,z,y)  ## Room
      #  return disallows, fail allows

      local msg, o, e, dl, ttatt

      if /minx then calc_boundbox()

      # if we are comfortably within the room...

      if minx+collide <= x <= maxx-collide &
         (/y | (miny-(collide/2) <= y <= maxy+(collide/2))) &
	 minz+collide <= z <= maxz-collide then {
	 every o := !obstacles do {
	    if dl := o.disallows(x,y,z) then
	       return dl
	       }
	 # write("comfortably in the room and not an obstacle = allow = fail")
	 fail
	 }
      else if opMode == ("c"|"C") then {
         # write("not comfortably within room, allow only if an exit allows")
	 every e := !exits do {
	    if e.allows(x,z) then {
               if minx <= x <= maxx & minz <= z <= maxz then {
		  # allow but don't change, still in world.curr_room.name

		  every o := !obstacles do
		     if dl := o.disallows(x,y,z) then return dl
	          }
	       else if opMode == ("c"|"C") then {
                  if find("Portal", type(e)) then {
                     ttatt := e.other(self)
                     world.nsh_dialog.teleport_toroom(ttatt.name)
                  }
                  else{
   		     changeroom(e.other(self))}
	          }
	       fail
	       }
            }
	 return
         }
      return
   end  # method disallows ## Room

   method UpdateRenderedNode()
      floor.UpdateRenderedNode()
      ceiling.UpdateRenderedNode() 
      every (!walls).UpdateRenderedNode()
   end

   method render()  ## Room
      local dispList, win3d, i, item, a

      if \dle then {
          dle.skip := 0
          every a := !obstacles do {
              if find("Chair",image(a)) then a.render(render_level)
              if find("Table",image(a)) then a.render(render_level)
              if find("Computer",image(a)) then a.render(render_level)
          }
          every a := !tools do {
              if find("Pen",image(a)) then a.render(render_level)
          }
          return
      }

      win3d := !dispatcher.subwins
      dle := WSection(win3d, name)
      # Set the rendered flag as true
      isRendered := 1
      WAttrib("texmode=on")

      every  \(!exits).render(render_level)

      floor.render(render_level, 1)
      ceiling.render(render_level, 1)

      renderwalls()

      every (!obstacles).render(render_level)
      every (!decorations).render(render_level)
      every (!tools).render(render_level)
      WSection(win3d)
      return
   end

   method renderwalls()
      # first wall's texok is false; rest is true
      walls[1].render(&null, 1, &null)
      every walls[2 to *walls].render(&null, 1, 1)
   end

   method deRender()
      local len, i,temp,ctr, item, win3d, dispList, door, derenderset

      # Set the rendered flag to false
      isRendered := &null

      if \dle then {
	 dle.skip := 1
	 return
	 }

stop("deRender?")

    end # method deRender()

# figure out what wall this opening is in, and tear a hole in it,
# for example, find the wall the opening is in,
# remove that wall, and replace it with three sub-pieces of wall
   method add_opening(d, check)  ## Room
      local c, i ,w, w2, w3, jj
      # write("calling add_opening to ", name)
      /check := 0
      if find("Portal", type(d)) then {
         if name === d.rooms[1].name then {
            d.x := d.x1
            d.y := d.y1
            d.z := d.z1
         }
         if name === d.rooms[2].name then {
            d.x := d.x1
            d.y := d.y1
            d.z := d.z1
         }
      }            
      # list walls can be modified inside the loop, but doing so
      # gives "interesting" generator behavior, so if you do so,
      # it is wise to break or return out of the loop
      every jj := 1 to *walls do {
	 w := walls[jj]
	 c := w.coords

         if (w.plane = 1) & (d.plane = 1) then { # x plane
            if /(w.minx) then w.calc_boundbox()
            if ( abs(d.x - c[1]) < 0.08 &
                 w.minz  <=   d.z  <= w.maxz & w.miny <= d.y <= w.maxy
                ) then {  # opening is in an xplane wall
               if d.z+d.width > w.maxz then {
		#  write("door/opening might be too wide for ", name, "\n\t z ",
		 #    d.z," width ",d.width," z+w ",d.z+d.width," maxz ",w.maxz)
                  next
               }
               if d.y+d.height > w.maxy then {
                  #write("door/opening might be too high for ", name, "\n\t y ",
		   # d.y," height ", d.height, " y+h ", d.y+d.height," maxy ",w.maxy)
                  next
               }
            # write("opening is on an xplane wall?")
           # remove this wall
               while walls[1] ~=== w do put(walls,pop(walls))
               pop(walls)

           # replace it with three segments:
           # w = above, w2 = left, and w3 = right of door

               w2 := Wall ! ([opMode, world, w.texture] ||| w.coords)
               w3 := Wall ! ([opMode, world, w.texture] ||| w.coords)
               every i := 1 to *w.coords by 3 do {
	          w.coords[ i+1] <:= d.y + d.height
	          w.coords [i+2] <:= d.z; w.coords[i+2] >:= d.z + d.width
	          w2.coords[i+2] >:= d.z
	          w3.coords[i+2] <:= d.z + d.width
               }

               if check = 1 then {
                  w2.render(&null, 1, 1)
                  w3.render(&null, 1, 1)
               }
               w.sort_coords()
               w.set_plane()
               w2.sort_coords()
               w2.set_plane()
               w3.sort_coords()
               w3.set_plane()
	       w.calc_boundbox()
               w2.calc_boundbox()
               w3.calc_boundbox()
               put(walls, w, w2, w3)
               d.plane := 1
               put(exits, d)
               d.add_room(self)
               return
            }
         }
         else {
            if (w.plane = 3) & (d.plane = 3) then {
               if /(w.minx) then w.calc_boundbox()

           # allow .01 for floating point arithmetic errors
              if ((abs(d.z - c[3]) < 0.08)                &
                  (w.minx <= d.x + 0.01)   &
                  (d.x+d.width <= w.maxx + 0.01)    &
                  (w.miny <= d.y + 0.01)     &
                  (d.y+d.height <= w.maxy + 0.01)
                  ) then {  # door is in a zplane wall
               #  write("found door on zplane wall in room ", name)

             # remove this wall
                 while walls[1] ~=== w do put(walls,pop(walls))
                 pop(walls)

             # replace it with three segments:
             # w = above, w2 = left, and w3 = right of door

                 w2 := Wall ! ([opMode, world, w.texture] ||| w.coords)
                 w3 := Wall ! ([opMode, world, w.texture] ||| w.coords)
                 every i := 1 to *w.coords by 3 do {
		    w.coords [i] <:= d.x; w.coords[i] >:= d.x + d.width
                    w.coords[ i+1] <:= d.y + d.height
	            w2.coords[i]   >:= d.x
	            w3.coords[i]   <:= d.x + d.width
                 }
                 if check = 1 then{
                    w2.render(&null, 1, 1)
                    w3.render(&null, 1, 1)
                 }
                 w.sort_coords()
                 w.set_plane()
                 w2.sort_coords()
                 w2.set_plane()
                 w3.sort_coords()
                 w3.set_plane()
	         w.calc_boundbox()
	         w2.calc_boundbox()
                 w3.calc_boundbox()
                 put(walls, w, w2, w3)
                 put(exits, d)
                 d.plane := 3
                 d.add_room(self)
            #     write("returning after we found door")
                 return
	      }
	      else {
	      #   write("wall rejected " || d.id || " from room " || name)
	      }
           }
        }
     }

     write("no wall found for Door/Opening ", d.id,
	 " from room ", name, " to ", (d.other(self).name) | "?")

   #  if \debug then
     d.print()
   every w := !walls do
      if w.plane === d.plane then w.printwall()

   end  # method add_opening  ## Room

   # obj is cam or avatar
   method select_nearest_door( obj )  ## Room
      local i, idx, minval, tmp

      every i := 1 to *exits do {
	 if type(exits[i])[1:-7] ~== "Door" then next
	 tmp := exits[i].distance(obj.x, obj.y, obj.z)
	 if  /minval | (tmp < minval) then {
	    idx := i
	    minval := tmp
	    }
	 }
      nearest_door := exits[\idx]
   end # method select_nearest_door  ## Room

   method add_obstacle(o)  ## Room
      put(obstacles, o)
   end

   method add_decoration(d)  ## Room
      static i := 0
      if (type(d)[1:-7] == "WhiteBoard") then {
	 d.name := "WB-"||name||"-"||i
	 #
	 # Now tht name is there build the contents. Initialize the whiteboard
	 # and the connections only after assigning a name to it
	 #
	 d.initWB()
	 i+:=1
	 }
      put(decorations, d)
   end

   method add_tool(o)  ## Room
      put(tools, o)
   end


# really need multi textures - floor, wall, ceiling if we're going to have
#  defaults at this level...

# create the default front (north) wall
method make_default_front_wall(tex)
   if string(tex) then
      mkwall(tex, x, y, z, x, y+h, z  ,   x+w, y+h, z  ,   x+w, y, z  )
   else
      mkwall(x, y, z, x, y+h, z  ,   x+w, y+h, z  ,   x+w, y, z  )
end

# create the default back (south) wall
method make_default_back_wall(tex)
   if string(tex) then
      mkwall (tex, x, y, z+l, x, y+h, z+l, x+w, y+h, z+l, x+w, y, z+l)
   else
      mkwall (x, y, z+l, x, y+h, z+l, x+w, y+h, z+l, x+w, y, z+l)
end

# create the default left (west) wall
method make_default_left_wall(tex)
   if string(tex) then
      mkwall(tex, x, y, z, x, y+h, z, x, y+h, z+l, x, y, z+l)
   else
      mkwall(x, y, z, x, y+h, z, x, y+h, z+l,   x  , y, z+l)
end

# create the default right (east) wall
method make_default_right_wall(tex)
   if string(tex) then
      mkwall(tex, x+w, y, z, x+w, y+h, z, x+w, y+h, z+l, x+w, y, z+l)
   else
      mkwall(x+w, y, z, x+w, y+h, z, x+w, y+h, z+l, x+w, y, z+l)
end

   method rssify(sock)
      write(sock, "Foo")
   end

initially(opMode,world,dispatcher,nam,x,y,z,w,h,l,tex)  ## Room
   local theta, level, tmp

   /render_level := 0
   rangeTable := table()
   levelTable := table()
   directionTable := table()
   self.opMode := opMode
   self.world := world
   self.dispatcher := dispatcher
   self$Box.initially(self.opMode,self.world)
   nearest_door := &null
   name := nam
   self.x := x; self.y := y; self.z := z; self.w := w; self.h := h; self.l := l
   exits       := []
   obstacles   := []
   decorations := []
   tools       := []
   if self.opMode == ("c"|"C") then {
      floor  := Wall(self.opMode,self.world,self.world.d_floor_tex,
		      x, y  , z, x, y  , z+l,  x+w, y  , z+l,  x+w, y  , z )
      ceiling:= Wall(self.opMode,self.world,self.world.d_ceil_tex,
		      x, y+h, z, x, y+h, z+l,  x+w, y+h, z+l,  x+w, y+h, z )
      collide     := self.world.collide
      }
   else {
      collide     := 0.8
      }
   Tavatars    := table()
   isVisited   := 0
   isRendered  := debug := &null
   every tmp := ("north"|"south"|"east"|"west") do rangeTable[tmp] := tmp
   every tmp := ("one"|"two"|"three"|"four") do levelTable[tmp] := tmp

   every theta := !rangeTable do {
      directionTable[theta] := table()
      every level := !levelTable do {
	 directionTable[theta][level] := table()
         }
      }
   (\world).RoomsTable[name] := self

end # class Room


