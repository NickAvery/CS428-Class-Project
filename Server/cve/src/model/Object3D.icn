
#
#  Auther : Jafar Al-Gharaibeh
#  Date : April-09-2009
#

$include "../common/defaults.icn"
import graphics3d

class Object3D:Obstacle( x, y, z,
			 angle,
			 name,
			 scalex, scaley, scalez,
			 model3d_filename,
			 model3d,
			 W_Section,
			 collide, world)

   method render()  ## Object3D

      \model3d | fail

      W_Section := WSection(\name|"Object3D")
	 PushMatrix()
	 Translate(x, y, z)
	 Scale(scalex, scaley, scalez)
	 Rotate(angle, 0.0, 1.0, 0.0 )
	 model3d.render()
	 PopMatrix()
      WSection()
   end

   # 
   method disallows(x,z)  ## Object3D
      #if /minx then calc_boundbox()
      #if minx-collide <= x <= maxx+collide &
	#  minz-collide <= z <= maxz+collide then {
      #   return
      #}
   end

   method calc_boundbox()  ## Object3D
   end

   method load3dmodel()
      local fullfilename, model3d_path := MODEL3D_PATH

      if  exists(model3d_filename) then
         fullfilename := model3d_filename
      else if exists( model3d_path || model3d_filename) then {
         fullfilename := model3d_path ||model3d_filename
         }
      else{
         write(&errout, "3d model file is not available (",
 	       image(model3d_filename),")")
         fail
         }

      model3d := ModelObject3D(name)
      if model3d.load(fullfilename, "static") then {
	 write(" Loaded successfully...", fullfilename)
         }
      else{
         write("can't load 3d model for object:", image(name),
	       " filename:", image(fullfilename))
         model3d := &null
         fail
         }
         model3d.adjustScale(1, "y")
      return
   end

initially(opMode, coords, A, scales, fname )  ## Object3D
   self.opMode := opMode
   x := coords[1] | 0.0
   y := coords[2] | 0.0
   z := coords[3] | 0.0
   angle := \A | 0
   scalex := scales[1] | 1.0
   scaley := scales[2] | 1.0
   scalez := scales[3] | 1.0
      
   model3d_filename := fname
   load3dmodel()
   collide := 0.8   
end  # class Object3D
