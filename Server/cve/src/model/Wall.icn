#
# class Wall is a textured polygon
#
class Wall(opMode,world,texture, coords, minx, maxx, miny, maxy, minz, maxz,
           xdelta, ydelta, zdelta, plane, tex_fact, tex, tex_dlo)

   method calc_boundbox()  ## Box
      local w, L, i

      maxx := minx := coords[1]
      maxy := miny := coords[2]
      maxz := minz := coords[3]
      L := coords

      every i := 4 to *L by 3 do {
     minx >:= L[i]
     maxx <:= L[i]
     miny >:= L[i+1]
     maxy <:= L[i+1]
     minz >:= L[i+2]
     maxz <:= L[i+2]
         }
   end


   method dist( p1, p2, p3, p4, p5, p6 )  ## Wall
     return (  ( ( abs( p4 - p1 ) ^ 2.0 ) +
             ( abs( p5 - p2 ) ^ 2.0 ) +
             ( abs( p6 - p3 ) ^ 2.0 ) ) ^ 0.50  )
   end # method dist()

   method UpdateRenderedNode()
      local node, i
      node := tex.renderedNode[3]
      every i := 1 to 12 do
      {
         node[i] := coords[i]
      }
   end

   method render(render_level, tile, texok)  ## Wall

    if self.opMode == ("c"|"C") then {
      if self.world.current_texture ~=== texture then
	 self.world.current_texture := texture
	}

     tex.DrawTexturedRectangle(tile,coords, texok, self)
   end

   method settexture(newtext)  ## Wall
  #    write( " resetting texture to ",newtext)
      texture := newtext
   #   render()
   end

   method printwall()  ## Wall
      local c
      c := coords
      printf(" Wall:  %6.2r %6.2r %6.2r         %6.2r %6.2r %6.2r  \n",
        c[4],c[5],c[6],c[7],c[8],c[9] )
      printf(" Wall:  %6.2r %6.2r %6.2r         %6.2r %6.2r %6.2r  \n",
        c[1],c[2],c[3],c[10],c[11],c[12] )

      write(" ------------------- ")
   end

   method set_plane()  ## Wall
      local c
      plane := &null

      if /coords | (*coords=0) then fail
      c := coords
      if *c < 12 then {
      write(&errout, "short wall needs 12 coordinates, had "|| *c)
      runerr(500, c)
      }

      xdelta := max( abs( c[4]-c[1] ), abs(c[7]-c[4]),
		    abs(c[10]-c[7]), abs(c[10] - c[1] ) )
      ydelta := max( abs( c[5]-c[2] ), abs(c[8]-c[5]),
		    abs(c[11]-c[8]), abs(c[11] - c[2] ) )
      zdelta := max( abs( c[6]-c[3] ), abs(c[9]-c[6]),
		    abs(c[12]-c[9]), abs(c[12] - c[3] ) )

      if -0.0001 < zdelta < 0.05  then
	 plane := 3
      else if -0.0001 < ydelta < 0.05  then
	 plane := 2
      else if -0.0001 < xdelta < 0.05  then
	 plane := 1
      else {
	 write( "Wall does not have a plane! " )
	 printwall()
         }
   end # method set_plane()

   #
   # legacy method, almost certainly buggy, not used.
   #
   method sort_coords()
      local L, T, d, c, i, j, k
      # sort is disabled
      return

      T := table()

      c := copy(coords)
      every i := 1 to *c by 3 do {
	 d := dist( c[i], c[i+1], c[i+2], 0.0, 0.0, 0.0 )
	 T[i] := d
	 }
      L := sort(T, 4) # sort by value, return list of alternating key,value

      k := 1
      every i := (1 | 3 | 7 | 5) do {
     j := L[i]
     coords[k  ] := c[j  ]
     coords[k+1] := c[j+1]
     coords[k+2] := c[j+2]
     k +:= 3
     }
   end # method sort_coords()

initially(opMode, world, t, c[])  ## Wall
   self.opMode := opMode
   self.world := world
   texture := t
   coords  := c
   if self.opMode == ("c"|"C") then {
      tex := Texture3D(texture)
      }
   sort_coords()
   	#printwall()

   set_plane()
end # class Wall
