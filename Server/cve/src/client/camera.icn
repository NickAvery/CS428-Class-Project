#
# Originally, this was a class, but it didn't have much to it
# For a terribly long time this class was merged into nshdlg.
# Problem is, member variables x and y are reserved by GUI.
#
# Back to being a class 06/02/2010
# Pulled out of nshdlg.icn and all "world.nsh_dialog.*insert class variable*"
# were changed to "world.cam.*insert class variable*"

class Camera(x,y,z,lookx,looky,lookz, lx, lz, angle, avatar, view_mode,
	     oldx, oldy, oldz, oldlx, oldly, oldlz, need_Eye_refresh)

   method eye(i:0)
   #static  tm
   #local t1  
 #  initial { tm := [0,0]; maxtime := 0 }

      #if WAttrib(mynsh.subwin.cwin,"canvas") == "hidden" then fail
      #world.set_window(mynsh.subwin.cwin)
      if (i < 2) & (x = \oldx) & (y = \oldy) & (z = \oldz) &
	 (lookx = \oldlx) & (looky = \oldly) & (lookz = \oldlz) then {
	 # write("skipping redundant call to Eye()")
	 fail
	 }
      oldx := x; oldy := y; oldz := z
      oldlx := lookx; oldly := looky; oldlz := lookz

      need_Eye_refresh := 1
      #t1 := &time

      #Eye(oldx, oldy, oldz, oldlx, oldly, oldlz) | write("Eye() failed")
#      tm[2] +:= &time - t1
#      tm[1] +:= 1
#      maxtime <:= &time - t1

#      if &time - t1 > 33 then
#	 write_to_chat_win("Redraw: ", &time - t1, "ms, avg ",
#			   tm[2]/tm[1], "(",
#			   *WindowContents(), " items, ",*Pending()," pending")
   end
   
   method Eye_refresh()
      Eye(mynsh.subwin.cwin, oldx, oldy, oldz, oldlx, oldly, oldlz) | write("Eye() failed")
      need_Eye_refresh := &null
   end


   method teleport(ex,wye,zee)
   local k, theFloorToUse, oldroom := world.curr_room

      if not world.setPos(ex,wye+1.5,zee) then {
	 write("failed to teleport")
	 }
      lx := 0
      lz := -1
      mynsh.set_label()
      mynsh.write_to_chat_win("teleported to (",\ex,",",\wye,",",\zee,"), (",
			\lookx,",",\looky,",",\lookz,")")
      if \oldroom ~=== world.curr_room then oldroom.changeroom(world.curr_room)

   # Thinking about floors and maps here
   if * \Tfloor > 1 then {
       if \wye < Tfloor[1].miny then write("seems to be below basement")
       theFloorToUse := 1
       every k := key(Tfloor) do {
	   if zee >= Tfloor[k].miny then theFloorToUse := k
       }
       mynsh.floormap := Tfloor[theFloorToUse].filepath
   }

   end

   method reset()
      view_mode := 3
   end

   # cycle through view_modes 2 and 3; re-add 1 as a privilege later
   method toggle_viewmode()
   static been_here_before
      /avatar := world.TAvatars[world.userId]
      if \avatar then {
	 if /been_here_before := 1 then avatar.render()
         if view_mode = 3 then view_mode := 2
	 else if view_mode = 2 then view_mode := 3
         avatar.actions("move_forward", 0.01)
         }
      # write ("view mode is ", view_mode)
   end

initially
    x := y := z := lookx := looky := lookz := 0
end
