#
# texture.icn - texture management class
#

$include "../common/defaults.icn"

#
# We have to know how/when to create a new Texture3D object.
# Presumably we need a global variable that is a table, whose
# keys are filenames, and whose values are the Texture3D objects
# we have loaded so far. If we get a texture request, we see if
# we have that texture as an object already, and if not, create
# a new instance for it.
#
global textures

procedure texture(filename)
   local temp

   /textures := table()
   if / (textures[filename]) then {
      temp := Texture3D(filename) # create a texture3d object for it
      textures[filename] := temp
      }
   return textures[filename]
end


class Texture3D(commander, logHandler, filename, texturepath, texturedb,
		real_x, real_y, deltax, deltay,deltaz, tile, renderedNode)

   method CalcTexCoords_z(z1,z2,z3,real_val)
      local length
      if abs(z1-z2)>0 then
	 length := abs(z1-z2)
      else
	 length := abs(z1-z3)
      if tile = 1 then {
	 if /real_val then {
#	    write("warning: tile 1 on ", image(filename))
	    }
	 else
	    return deltaz := length/real_val
	 }
      return deltaz := 1
   end
      
   method CalcTexCoords_x(x1,x2,x3,real_val)
      local width
      
      if abs(x1-x2) > 0 then
	 width := abs(x1-x2)
      else 
	 width := abs(x1-x3)
      if tile = 1 then {
	 if /real_val then {
#	    write("warning: tile 1 on ", image(filename))
	    }
	 else
	    return deltax := width/real_val
	 }
      return deltax := 1
   end

   method CalcTexCoords_y(y1,y2,y3,real_val)
      local height
      if abs(y1-y2) > 0 then
	 height := abs(y1-y2)
      else 
	 height := abs(y1-y3)
      if tile = 1 then {
	 if /real_val then {
#	    write("warning: tile 1 on ", image(filename))
	    }
	 else
	    return deltay := height/real_val
	 }
      return deltay := 1
   end

   #
   # Given a texture instance, how do we apply it to a rectangular surface?
   # (a) Texture() or WAttrib("texture=...") to set the texture itself,
   # (b) WAttrib("texcoord="...) to set the texture coordinates based on
   #     surface coords / real world coords.
   # (c) Actually call DrawPolygon
   #   
   method CalcTexCoords(_tile,coords)
      local texcoords,del_x,del_y
      if _tile === &null then 
	 tile := 0
      else 
	 tile := _tile
      # if true then we have the z-y plane
      if coords[1]=coords[4]=coords[7]=coords[10] then {
	 # use z as our texture x
	 del_x := CalcTexCoords_x(coords[3],coords[6],coords[9],real_x)
	 del_y := CalcTexCoords_y(coords[2],coords[5],coords[8],real_y)
	 }
      else if coords[2]=coords[5]=coords[8]=coords[11] then {
	 del_x := CalcTexCoords_x(coords[1],coords[4],coords[7],real_x)
	 # use z as our texture y
	 del_y := CalcTexCoords_y(coords[3],coords[6],coords[9],real_y)
	 }
      else if coords[3]=coords[6]=coords[9]=coords[12] then {
	 del_x := CalcTexCoords_x(coords[1],coords[4],coords[7],real_x)
	 del_y := CalcTexCoords_y(coords[2],coords[5],coords[8],real_y)
	 }
      else {
#	 write("non planar, can't calc texcoords in ", image(filename))
#         write(coords[1],",",coords[2],",",coords[3],"     ",
#	       coords[4],",",coords[5],",",coords[6] )
#         write(coords[7],",",coords[8],",",coords[9],"     ",
#	       coords[10],",",coords[11],",",coords[12] )
      }
      return [del_x, del_y]
   end

   method DrawTexturedRectangle(_tile,coords, texok, caller)
   local texcoords, delxdely, del_x, del_y, tex_dlo

if type(real_x) == "string" then write(filename, "already string ", real_x)

      delxdely := CalcTexCoords(_tile,coords)      
      del_x := delxdely[1]
      del_y := delxdely[2]
      if (\texok | (tex_dlo:=Texture(map(\filename,"/",PS)))) then {
         if \caller then caller.tex_dlo := tex_dlo
         }
      else
	 write("no texture in wall, wanted ", image(\filename))
      Texcoord(0.0,0.0,0.0,\del_y|1,\del_x|1,\del_y|1,\del_x|1,0.0)
      renderedNode := FillPolygon(coords) |  write("FillPolygon fails")
   end

   method loadMeta()
      local f
      local line
      local i
      local tempfn
      # go open texture_coord.info
      # locate info for file filename
      # parse in the data
      # set the parsed info to data members of this class
      
      i := *filename
      while (i > 0 , filename[i] ~== PS) do i -:= 1
      tempfn := filename[i+1:0]
      #write("trying to find " || filename || " in texture db " || texturedb)
    
      f := open(texturedb) |
	 stop("can't open texturedb file ", image(texturedb))
   
      line := read(f)
      #write("line = " || line)
            
      while tempfn ~== (line := read(f))# do { write("line=" || line) }

      # watch out for EOF situations when coord info is missing
      if /line | tempfn ~== line then {
	 # write("no texture info for ", tempfn)
	 tile := 0
         close(f)
	 return
	 }
      #write("found " || filename || " line=" || line)
      
      while line := read(f) & (not find("real_world_x",line))
      
      real_x := (line[17:0] ? numeric(tab(many(&digits++'.')))) |
	 { write("bad real_x: ", line); close(f); fail }

      #write("found real_world_x real_x=" || real_x)
      while not find("real_world_y",(line := read(f))) do {}
      #write("found real_world_y")
      real_y := (line[17:0] ? numeric(tab(many(&digits++'.')))) |
	 { write("bad real_y: ", line); close(f); fail }
     # logHandler.logit("loadMeta(): real world coordinates for " ||
      #           texturedb || " are width " || real_x || " height " || real_y)
      close(f)
      #write("ending loadMeta()")
   end

   method a()
      logHandler.logit("a(): method a was called")
   end
   
   initially(fn, logObj)
     # if /logObj then
      #   logHandler := Logger()
      #else
       #  logHandler := logObj
           
#ifdef TEXSMALL
      texturepath := DAT ||PS||"texsmall"||PS
#else
      texturepath := DAT ||PS||"textures"||PS
#endif

      texturedb := DAT ||PS||"textures"||PS||"texture_coord.info"

      commander := Commands()
      if fn === &null then fn := texturepath || "wall2.gif"
      filename :=  fn
      #write("filename=" || fn)
      # make sure the filename EXISTS
      # if it does not you could return &null
      # or for fault tolerance sake you could use
      # some default filename that exists
      #go and load the metadata for this texutre
      loadMeta()
end
