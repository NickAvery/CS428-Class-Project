import gui
$include "../common/defaults.icn"
$include "keysyms.icn"

record Rfloor(name,oldx,oldy,filepath, miny, maxy)
global Tfloor

#
# A MapImage is a subclass of the Image class, used to render a map
# on which is depicted an arrow for each user.
# This class contains two Methods
# method DrawAvatar
# 	  This method calls DrawArrow for every avatar who are logged in.
# method handle_event
#	  This method handles the events while in 2D map.
# method DrawArrow
#         This method gets x,y and angle values of the arrow from
#	  avatar.x,avatar.z and avatar.angle
#         Converts x,y (meters) to co-ordinates of 2D.
#         Draws Arrow by using FillPolygon Method.
# method display
#         This method was inherited from image.icn
#         When map tab is pressed DrawAvatar() is called.
#

class MapImage : Image(
   ar,
   onePixelFt,
   onePixelMt,
   oldX,oldY,
   Name,
   Miny,Maxy,
   Filepath
   )

   method set_filename(s)
      if not exists(s) then {
	 if exists(DAT || PS || s) then {
	    s := DAT || PS || s
	  }
      }
      self$Image.set_filename(s)

#      if not (Tfloor[\indx] := Rfloor(nam,ox,oy,s)) then {
#	 write("no Tfloor entry for ", image(s))
#	 }
   end

   method owns(x,y,z)
      return Miny <= y < Maxy 
   end

   #For each avatar calling DrawArrow()
   method DrawAvatar()
      local avat
      every avat := !world.TAvatars do
         DrawArrow(avat.uid,avat.X,avat.Z,avat.scolor,avat.angle)
   end

   #Handles events when user is in map tab
   method handle_event(e)
      CopyArea(cbwin,cwin,self.x,self.y,self.w,self.h,self.x,self.y)
      case e of {
         Key_Up: {
            EraseArea(cbwin)
            display(1)
	    world.cam.avatar.actions("move_forward", 0.15)
	    DrawAvatar()
	    }
	 Key_Down: {
	    EraseArea(cbwin)
	    display(1)
	    world.cam.avatar.actions("move_backward", -0.15)
	    DrawAvatar()
	    }
	 Key_Right: {
	    EraseArea(cbwin)
	    display(1)
	    world.cam.avatar.actions("turn_right", 0.15)
	    DrawAvatar()
	    }
	 Key_Left: {
	    EraseArea(cbwin)
	    display(1)
	    world.cam.avatar.actions("turn_left", 0.15)
	    DrawAvatar()
	    }
	 "n": {
	    if /ar then ar := 1
	    if ar === 1 then ar := 0
	    else ar := 1
	    EraseArea(cbwin)
	    display(1)
	    }
	 }
      CopyArea(cbwin,cwin,self.x,self.y,self.w,self.h,self.x,self.y)
   end

   # To show the position of avatar in map tab (arrow format)
   # conversion from fhn coordinates to 2 D coordinates
   # Optional name tag followed by arrow
   # Each arrow has assigned a color (avatar shirt color).
   method DrawArrow(uid,x,y,color,angle)
      local p1x,p1y,p2x,p2y,p3x,p3y,p4x,p4y # Arrow Co-ordinates
      local imwin,img_w,img_h               # for original image
      local originx,originy                 # origin point
      local orgx,orgy,deltax,deltay
      local aspr, aspmax, zoom_w, zoom_h, k
      static once

      if /Tfloor | /(Tfloor[1]) then {
	 if /once then{
	 	world.nsh_dialog.write_to_chat_win("No maps were found for this model.")
	 	once := 1
	 }
	 fail
	 }

      if filename === (Tfloor[k := key(Tfloor)].filepath |
		      (DAT||PS||Tfloor[k].filepath)) then {
	 oldX := Tfloor[k].oldx
	 oldY := Tfloor[k].oldy
	 }
      else {
	 world.nsh_dialog.write_to_chat_win("No map was found for this floor")
	 fail
#	 oldX := Tfloor[2].oldx
#	 oldY := Tfloor[2].oldy
	 }      

      #
      # Resizing the image (Next 19 lines is taken from image.icn)
      #
      if not (imwin := image_cache[filename]) then {           # actual image
         imwin := WOpen("image=" || \self.filename, "canvas=hidden") | fail
         insert(image_cache, filename, imwin)
	 }
      if /imwin then {
	 write("no image cache entry for ", image(filename))
	 fail
	 }

      img_w := WAttrib(imwin, "width")        # actual image width
      img_h := WAttrib(imwin, "height")       # actual image height
      aspr := real(img_w) / real(img_h)       # Aspect ratio of original image
      aspmax := real(self.w) / real(self.h)   # Aspect ratio of resized image

      # if coordinates of original image are <= to resized image
      # No change in co-ordinates
      # else
      # Change as per Aspect ratio

      if /self.scale_up_flag & (img_w <= self.w) & (img_h <= self.h) then {
         zoom_w := img_w
	 zoom_h := img_h
	 }
      else {
	 if aspr > aspmax then {
	    zoom_w := self.w
	    zoom_h := integer(self.w / aspr)
	    }
	 else {
	    zoom_w := integer(self.h * aspr)
	    zoom_h := self.h
	    }
	 }

      # calculating deltax and deltay
      deltax := real(zoom_w)/real(oldX) # newx by oldx #432
      deltay := real(zoom_h)/real(oldY) # newy by oldy #412

      #
      #removing leftside gap
      #
      orgx := real(self.w-zoom_w)/real(2.0)
      orgy := real(self.h-zoom_h)/real(2.0)

      #
      # calculating originx and originy
      #
      originx := self.x+orgx+real(32*deltax)
      originy := self.y+orgy+real(16*deltay)

      #
      #showing origin
      #
      x := x/onePixelMt
      y := y/onePixelMt
      x := real(x*deltax)+originx
      y := real(y*deltay)+originy
      # (p1x,p1y) (p2x,p2y) (p3x,p3y) (p4x,p4y) are 4 cordinates to map Arrow
      p1x := x
      p1y := y
      p2x := 10*sin(angle+dtor(140))+x
      p2y := 10*cos(angle+dtor(140))+y
      p3x := 10*sin(angle+dtor(0))+x
      p3y := 10*cos(angle+dtor(0))+y
      p4x := 10*sin(angle+dtor(220))+x
      p4y := 10*cos(angle+dtor(220))+y
      Fg(cbwin,color)
      FillPolygon(cbwin,p1x,p1y,p2x,p2y,p3x,p3y,p4x,p4y)
      # For user name
      if ar === 1 then {
         Font(cbwin, "sans, 12")
	 Fg(cbwin,"white")
	 FillRectangle(cbwin,x+10,y-12,TextWidth(cbwin,uid),12)
	 Fg(cbwin,color)
	 DrawString(cbwin,x+10,y,uid)
	 }
   end

   # display method is first called when map tab is pressed
   # It calls DrawAvatar()
   method display(bflag)
      self$Image.display(bflag)
      DrawAvatar()
   end

# initial values
initially(indx,nam,filepat,ox,oy,miny,maxy)
   local t
   /Tfloor := table()
   self.Image.initially()
   onePixelFt := 0.82
   onePixelMt := onePixelFt/3.281
   Miny := miny
   Maxy := maxy
   Name := nam
   Filepath := filepat
   if not (Tfloor[\indx] := Rfloor(nam,ox,oy,filepat, miny, maxy)) then {
      # write("no Tfloor entry for ", image(filepat))
      }
end
