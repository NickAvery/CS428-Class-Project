import gui
$include "guih.icn"

global pop3D, subwin_in3D, pop3DP, pop3DF


# This class is created just to override the popup() behavior of PopupMenu class
class PopupMenuCustom3D : PopupMenu(
)
   method handle_event(e)
      self.PopupMenu.handle_event(e)
      if e === (&lrelease | &rrelease | &mrelease) then{
	 self.parent.handle_event(e)
      }
   end  

   #
   # Popup the menu at the current cursor position.
   #
   method popup()
      local W, x1, y1
      W := self.get_parent_win()
      self.set_pos(0, 0)
      self.resize()
      self.menu.set_parent_component(self)         
      self.menu.set_abs_coords(self.x, self.y + self.h)
      self.menu.resize()

      self.unique_start()
      self.set_which_open(self.menu)
   end
end
#
#
# CLASS  PopupMenu3D
#
#
class PopupMenu3D : SubWin_in3D( pop_menu, main_menu, is_ready)

   method init_dialog()
      pop3D_menu()
   end
   
   method add_separator()
      main_menu.add(MenuSeparator())
   end
   
   method add_menu_item(l, obj, meth, lbl_img)
      local m
      /obj := self
      /meth := "do_nothing"
      /lbl_img := ""
      m := TextMenuItem()
      m.set_label(l)
      m.connect(obj, meth, ACTION_EVENT)
      if \lbl_img &
         lbl_img ~== "" then
         m.set_img_left(lbl_img)
      main_menu.add(m)
   end
   
   method handle_event(e)
      #self.Dialog.handle_event(e)
      hide_me()
   end
   
      
   method pop3D_menu()
      local m1, m2, m3
      
      self.add(pop_menu)
      
      pop_menu.init()
      pop_menu.resize()
      pop_menu.popup()
      
      WAttrib(self.win, "size=" || string(main_menu.w)|| "," || string(main_menu.h))
      WAttrib(self.win, "canvas=normal")
   
   end
   
   method set_main_menu(mn)
      main_menu := mn
      pop_menu.set_menu(main_menu)
   end

   method setup_popup()
      pop_menu := PopupMenuCustom3D()
      main_menu := Menu()   
      main_menu.set_label(" Main menu...")
      pop_menu.set_menu(main_menu)   
      
      #mn := Menu() 
      #mn.set_label("sub menu...")

      #m := TextMenuItem() 
      #m.set_label("welcome")
      #m.connect(self, "do_nothing", ACTION_EVENT)      
      #mn.add(m)
      
      #main_menu.add(mn)
   end
   
   method on_pop3Ddialog(ev)
      hide_me()
   end

   method setup()
      #self.set_attribs("size=200,250")
      self.connect(self, "on_pop3Ddialog", MOUSE_PRESS_EVENT)
   end
      
   initially(pwin)
      self.SubWin_in3D.initially()
      setup_popup()
end


#
#
# CLASS  PopupMenu3D
#
#
class SubWin_in3D : Dialog( parent_win, is_active, chat_output )
   method component_setup()
      self.setup()
   end

   method init_dialog()
      show_me()
   end
   method end_dialog()
   end


   method on_pop3Ddialog(ev)
      hide_me()
   end
   
   method do_nothing(ev)
   end

   method hide_me()
      if \is_open then self.dispose()
   end
 
   method handle_event(e)
      #self.Dialog.handle_event(e)
   end   
   
   method show_me()
      #self.set_attribs("size=200,100")
      #self.resize()      
      WAttrib(self.win, "size=" || string(200)|| "," || string(120), "canvas=normal")
   end
   
   method add_text(s)
      
   end
 
   method setup()
      self.connect(self, "on_pop3Ddialog", MOUSE_PRESS_EVENT)
      chat_output := TextList()
      chat_output.set_pos("1", "1")
      chat_output.set_size("100", "100")
      chat_output.set_draw_border()
      chat_output.set_attribs("bg=very light whitish yellow", "resize=on")
      chat_output.set_contents([""])
      #self.add(chat_output)
   end
   
   method popup(myw)
      self.show_modal(myw)
   end
   
   method popup_and_stay(myw)
      self.show_modeless(myw)
   end
   
   method show()
      self.component_setup()
      self.open_win()
      self.init()
      self.is_open := 1
      self.resize()
      self.firstly()
      self.validate()
      self.tooltip_init()
      self.init_dialog()      
   end
   
   method show_modal(myw)
      local l
      if \myw then init_parent_win(myw)
      self.show()
      l := dispatcher.list_unblocked()
      every (!l).block()
      dispatcher.add(self)
      dispatcher.message_loop(self)
      every (!l).unblock()
   end
   
   method show_modeless(myw)
      if \myw then init_parent_win(myw)
      self.show()
      dispatcher.add(self)
   end
   
   method init_parent_win(pwin)
      if \pwin then
	 parent_win := Clone(pwin, "g", "canvas=hidden", "pos="||string(&x-1)||","||
			      string(&y-1) ) | fatal("couldn't clone window")
   end

   method open_win()
      if /parent_win then
	 self.win := (WOpen ! (["inputmask=mc", "canvas=hidden"] ||| self.attribs)) | fatal("couldn't open window")
      else{	 
	 self.win := (Clone ! ( [parent_win, "inputmask=mc", "canvas=hidden"] ||| self.attribs)) | fatal("couldn't clone window")	 
      }
      
      self.buffer_win := (WOpen ! (["canvas=hidden"] ||| self.attribs)) | fatal("couldn't open window")
      return
   end
   

   initially(pwin)
      self.Dialog.initially()
      
      /pwin := &window
      init_parent_win(pwin)
end

### Ivib-v2 layout ##
#class|Canvas|17|Name Table|table|integer|0|1|string|text_button|intege
#r|1|SuperClass Name|string|Dialog|Import Name|string|gui|Button Groups
#|class|ButtonGroupSet|2|Parent Canvas|1|Boxes|list|0|Checkbox Groups|c
#lass|CheckBoxGroupSet|2|Parent Canvas|1|Boxes|list|0|Gen Indent|intege
#r|3|Gen Main|integer|1|Gen Component Setup|integer|1|Gen Init Dialog|i
#nteger|1|Gen Initially|integer|1|Dialog Struct|class|CDialog|4|Min Wid
#th|null|Min Height|null|Ticker Rate|null|Attribs|list|0|Name|string|po
#p3Ddialog|Width|integer|244|Height|integer|385|Items|list|0|Initial Fo
#cus|null|Event Handlers|list|1|list|2|string|MOUSE_PRESS_EVENT|string|
#on_pop3Ddialog|
