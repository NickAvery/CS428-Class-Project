#
# cve.icn - the CVE patcher/updater
#
link gpxop
link io
$include "../common/defaults.icn"

global d, dl,damaker
global world # world not used in unicron, this just avoids warning message
global displayw, displayh

# WDAT is a "writable DAT" directory
global DAT, WDAT, CONFIG, MODEL_NAME

procedure main(av)
local u, p, i, L, fn, cwd, w2, nopatch, d2, txt, f, fusername, fin,
    modfilename, cmd, cusr, cpw, cauth

   #
   # calculate the display width, so initial windows can open in the middle
   #
   if not (w2 := open("tmp","g","canvas=hidden","size=1,1")) then {
      stop("cve: can't seem to open graphics windows")
      }
   displayw := WAttrib(w2, "displaywidth")
   displayh := WAttrib(w2, "displayheight")
   close(w2)
   w2 := &null

   nopatch := 1
   if find("-nopatch", av[1]) then nopatch := pop(av)
   if find("-patch", av[1]) then { nopatch := &null; pop(av) }
   if u := pop(av) then p := pop(av)
   
   # if a directory path is given for program, cd to there
   if i := upto('/\\', &progname) then {
      every i <:= upto('/\\', &progname)
      chdir(&progname[1:i])
      }
   cwd := chdir()
   if (cwd[-3:0]=="bin") | (cwd[-10:0]==".bin.linux") then { chdir("..") }
   else if cwd[-10:0] == ("src" || PS || "client") then {
      chdir(".."); chdir("..")
      }
   else write("didn't see where I was to chdir to; staying put in ", cwd)

   DAT := "dat"

   if WDAT := getenv("APPDATA") || PS || "CVE" then {
      if not stat(WDAT) then if not mkdir(WDAT) then stop("uh oh...")
   } else {
      WDAT := DAT
   }
   CONFIG := WDAT||PS||"config.cve"
   if fin := datopen(CONFIG) then {
      DAT := "dat"||PS|| (read(fin) ? (="model " & tab(0)))
      if WDAT := getenv("APPDATA") || PS || "CVE" || PS || DAT[4:0] then {
         if not stat(WDAT) then if not mkdir(WDAT) then stop("uh oh...")
      } 
      else 
         WDAT := DAT
      close(fin)
   }
   else 
      DAT := DAT || PS || "nmsu"
   modfilename := DAT||PS||"model.dat"
   if fin := datopen(modfilename) then {
      MODEL_NAME := read(fin)
      while not (find("default", MODEL_NAME)) do MODEL_NAME := read(fin) 
      MODEL_NAME := read(fin)
      MODEL_NAME := (MODEL_NAME ? (tab(find("name ")) & move(5) & tab(0)))
   }
   else MODEL_NAME := "Science Hall"
   close(fin)
   # if any new-* files are left around from a previous patchrun,
   # try to rename them here.
   if d := open("new-files") then {
      L := []
      while fn := read(d) do {
         if match("new-", fn) then put(L, fn)
         }
      close(d)
      while fn := pop(L) do rename(fn, fn[4:0])
      remove("new-files")
      }
   if /nopatch then {
      # uncomment these lines to enable the patcher by default.
      d := dialogtable()
      d.show_modal()
      }

    if (&window := open("CVE", "g", "canvas=hidden",
		 "image=dat" || PS|| "images"||PS||"splash.gif")) then {
      if w2 := open("CVE", "g", "size=100,100", "pos=0,0") then {
	 WAttrib(w2, "width="||(displayw-8), "height="||(displayh-64))
         Zoom(&window,w2,0,0,WAttrib("width"),WAttrib("height"),0,0,
	      displayw-8,displayh-64)
	 Raise(w2)
	 every i := 1 to 6 do if *Pending(w2)>0 then break else delay(500)
	 close(w2)
	 close(&window)
	 }
      else
	 stop("can't open splash screen canvas=maximal")
      }
    else write("can't find splash screen image dat",
	       PS || "images" ||PS|| "splash.gif")

   dl := logindialog()
   # hardwired; fix this to actually inspect/calculate from logindlg.icn
   dl.set_attribs("pos="||((displayw-644)/2)||","||((displayh-399)/2))
   if dl.user := \u then {
      dl.password := \p
      }
   else {
      if fusername := open(WDAT ||PS|| "lastlogin.dat") then {
	 dl.user := read(fusername)
	 dl.server := read(fusername)
	 close(fusername)
         }
      }
   dl.show_modal()

   if dl.password === "guest" then {
      # gui::dispatcher := N3Dispatcher()
      damaker := amaker()
      damaker.show_modal() 
 
      dl.password := damaker.getPassword()
      dl.user := damaker.getUsername()
      dl.server := dl.getServername()
      # invoke server new user commands
      if newuser() then {
	 write(&errout, "newuser() returned success")
	 }
      else {
	 write(&errout, "newuser() failed")
	 }
      }
   
   (cmd := which_iconx()) | stop("can't find iconx!")
   cmd ||:= " bin"|| PS ||"nsh.cmd"

   if not (/ (dl.user | dl.password)) then {
      cusr := cypher(dl.user) | ""
      cpw  := cypher(dl.password) | ""
      cauth := cusr ||"~:~" || cpw
      cmd ||:= " -server " || \ (dl.server)
      if not setenv("CVEAUTH", cauth) then{
         # cmd ||:=  " -cauth " || cauth
          " -user " || \ (dl.user) ||
          " -password " || \ (dl.password)
         }
      }
   else
      setenv("CVEAUTH", "")

$ifndef _MACOSX
      cmd ||:= " &"
$endif
      system(cmd)
end

procedure which_iconx()
local x, SYSPATHSEP, pth

$ifdef _UNIX
   x := "iconx" 
   SYSPATHSEP := ":"
$else
   x := "wiconx.exe"
   SYSPATHSEP := ";"
$endif
   #first, try iconx on the system path if it does exist.
   if pth := getenv("PATH") then{
      if x := pathfind(x, pth, SYSPATHSEP) then return x
      }
   # second, trying cve/bin/iconx
   if stat("bin"|| PS ||x) then return ( "bin"|| PS || x )
   # third, try cve/iconx
   if stat("." || PS ||x) then return ( "." || PS || x )

   # all failed! return x, and just hope it works or maybe better issue an error!
   return x
end


class dialogtable()
   method show_modal()
   local d, L, platform, dir, N

      d := UnicronProgressBar()
      d.show_modeless()

      platform :=
$ifdef _UNIX
	 "linux"
$else
	 "windows"
$endif

      N := 0
      every dir := (platform | "shared") do {
	 d.syncdir := dir

	 if *(L := d.check()) > 0 then {
	    N +:= *L
	    handle_updates(L, d)
	    }
	 }
      if N = 0 then {
	 d.message("no files updated")
	 delay(500)
	 d.dispose()
	 }
      else {
	 d.message((N/3) || " files updated")
	 delay(3500)
	 d.dispose()
	 }
   end

   method handle_updates(L, d)
   local fn, reason, size, errs, nerrs
      errs := ""   
      nerrs := 0
      while fn := pop(L) do {
	 reason := pop(L)
	 size := pop(L)
	 errs ||:= d.update(fn, reason, size) || " "
	 }
      if errs ~== "" then {
	 d.message("exiting because: " || errs)
	 dispatcher.message_loop(d)
	 exit(-1)
	 }
      d.message("updated " || fn || ", continuing")
      delay(800)
      return
   end
end


$include "guiconst.icn"
class ProgressBar : Component (
   p,
   bar_x, bar_y, bar_w, bar_h
)

   method resize()
      /h_spec := WAttrib(cwin, "fheight") + 2 * DEFAULT_TEXT_Y_SURROUND
      self$Component.resize()
      bar_x := x + DEFAULT_TEXT_X_SURROUND
      bar_y := y + BORDER_WIDTH + 3
      bar_w := w - 2 * DEFAULT_TEXT_X_SURROUND
      bar_h := h - 2 * (BORDER_WIDTH + 3)
   end

   method display(buffer_flag)
   local cw
      EraseRectangle(cbwin,x,y,w,h)
      DrawRaisedRectangle(cbwin, x, y, w, h)
      FillRectangle(cbwin, bar_x, bar_y, bar_w * p / 100.0, bar_h)
      cw := Clone(cbwin, "drawop=reverse")
      center_string(cw, x + w/2, y + h/2, p || "%")
      Uncouple(cw)
      if /buffer_flag then CopyArea(cbwin, cwin, x, y, w, h, x, y)
      return
   end

   method handle_event(e)
      if integer(e) = (&lpress|&rpress|&mpress) &
         in_region() & (&x <= bar_x + bar_w) then {
         set_percentage((100 * (&x - bar_x)) / bar_w)
         return _Event(e, self, 0)
         }
   end

   method get_percentage()
      return p
   end

   method set_percentage(pct)
     p := pct
     redisplay()
   end
initially(argv[])
   self$Component.initially()
   set_percentage(0)
   if *argv > 0 then set_fields(argv)
end

class UnicronProgressBar : _Dialog(lab, fnlab, pb, closebtn, syncdir)
   method dialog_event(ev)
      case ev.get_component() of {
         pb :
            write("pb produced an event - percentage = ", pb.get_percentage())
         closebtn: {
            if ev.get_code() > 0 then {
               dispose()
	       win := &null
               }
            }
      }
   end
   method message(s)
      lab.set_label(s)
      if \ (is_open) then {
         lab.resize()
         display()
         }
   end
   method check()
   local platform, url, db, filen, size, mtime, L, r, fs
      url := distfile("MANIFEST")
      message("checking "|| url|| "...")
      db := open(url, "m") | {
         write("can't update, was trying to read ", image(url))
	 fail
         }
      message("checking... opened " || url)
      L := []
      while r := read(db)  do {
	 if (r == "") | (r[1] == "#") | match("filename ",r) then next
	 r ? {
            filen := tab(upto(' \t'))|write("no filename in ", image(r))
            tab(many(' \t'))
            size := numeric(tab(many(&digits)))|
		write("no filesize in ", image(r))
            tab(many(' \t'))
            mtime := numeric(tab(many(&digits)))|
		write("no mtime in ", image(r))
	    }
         message("checking " || filen)
         if not (fs := stat(filen)) then {
            put(L, filen, "because it is a new file", size)
            }
         else if fs.size ~= size then {
            put(L, filen, "because its size ("||size||
	           ") is different than ours (" || fs.size||")", size)
            }
         else if fs.mtime < mtime then {
            put(L, filen, "because it is newer ("||mtime||
	        ") than ours (" || fs.mtime || ")", size)
         }
	 else {
	    #write("don't think we updated ", filen)
	    #write("\tbecause ", image(fs.size), " = ", image(size))
	    #write("\tbecause ", image(fs.mtime), " >= ", image(mtime))
	    }
	 }
      close(db)
      return L
   end
   method distfile(fn)
      return "http://cve.sourceforge.net/dist/" ||
	  syncdir || "/" || fn
   end
   method update(fn, reason, size)
   local fetcher, s, fo, newfile, percent, total
      if /win then stop("can't update ", fn, " win is gone")
      message("updating " || fn || " " || reason)
      WAttrib(win, "pointer=" || ("wait"|"watch"))
      fnlab.set_label(fn)
      pb.set_percentage(0)
      (fetcher := open(distfile(fn), "m")) | {
         s := "can't get contents of " || fn
	 message(s)
         WAttrib(win, "pointer=arrow")
         return s
         }
      message("httpget (" || image(fetcher) || ")")
      if not (fo := datopen(fn, "wu")) then {
         fn := "new-" || fn
         if not (fo := datopen(fn, "wu")) then {
            s := "can't open "||fn||" for writing"
            message(s)
            WAttrib(win, "pointer=arrow")
            return s
            }
         }
      total := 0
      while writes(fo, s := reads(fetcher, 1024)) do {
	 total +:= *s
	 percent := 100 * total / size
	 if percent > 100 then percent := 100
	 pb.set_percentage(percent)
	 }
      close(fo)
      if match("new-", fn) then {
         s := "couldn't write " || fn[4:0] ||
               "; close ALL programs and rerun unicron to patch"
         message(s)
         newfile := datopen("new-files","a")
         write(newfile, fn)
         close(newfile)
         WAttrib(win, "pointer=arrow")
         return s
         }
      else
         message("updated " || fn)
      WAttrib(win, "pointer=arrow")
   end

initially
local t
   self$_Dialog.initially()
   set_attribs("label=CVE Dynamatic Update",
	       "size=644,399",
	       "font=sans", "bg=yellowish white", "resize=on")
   t := Label("pos=10%,15%", "size=80%,10%",
	      "internal_alignment=c",
	      "label=Checking for update files! please wait...")
   t.set_attribs("font=serif,28,bold","fg=blue")
   add(t)
   lab := Label("pos=50%,80%", "size=90%,10%", "align=c,c",
		"label=initializing...")
   lab.set_attribs("font=serif,18,bold")
   add(lab)
   fnlab := Label("pos=50%,38%", "size=50%,15%", "align=c,c",
		  "label=no files updated")
   fnlab.set_attribs("font=serif,18,bold")
   add(fnlab)
   pb := ProgressBar("pos=50%,50%", "size=50%", "align=c,c")
   add(pb)
   closebtn := TextButton("label=Close", "pos=50%,66%", "align=c,c")
   add(closebtn)
   set_focus(closebtn)
end
