#
# amaker
#
# This GUI wizard guides users through an avatar-creating process.
#
# The output of this program is an avatar property file (.avt).  Currently,
# the output is stored in the ...dat.../users directory.
#

import gui
$include "guih.icn"
$include "../common/defaults.icn"

global username,password,firstname,lastname,loginid,emailid,affiliation
global customize,height,size
global xsize,ysize,zsize,height
global gender,txt,txt1,shape
global primarycolor,shirtcolor,pantscolor,shoescolor
global face,headchoice
global angle
global ps, output_path, pic_path,validf
global count,accept1,hcounter
global unvalidf,unvalidu,unvalidp,unvalida,unvalide,unvalidl
global pass1,pass2,uname
global new_3dmodel_filename
global  FIRST_PORT # used by port handler for file transfer

procedure newuser()
   local connection, transmit, log, result, parsed_result, port, srv
   local avatar_definition, avatar_face, cmds

   servername  ? {
      if \(srv := tab(find(":")) ) then {
	 move(1)
	 port := tab(0) 
	 FIRST_PORT := port
         }
      else {
         srv := servername
         port := DEFAULT_PORT
	 FIRST_PORT := port
         }
      }
      
   log := Logger()
   transmit := fileTransfer(log)
   cmds := Commands()

   #
   # We need to check for errors at every step through the communication!
   #

   connection := LoginSession(srv, port)
   connection.connect()
   result := connection.systemlogin()
   if result === "Failed" then
      stop("Sorry, ",srv,":",port," is not taking new users right now.")

   connection.Write("\\newuser " || username || " " || password ||" "||
       firstname||" " || lastname||" " || emailid||" " || affiliation)
   result := connection.Read()
   log.logit("newuser(): result from newuser, " || result)


   # IF SUCCESS PROCEED WITH FILE CHECKS
   if result := cmds.wasUnSuccessfull(result) then {
      write(&errout, "newuser failed error, " || result)
      connection.logout()
      connection.disconnect()
      exit(0)
      }
   result := &null

   # FILE1: CHECK FOR EXISTENCE OF uid.avt AND GET ITS SIZE
   avatar_definition :=
       map(output_path || username || ps || username ||".avt", "\\", "/")

   transmit.setConnection(connection) # setting the connection to user

   #
   # send \transfer filename filesize
   #
   transmit.sendTransfer(avatar_definition, srv)

   while (result := connection.Read()) == "" # hopefully a \request...

   if \result then {
      if not match("\\request ", result) then {
         log.logit("newuser(): skipping face because the server returned " ||
		   image(result))
	 connection.logout() # do a logout
	 connection.disconnect() # close the connection handle
	 fail
	 }

      # result must be of the form: \request filename filesize server port
      transmit.sendFile(result)   
      #transmit.sendToall(avatar_definition)

      # RESETTING LOCALS FOR REUSE
      parsed_result := &null
      
      if \avatar_face :=
	  transmit.getAvatarFaceFilename(avatar_definition, username ) then {
         avatar_face := map(avatar_face, "\\", "/")
	 # send \transfer filename filesize
         transmit.sendTransfer( avatar_face, srv )
         result := connection.Read() # hopefully a \request...
	 if not match("\\request ", \result) then {
	    log.logit("newuser(): the server returned, " ||
		      image(result))
	    connection.logout() # do a logout
	    connection.disconnect() # close the connection handle
	    fail
	    }

         # result must be of the form: \request filename filesize server port
         transmit.sendFile(result)
	 }
      else
         log.logit("newuser(): avatar def. file does not include info about _
		    the avatar's face.")

      connection.logout() # do a logout
      connection.disconnect() # close the connection handle
       }
   #else {
   #   write("Sorry, the server is down")
   #   }
   return
end


class PassValid : Dialog()
   method component_setup()
   local l, bn 

      if unvalidp = 1 then {
	 l := Label("label=please provide valid password",
		    "pos=50%,33%","align=c,c")  
	 }
      if unvalidp = 2 then {
         l := Label("label=make sure you enter correct password in re-enter ",
		    "pos=50%,33%","align=c,c")
         }
      add(l)
      bn := TextButton("label=OK", "pos=50%,66%", "align=c,c")
      bn.connect(self, "dispose", ACTION_EVENT)
      add(bn)
      attrib("size=500,150", "bg=light gray", "font=serif","resize=on")
    end
end

class UnValid : Dialog()
   method component_setup()
   local l, bn 

   if unvalidf = 1 then {
      l := Label("label=You need to provide a first name",
		 "pos=50%,33%","align=c,c")  
      }

   if unvalidl = 1 then {
      l := Label("label= You need to provide a Last name ",
		 "pos=50%,33%","align=c,c")
      }

   if unvalida = 1 then {
      l := Label("label=You need to provide an Affiliation ",
		 "pos=50%,33%","align=c,c")
      }

   add(l)
   bn := TextButton("label=OK", "pos=50%,66%", "align=c,c")
   bn.connect(self, "dispose", ACTION_EVENT)
   add(bn)
   attrib("size=500,150", "bg=light gray", "font=serif","resize=on")
   end
end

class UserValid : Dialog()
   method component_setup()
      local l, bn

      if unvalidu = 1 then {
         l := Label("label= Username exists already; choose another username",
		    "pos=50%,33%","align=c,c")  
         }
      else if unvalidu = 2 then {
         l := Label("label=You need to provide a login name",
		    "pos=50%,33%","align=c,c")
	 }
      add(l)

      bn := TextButton("label=OK", "pos=50%,66%", "align=c,c")
      bn.connect(self, "dispose", ACTION_EVENT)
      add(bn)
      attrib("size=500,150", "bg=light gray", "font=serif","resize=on")
  end
end

class emailValid : Dialog()
   method component_setup()
      local l, bn
      l := Label("label=Please enter a complete e-mail address in the _
		  format user@host.domain ","pos=50%,33%","align=c,c")
      add(l)
      bn := TextButton("label=OK", "pos=50%,66%", "align=c,c")
      bn.connect(self, "dispose", ACTION_EVENT)
      add(bn)
      attrib("size=500,150", "bg=light gray", "font=serif", "resize=on")
   end
end

class heightValid : Dialog()
   method component_setup()
      local l, bn

      if hcounter = 0 then {
	 l := Label("label= Please enter a valid height  ",
		    "pos=50%,33%","align=c,c")
	 }

      else if hcounter = 1 then {
	 l := Label("label=Make Sure You enter a valid height field ",
		    "pos=50%,33%","align=c,c")
	 }
      else {
	 l := Label("label=Please enter a valid height ",
		    "pos=50%,33%","align=c,c")
	 }
      add(l)
      bn := TextButton("label=OK", "pos=50%,66%", "align=c,c")
      bn.connect(self, "dispose", ACTION_EVENT)
      add(bn)
      attrib("size=500,150", "bg=light gray", "font=serif","resize=on")
    end
end

#
# GUI for avatar maker
#

class amaker : Dialog(quit_button, 
   ntext,ntext3,ntext2,ntext1,ntext4,ntext5,ntext6,uidb,pwdb,
   ptext, srv,infolist,validlist,
   htext, htextf,htexti,
   ftext1,
   ftext2, 
   ftext3dmodel,
   bctext,
   shirttext,
   pantstext,
   shoestext,
   overlay_set,
   overlay_first,overlay_second,
   overlay_third,overlay_fourth,
   overlay_seventh,overlay_sixth,

   os,
   overlay1, overlay2,

   bodylist_, 
   bodycolorlist_, 
   colorlist_, 
   genderlist_,
   shapelist_,
   headshapelist_,
   #serlist_,

   list_,
   slist_,
   shlist_,
   plist_,
   clist_,
   glist_,
   hdlist_,
   serverlist_,
   l0,l1,l2,l3,l4,l5,l6,l7,l8,l9,l10,l11,l12,l13,l14,l15,l16,l17,
   l20,l21,l18,label_valid,
   subwin)

   method change(e)
      #write("The tabset selection changed")
   end
   method handle_left_rotate(ev)
      angle -:= 0.05
      rerender()
   end
   method handle_right_rotate(ev)
      angle +:= 0.05
      rerender()
   end

   method handle_h_fieldfeet(ev)
     local heighf,heighti,ht
  
      heightf := htextf.get_contents() | ""
      heighti := htexti.get_contents() | ""
      if (heightf | heighti) == "" then {
	 hcounter := 0 
	 ht := heightValid()
	 ht.show_modal()
	 set_focus(htextf)
	 }
          
      else if \numeric(heightf) & \numeric(heighti) then {
	 height := heightf*30.48 + heighti*30.48/12

	 if 180 <= height <= 185 then height:=0.7
	 else if 175 <= height <= 179 then height:=0.675
	 else if 170 <= height <= 174 then height:=0.65
	 else if 165 <= height <= 169 then height:=0.625
	 else if height <= 164 then height:=0.6
	 else height:=0.8
	 rerender()
	 }

      else if \numeric(heighti) & heighti > 12 then {
	 hcounter := 1
	 ht := heightValid()
	 ht.show_modal()
	 set_focus(htexti)
	 }
      else {
	 hcounter := 2 
	 ht := heightValid()
	 ht.show_modal()
	 set_focus(htextf) 
	 }
      return 0
   end

   method init_dialog()
      ntext3.set_displaychar("*")
      ntext4.set_displaychar("*")
   end

   method handle_gif2avt(ev)
      local b
      b := gif2avt()
      b.show_modal()
      face := ftext2.set_contents(b.get_result())
      headchoice := 2
      rerender()
   end

   method handle_eggface_field(ev)
      local browser
      browser := FileDialog()
      browser.show_modal()
      face := ftext2.set_contents(browser.get_result())
      rerender()
   end
   method handle_squareface_field(ev)
      local browser
      browser := FileDialog()
      browser.show_modal()
      face := ftext1.set_contents(browser.get_result())
      rerender()
   end

   method handle_3dmodel_field(ev)
      local browser
      browser:=FileDialog()
      browser.show_modal()
      new_3dmodel_filename:=ftext3dmodel.set_contents(browser.get_result())
      rerender()
   end

   method handle_back2square(ev)
      os$set_which_one(overlay1)
   end

   method handle_gender()
      if glist_.get_selection() == "1" then
         gender := "m"
      else
         gender := "f"
      return gender
   end
   method handle_shape()
      case glist_.get_selection() of {
	 "1" : shape := "human"
	 "2" : shape := "dog"
	 "3" : shape := "penguin"
         }
      return shape
   end

   method handle_size(ev)
      size:=list_.get_selection()
      case size of {
         1: {
            xsize := 0.6
            ysize := 0.7
            }   # for very slim
         2: {
            xsize := 0.65 
            ysize := 0.7
            }   # for moderately slim
         3: {
            xsize := 0.7 
            ysize := 0.7
            }   # for average
         4: { 
            xsize := 0.75
            ysize := 0.7
            }   # for built
         5: {
            xsize := 0.8 
            ysize := 0.7
            }   # for big
	 6: {
            xsize := 0.9
            ysize := 0.8
            }   # for large
         }
      rerender()
   end
   method handle_hdshape(ev)
      headchoice := hdlist_.get_selection()
      fpanel := Panel("pos=50%,53%","size=180,100")

      # This code is commented to avoid egg-head 
      # avatar picture creation crashes

      #if headchoice = 2 then 
      #   os$set_which_one(overlay2)
      rerender()
   end
   method handle_pcolor(ev)
        pantscolor := plist_.get_contents() |"white"

      rerender()
   end
   method handle_scolor(ev)
     shirtcolor := slist_.get_contents() |"white"

      rerender()
   end
   method handle_bcolor(ev)
	primarycolor := clist_.get_contents() |"white"

      rerender()
   end
   method handle_shcolor(ev)
      shoescolor := shlist_.get_contents() |"white"
      rerender()
   end

   method handle_build(ev)
      overlay_set$set_which_one(overlay_second)
   end
   method handle_edit(ev)
      overlay_set$set_which_one(overlay_fourth)
   end
   method handle_check1(ev)
      overlay_set$set_which_one(overlay_fourth)
   end
   method handle_refresh(ev)
      rerender()
   end
   method getUsername()
      return ntext2.get_contents()
   end
   method getPassword()
      return ntext4.get_contents()
   end
   method getFirstname()
      return ntext.get_contents()
   end
   method getLastname()
      return ntext1.get_contents()
   end
   method getEmailid()
      return ntext5.get_contents()
   end
   method getAffiliation()
      return ntext6.get_contents()
   end
   method gettemp()
      return accept1
   end
   method getheight()
      return height
   end

   method getinfo()
      return [primarycolor,shirtcolor,pantscolor,shoescolor,headchoice,face] 
   end
   
   method handle_check2(ev)
   validlist := []
   validf := 0
	           
      if \clist_.get_contents()  then
        primarycolor := clist_.get_contents()
           
      if \slist_.get_contents() then 
	shirtcolor := slist_.get_contents()
     
      if \plist_.get_contents() then
	pantscolor := plist_.get_contents()
     
      if \shlist_.get_contents()  then
       shoescolor := shlist_.get_contents() 
    
       if /face then
       put(validlist,"Face")

      l5.label := "Height : "||htextf.get_contents()||"\""||
		htexti.get_contents()||"\'"||repl(" ", 20)
      l6.label := "Type   : "||bodylist_[size]
      l7.label := "Color  : "||primarycolor
      l8.label := "Shirt  : "||shirtcolor
      l9.label := "Pants  : "||pantscolor
      l10.label := "Shoes  : "||shoescolor
      l11.label := "Head Shape : "||headshapelist_[headchoice]
      l12.label := "Picture:  "||face

       overlay_set$set_which_one(overlay_seventh)

   end

   method handle_goback(ev)
      overlay_set$set_which_one(overlay_second)
   end  

   method valid_form()
      overlay_set$set_which_one(overlay_sixth)
   end

   method handle_next1(ev)
   local uid,udt,emdt,pos1,pos2,dt,unvd
   unvalidf := unvalidl := unvalida := unvalidu := unvalidp := unvalide := 0

   firstname := ntext.get_contents() | ""
   if firstname == "" then {
      unvalidf := 1
      unvd := UnValid()
      unvd.show_modal()
      overlay_set$set_which_one(overlay_second)
      set_focus(ntext)
      fail
      }
   else {
      unvalidf := 0  
      }

   lastname := ntext1.get_contents()  | ""
   if lastname == "" then {
     unvalidl := 1
     overlay_set$set_which_one(overlay_second)
     unvd := UnValid()
     unvd.show_modal()
     set_focus(ntext1)
     fail
     }
   else {
      unvalidl := 0 
      } 
   uid := ntext2.get_contents() | ""
   username := uid
   if uid == "" then {
      unvalidu := 2
      udt := UserValid()
      udt.show_modal()
      set_focus(ntext2)
      fail
      }
   else {
      txt := output_path || uid || ps || uid || ".avt"
      if stat(txt) then {
	 unvalidu := 1
	 udt := UserValid()
	 udt.show_modal()
	 set_focus(ntext2)
	 fail
	 }
      else { 
	 unvalidu := 0
	 rerender()
         }
      }

   password := ntext3.get_contents() | ""
   password1 := ntext4.get_contents() | ""
  
   if password == "" then {
      unvalidp := 1
      dt := PassValid()
      dt.show_modal()
      set_focus(ntext3)
	 fail
      } 
   else if password1 == "" then {
      unvalidp := 1
      dt := PassValid()
      dt.show_modal()
      set_focus(ntext4)
	 fail
      }
   else if password ~== password1 then {
      unvalidp := 2
      dt := PassValid()
      dt.show_modal()
      set_focus(ntext4)
      fail
      } 
   else {
      unvalidp := 0
      }

   emailid := ntext5.get_contents()| " "  

   pos1 := \find("@",emailid) | " "
   pos2 := \find(".",emailid) | " "

   if not (find("@",emailid) < find(".",emailid)) then {
      unvalide := 1
      emdt := emailValid()
      emdt.show_modal()
      set_focus(ntext5)
      fail
      }
   else {
      unvalide := 0
      }
   affiliation := ntext6.get_contents() | ""

   if affiliation == "" then {
      unvalida := 1
      udt := UnValid()
      udt.show_modal()
      set_focus(ntext6)
      fail
      }
   else
      unvalida := 0
  
   gender := handle_gender()

   if ((unvalidf | unvalidl | unvalide | unvalida) = 1) |
      ((unvalidu | unvalidp) ~= 0) then {
      overlay_set$set_which_one(overlay_second)
      }
   else {
      l14.label := "FirstName entered: " || firstname
      l15.label := "LastName entered: " || lastname
      l1.label := "Name of Your Avatar: " || username
      l2.label := "Password entered: " || password
      l16.label := "EmailId entered: " || emailid
      l17.label := "Affiliation entered: " || affiliation
      l4.label := "Gender : " || gender
      overlay_set$set_which_one(overlay_third)
      }
  end

   method handle_previous(ev)
      overlay_set$set_which_one(overlay_second)
   end

   method handle_previous1(ev)
      overlay_set$set_which_one(overlay_third)
   end

   method handle_quit(ev)
      dispose()
      exit(0)
   end
   method on_subwin(ev)
      #write("subwin")
   end
   method on_br()
   end
   method on_mr()
   end
   method on_kp()
   end
   method handle_done(ev)
      local pr, auth_f, fd,facefile,facecontent,facefile1,facedestination

      if 180 <= height <= 185 then height := 0.7
      else if 175 <= height <= 179 then height := 0.675
      else if 170 <= height <= 174 then height := 0.65
      else if 165 <= height <= 169 then height := 0.625
      else if height <= 164 then height := 0.6
      else height := 0.8
      
      if not stat(output_path || username) then {
         if not mkdir (output_path || username) then {
	    write(&errout, "mkdir: ", image(output_path), " failed")
	    }
	 }
      txt := output_path || username ||ps|| username || ".avt"
      if f := open(txt, "w") then {
	 write(f, "#@ Avatar property file generated by amaker.icn\n",
	       "#@ on:\t",&clock ," MST ",&date, "\n",
	       "NAME=", username, "\n",
	       "GENDER=",gender, "\n",
	       "HEIGHT=",height, "\n",
	       "XSIZE=",xsize, "\n",
	       "YSIZE=",ysize, "\n",
	       "ZSIZE=",zsize, "\n",
	       "SKIN COLOR=",primarycolor, "\n",
	       "SHIRT COLOR=",shirtcolor, "\n",
	       "PANTS COLOR=",pantscolor, "\n",
	       "SHOES COLOR=",shoescolor, "\n",
	       "HEAD SHAPE=",headchoice, "\n",
	       "SHAPE=",shape, "\n",
	       "FACE PICTURE=", username || face[-4:0])
	 if new_3dmodel_filename~=="default" then
	    write(f, "3D MODEL=", filename(new_3dmodel_filename))
         write(f, "Privacy=Everyone")
	 close(f)
	 }
      else write("open ", image(txt), " failed")
               
      if /face | (trim(face)=="") then
	 face := map("dat/textures/smily.gif","/",PS)
	 else face := map(face,"/",PS)
      if not stat(face) then {
#	 write(&errout, "can't stat ",
#	       image(datfile(face))|"(datfile failed)",
#	       ", reverting to smily.gif")
	 face := map("dat/textures/smily.gif","/",PS)
	 }
      if facefile := open(face,"ru") then {
	 facecontent := reads(facefile,stat(face).size)
	 close(facefile)
	 }
      else {
	 write(&errout, "uh oh, no face file")
	 facecontent := "There was no face."
	 }
      facedestination := output_path || username ||ps|| username || face[-4:0]
      if facefile1 := open(facedestination,"wu") then {
	 writes(facefile1,facecontent)
	 close(facefile1)
	 }
      else {
	 write(&errout, "uh oh, no face destination")
	 }
	 
      if new_3dmodel_filename~=="default" then {
	 if system("cp "||new_3dmodel_filename||" "||output_path||username)then
	    write("3D model file copied successfully")
	 else
	    write("Error: copying 3D model file failed")
	 }

      accept1 := 1 

      dispose()
   end

   method component_setup()
      #local tab_set, tab_item_1, tab_item_2, tab_item_3
      local pic, pic0, pic1, picl0, picl, picl1,label_AC1,label_AC2,label_AC3
      local next1,next2, page2, goback, finalize, done, back2square ,
	page3,page4,page5
      local b, c, d, butt, butt1, b2, b3, b4, b5,b6, l, r, h, h1 ,
	b7,b8,b10,b11,b12,b13,b14,b15,b16,emailb,df
      local npanel, nlabel, ppanel, plabel, gpanel, glabel, bcpanel, bclabel
      local bpanel, blabel, fpanel, flabel, bspanel, bslabel,butpanel,
	buttenpanel
      local shpanel, shlabel,serverpanel, hpanel, hlabel,label_Edit,
	label_Edit1,Passlabel,Idlabel,Enterbutton

      attrib("size=890,565", "font=sans", "bg=light gray",
	     "label=New User Account Creation", "resize=on")
      overlay_set := OverlaySet()
      overlay_set$set_pos("0", "0")
      overlay_set$set_size("600", "565")

      # A former title page was deleted.
   
      #
      #  Page number : 2  First pane 
      #

      overlay_second := OverlayItem()
      page2 := Panel("pos=0,0", "size=600,565", "bg=white")            

      label_AC1 := Label()
      label_AC1.set_pos(200, 25)
      #label_AC1.set_size(20, )
      label_AC1.set_internal_alignment("l")
      label_AC1.set_attribs("fg=blue", "font=serif,18,bold")
      label_AC1.set_label("Avatar Creation (Step 1)")
      page2$add(label_AC1)

      npanel := Panel("pos=5%,10%", "size=180, 50")
      nlabel := Label("pos=0,10", "label= First Name")
      npanel.add(nlabel)
      ntext := TextField("pos=100,0","size=130,","draw_border=t")
      ntext.set_contents(firstName)
      npanel.add(ntext)
      #set_focus(ntext)
      #npanel.set_initial_focus(ntext)
      nlabel1 := Label("pos=250,10", "label= Last Name")
      npanel.add(nlabel1)
      ntext1 := TextField("pos=350,0","size=130,","draw_border=t")
      ntext1.set_contents(lastName)
      npanel.add(ntext1)
      nlabel2 := Label("pos=0,50", "label= Login Id")
      npanel.add(nlabel2)
      ntext2 := TextField("pos=100,50","size=130,","draw_border=t")
      ntext2.set_contents(loginid)
      npanel.add(ntext2)
      nlabel3 := Label("pos=0,100", "label= Password")
      npanel.add(nlabel3)
      ntext3 := TextField("pos=100,100","size=130,","draw_border=t")
      ntext3.set_contents()
      npanel.add(ntext3)
      nlabel4 := Label("pos=250,100", "label= Re-enter")
      npanel.add(nlabel4)
      ntext4 := TextField("pos=320,100","size=130,","draw_border=t")
      ntext4.set_contents(password1)
      npanel.add(ntext4)

      nlabel5 := Label("pos=0,150", "label= Email")
      npanel.add(nlabel5)
      ntext5 := TextField("pos=100,150","size=200,","draw_border=t")
      ntext5.set_contents(email)
      npanel.add(ntext5)
      nlabel6 := Label("pos=0,200",  "label= Affiliation")
      npanel.add(nlabel6)
      ntext6 := TextField("pos=100,200","size=200,","draw_border=t")
      ntext6.set_contents(affiliation)
      npanel.add(ntext6)
      nlabel7 := Label("pos=320,210", "label=(Your School or Sponsor)")
      nlabel7.set_attribs("font=sans,12,italics,bold","fg=blue")
      npanel.add(nlabel7)

# gender
      #gpanel := Panel("pos=7%,60%", "size=180, 50")
      nlabel8 := Label("pos=0,253","label=Choose your gender")
      npanel.add(nlabel8)
      glist_ := List("pos=150,250", "size=100,")
      glist_.connect(self,"handle_gender",SELECTION_CHANGED_EVENT)
      glist_.set_selection_list(genderlist_)
      npanel.add(glist_)

#Shape type
      nlabel9 := Label("pos=280,253","label=Choose your shape")
      npanel.add(nlabel9)
      edit_list_1 := EditList()
      edit_list_1.set_pos("430", "250")
      edit_list_1.set_size("100", )
      edit_list_1.set_selection_list(shapelist_)
      edit_list_1.set_contents("human")
      edit_list_1.connect(self,"handle_shape",SELECTION_CHANGED_EVENT)
      npanel.add(edit_list_1)

      text_list_1 := TextList()
      text_list_1.set_pos(0, 285)
      text_list_1.set_size("530", "150")
      text_list_1.set_draw_border()
      text_list_1.set_attribs("font=mono,12,italics,bold")
      text_list_1.set_contents(["License:"," ",
   "   * This is free software distributed under the GNU Public License(GPL).",
   "   * I understand the CVE system is experimental research software.",
   "   * I understand it may crash at any time! :-)",
   "   * I will not hold the CVE project liable for problems.",
   "   * I will behave professionally and not expect a commercial game",
   "      experience from my free CVE educational software.",
   "   * I will report problems and be patient with the staff!"])
      npanel.add(text_list_1)
      
      bl := TextButton("label=Next", "pos=240,465")
      bl.connect(self, "handle_next1", ACTION_EVENT)
      npanel.add(bl)
      bl0 := TextButton("label=Quit", "pos=300,465")
      bl0.connect(self, "handle_quit", ACTION_EVENT)
      npanel.add(bl0)
      page2$add(npanel) 

      overlay_second$add(page2)
      overlay_set$add(overlay_second)
      overlay_set$set_which_one(overlay_second)

      #
      # Third Page -------------Second panel of Page 2
      #

      overlay_third := OverlayItem()
      page3 := Panel("pos=0,0", "size=600,565", "bg=white")

      label_AC2 := Label()
      label_AC2.set_pos(200, 60)

      label_AC2.set_internal_alignment("l")
      label_AC2.set_attribs("fg=blue", "font=serif,18,bold")
      label_AC2.set_label("Avatar Creation (Step 2)")
      page3$add(label_AC2)
    

      # Height
      hpanel := Panel("pos=5%,20%", "size=275, 50")
      hlabel := Label("pos=0,0", "label=Enter your height(in feet and inches)")
      hpanel.add(hlabel)

      htextf := TextField("pos=0,30","size=40,","draw_border=t")
      htextf.set_contents("5")
      hpanel.add(htextf)
      htexti := TextField("pos=45,30","size=65,","draw_border=t")
      htexti.set_contents("7")
      hpanel.add(htexti)

      df := TextButton("label=OK", "pos=150,30")
      df.connect(self, "handle_h_fieldfeet", ACTION_EVENT)
      hpanel.add(df)
      page3$add(hpanel)    

      # Body
      bpanel := Panel("pos=5%,35%", "size=180, 50")
      blabel := Label("pos=0,0","label=Choose your body type")
      bpanel.add(blabel)
      list_ := List("pos=0,30", "size=100,")
      list_.connect(self,"handle_size",SELECTION_CHANGED_EVENT)
      list_.set_selection_list(bodylist_)
      bpanel.add(list_)
      page3$add(bpanel)

      # Head Shape
      fpanel := Panel("pos=5%,50%","size=230,150")
      os := OverlaySet()
      os$set_pos("0", "0")
      os$set_size("230", "150")
      overlay1 := OverlayItem()
      overlay1$add(Label("pos=0,0","label=Choose your head shape"))
      hdlist_ := List("pos=0,30", "size=80,")
      hdlist_.connect(self,"handle_hdshape",SELECTION_CHANGED_EVENT)
      hdlist_.set_selection_list(headshapelist_)
      overlay1$add(hdlist_)

      overlay1$add(Label("pos=0,65", "label=Select your square-head picture"))
      ftext1 := TextField("pos=0,90","size=130,","draw_border=t")
      overlay1$add(ftext1)
      ftext1.set_is_shaded()
      h := TextButton("label=Browse...", "pos=140,90")
      h.connect(self, "handle_squareface_field", ACTION_EVENT)
      h.set_is_shaded()
      overlay1$add(h)

      overlay1$add(Label("pos=0,125", "label= Do you have a 3D model file ?"))
      ftext3dmodel := TextField("pos=0,150","size=130,","draw_border=t")
      ftext3dmodel.set_is_shaded()
      overlay1$add(ftext3dmodel)
      h3dmodel := TextButton("label=Browse...", "pos=140,150")
      h3dmodel.connect(self, "handle_3dmodel_field", ACTION_EVENT)
      h3dmodel.set_is_shaded()
      overlay1$add(h3dmodel)

      os$add(overlay1)
      os$set_which_one(overlay1)
      overlay2 := OverlayItem()
      overlay2$add(Label("pos=0,0", "label=Select your egg-head picture"))
      ftext2 := TextField("pos=0,30","size=130,","draw_border=t")
      overlay2$add(ftext2)
      h1 := TextButton("label=Browse...", "pos=140,30")
      h1.connect(self, "handle_eggface_field", ACTION_EVENT)
      overlay2$add(h1)
      overlay2$add(Label("pos=30,60","label=OR"))
      butt1 := TextButton("label=Create egg-head picture", "pos=0,80")
      butt1.connect(self, "handle_gif2avt", ACTION_EVENT)
      overlay2$add(butt1)
      back2square := TextButton("label=<== Back to Squarehead", "pos=0,120")
      back2square.connect(self, "handle_back2square", ACTION_EVENT)
      overlay2$add(back2square)
      os$add(overlay2)
      fpanel.add(os)      

      page3$add(fpanel)

      #body color
      bcpanel := Panel("pos=65%,20%", "size=180, 50")
      bclabel := Label("pos=0,0","label=Choose/Edit primary body color")
      bcpanel.add(bclabel)
      clist_ := EditList()
      clist_.set_pos("0","30")
      clist_.set_size("100","25")
      clist_.set_selection_list(["white","blue","green","red","yellow",
				 "black","purple","pink","brown"])
      clist_.set_selection(1)
      clist_.connect(self,"handle_bcolor",SELECTION_CHANGED_EVENT)
      bcpanel.add(clist_)
      b10 := TextButton("label=OK", "pos=130,30")
      b10.connect(self, "handle_bcolor", ACTION_EVENT)
      bcpanel.add(b10)
      page3$add(bcpanel)

      # Shirt Color
      bspanel := Panel("pos=65%,35%", "size=180, 50")
      bslabel := Label("pos=0,0","label=Choose/Edit your shirt color")
      bspanel.add(bslabel)
      slist_ := EditList()
      slist_.set_pos("0","30")
      slist_.set_size("100","25")
      slist_.set_selection_list(["white","blue","green","red","yellow",
				 "black","purple","pink","brown"])
      slist_.set_selection(1)
	slist_.connect(self,"handle_scolor",SELECTION_CHANGED_EVENT)
      bspanel.add(slist_)
      b12 := TextButton("label=OK", "pos=130,30")
      b12.connect(self, "handle_scolor", ACTION_EVENT)
      bspanel.add(b12)
      page3$add(bspanel)

      # Pants Color
      ppanel := Panel("pos=65%,50%", "size=180, 50")
      plabel := Label("pos=0,0","label=Choose/Edit your pants color")
      ppanel.add(plabel)
      plist_ := EditList()
      plist_.set_pos("0","30")
      plist_.set_size("100","25")
      plist_.set_selection_list(["white","blue","green","red","yellow",
				 "black","purple","pink","brown"])
      plist_.set_selection(1)
      plist_.connect(self,"handle_pcolor",SELECTION_CHANGED_EVENT)
      ppanel.add(plist_)
      b15 := TextButton("label=OK", "pos=130,30")
      b15.connect(self, "handle_pcolor", ACTION_EVENT)
      ppanel.add(b15)
      page3$add(ppanel)

      # Shoes Color
      shpanel := Panel("pos=65%,65%", "size=180, 50")
      shlabel := Label("pos=0,0","label=Choose/Edit your shoes color")
      shpanel.add(shlabel)

      shlist_ := EditList()
      shlist_.set_pos("0","30")
      shlist_.set_size("100","25")
      shlist_.set_selection_list(["white","blue","green","red","yellow",
				  "black","purple","pink","brown"])
      shlist_.set_selection(1)
	shlist_.connect(self,"handle_shcolor",SELECTION_CHANGED_EVENT)
      shpanel.add(shlist_)
      b16 := TextButton("label=OK", "pos=130,30")
      b16.connect(self, "handle_shcolor", ACTION_EVENT)
      shpanel.add(b16)
      page3$add(shpanel)

      butpanel := Panel("pos=25%,85%","size=250,100")
      b8 := TextButton("label=Back", "pos=0%,40%")
      b8.connect(self, "handle_previous", ACTION_EVENT)
      butpanel.add(b8) 

      done := TextButton("label=Next", "pos=40%,40%")
      done.connect(self, "handle_check2", ACTION_EVENT)
      butpanel$add(done)
   
      b11 := TextButton("label=Quit", "pos=80%,40%")
      b11.connect(self, "handle_quit", ACTION_EVENT)
      butpanel.add(b11) 
      page3$add(butpanel)
      
      overlay_third$add(page3)
      overlay_set$add(overlay_third)

 overlay_seventh := OverlayItem()
      page4 := Panel("pos=0,0", "size=600,565", "bg=white")

      label_AC3 := Label()
      label_AC3.set_pos(200, 60)
      #label_AC1.set_size(20, )
      label_AC3.set_internal_alignment("l")
      label_AC3.set_attribs("fg=Blue", "font=serif,18,bold")
      label_AC3.set_label("Review your information (Step 3)")
      page4$add(label_AC3)

      l1 := Label("pos=20%,20%", "label=Name of Your Avatar: "||username||
		repl(" ", 30))
      l2 := Label("pos=20%,23%",  "label=Password entered: "|| password ||
		repl(" ", 25))
      l14 := Label("pos=20%,26%", "label=firstname entered: "|| getFirstname() ||
		 repl(" ", 25))
      l15 := Label("pos=20%,29%", "label=lastname entered: "|| getLastname() ||
		 repl(" ", 25))
      l16 := Label("pos=20%,32%", "label=email entered: "||getEmailid() ||
		 repl(" ", 50))
      l17 := Label("pos=20%,35%", "label=affiliation entered: "||
		 getAffiliation()|| repl(" ", 50))
      l18 := Label("pos=20%,38%", "label" || repl("=",50))
      l4 := Label("pos=20%,41%",
		"label=Gender : "||handle_gender()||repl(" ", 10))
      l5 := Label("pos=20%,44%",
		"label=Height : "|| getheight()||"("||htextf.get_contents()||
		"\'"||htextf.get_contents()||"\""||repl(" ", 20))
      l6 := Label("pos=20%,47%",
		"label=Type   : "||bodylist_[size]|| repl(" ", 30))
      l7 := Label("pos=20%,50%",
		"label=Body Color  : "||primarycolor|| repl(" ", 30))
      l8 := Label("pos=20%,53%",
		"label=Shirt Color : "||shirtcolor|| repl(" ", 30))
      l9 := Label("pos=20%,56%",
		"label=Pants Color : "||pantscolor|| repl(" ", 30))
      l10 := Label("pos=20%,59%",
		 "label=Shoes Color : "||shoescolor|| repl(" ", 30))
      l11 := Label("pos=20%,62%", "label=Head Shape : "||
				 headshapelist_[headchoice]||repl(" ", 30))
      l12 := Label("pos=20%,65%", "label=Picture: "||face||repl(" ", 70))
      l20 := Label("pos=20%,68%", "label=Shape: "||shape||repl(" ", 10))
      #l21 := Label("pos=20%,71%",
      #		  "label=3D Model: "||new_3dmodel_filename||repl(" ", 70))
      l13 := Label("pos=20%,74%", "label" || repl("=",51))

      page4$add(l1)
      page4$add(l2)
      page4$add(l4)
      page4$add(l5)
      page4$add(l6)
      page4$add(l7)
      page4$add(l8)
      page4$add(l9)
      page4$add(l10)
      page4$add(l11)
      page4$add(l12)
      page4$add(l13)
      page4$add(l14)
      page4$add(l15)
      page4$add(l16)
      page4$add(l17)
      page4$add(l18)
      page4$add(l20)
      #page4$add(l21)
	
      goback := TextButton("label=Make Correction", "pos=30%,90%")
      goback.connect(self, "handle_goback", ACTION_EVENT)
      finalize := TextButton("label=Submit", "pos=60%,90%")
      finalize.connect(self, "handle_done", ACTION_EVENT)
      b13 := TextButton("label=Quit", "pos=80%,90%")
      b13.connect(self, "handle_quit", ACTION_EVENT)
      page4$add(b13)
      page4$add(goback)
      page4$add(finalize)
      overlay_seventh$add(page4)
      overlay_set$add(overlay_seventh)

      #
      # Sixth PAGE
      #
      overlay_sixth := OverlayItem()
      page5 := Panel("pos=0,0", "size=600,565", "bg=white")

      label_valid := Label()
      label_valid.set_pos(0, 300)  
      label_valid.set_size("530", "150")  
      label_valid.set_internal_alignment("c")
      label_valid.set_attribs("fg=Blue", "font=serif,18,bold")
      label_valid.set_label("Please Fill All account Information")
      page5$add(label_valid )
      goback1 := TextButton("label=Go To Account", "pos=30%,85%")
      goback1.connect(self, "handle_goback", ACTION_EVENT)
      page5$add(goback1)

      b14 := TextButton("label=Quit", "pos=80%,85%")
      b14.connect(self, "handle_quit", ACTION_EVENT)        
      page5$add(b14)
           
      overlay_sixth$add(page5)
      overlay_set$add(overlay_sixth)
     
      #
      # Edit Avatar Screen
      #
      overlay_fourth := OverlayItem()
      EditPage := Panel("pos=0,0", "size=600,565", "bg=white")

      label_Edit := Label()
      label_Edit.set_pos(220, 200)
      label_Edit.set_internal_alignment("l")
      label_Edit.set_attribs("fg=Green", "font=serif,20,bold")
      label_Edit.set_label("Edit Your Avatar")
      EditPage$add(label_Edit)

      label_Edit1 := Label()
      label_Edit1.set_pos(200, 250)
      label_Edit1.set_internal_alignment("l")
      label_Edit1.set_attribs("fg=blue", "font=serif,18,bold")
      label_Edit1.set_label("Enter Your Login and Password")
      EditPage$add(label_Edit1)

      Idlabel := Label("pos=200,300", "label= Login Id")
      EditPage$add(Idlabel)
      Idtext := TextField("pos=320,300","size=130,","draw_border=t")
      Idtext.set_contents(loginid)
      EditPage$add(Idtext)

      Passlabel := Label("pos=200,350", "label= Password")
      EditPage$add(Passlabel)
      passtext := TextField("pos=320,350","size=130,","draw_border=t")
      passtext.set_contents(password)
      EditPage$add(passtext)

      Enterbutton := TextButton("label=Enter", "pos=280,400", "align=c,c")
      Enterbutton.connect(self, "handle_check1", ACTION_EVENT)
      EditPage$add(Enterbutton)     

      overlay_fourth$add(EditPage)
      overlay_set$add(overlay_fourth)
	add(overlay_set)
      
# Subwindow
      subwin := Subwindow3D()
      subwin.set_pos(0,0)
      subwin.set_size("250", "450")
	
      subwin.connect(self, "on_subwin", ACTION_EVENT)
      subwin.connect(self, "on_br", BUTTON_RELEASE_EVENT)
      subwin.connect(self, "on_mr", MOUSE_RELEASE_EVENT)
      subwin.connect(self, "on_kp", KEY_PRESS_EVENT)
      self.add(subwin)

      # Refresh button
      b := TextButton("label=Refresh", "font=serif,12,bold" ,
		      "fg=Blue","pos=700,520")
         
      b.connect(self, "handle_refresh", ACTION_EVENT)
      self.add(b)
      self.add(Label("pos=700,30","fg=Blue",
		     "font=serif,15,bold","label=Your Avatar"))
      # left/right rotate buttons
      l := TextButton("label=<=", "font=serif,12,bold" ,
		     "fg=Brown","pos=670,520")
      l.connect(self, "handle_left_rotate", ACTION_EVENT)
      self.add(l)
      r := TextButton("label==>", "font=serif,12,bold" ,
		     "fg=Brown","pos=760,520")
      r.connect(self, "handle_right_rotate", ACTION_EVENT)
      self.add(r)
      connect(self, "handle_quit", CLOSE_BUTTON_EVENT)
   end

initially(a[])
   self.Dialog.initially()
   $ifdef _UNIX
      ps := "/"
   $else
      ps := "\\"
   $endif
   output_path := "dat" ||ps||"users"||ps
   pic_path :=   DAT ||ps||"textures"||ps
   #pass_path :=  "dat" ||ps||"users"

   username := (getenv("USER"|"USERNAME")|"")
   password := "guest"
   firstname  := "" 
   lastname := ""
   emailid := ""
   affiliation := ""
   height := "180"
   size := "3"
   gender := "m"
   primarycolor := "white"
   shirtcolor := "white"
   pantscolor := "white"
   shoescolor := "white"
   face := "dat/textures/smily.gif"
   headchoice := 1    
   height := 0.7
   xsize := 0.7
   ysize := 0.7
   zsize := 0.7
   angle := 0
   count := 0
   accept1 := 0

   bodylist_ := ["Very Slim", "Moderately Slim", "Average",
	       "built", "Big", "Large"]
   bodycolorlist_ := ["white","yellow", "brown", "orange", "pink"]
   colorlist_ := ["white","blue","green","red","yellow",
		"black","purple","pink","brown"]
   genderlist_ := ["man","woman"]
   headshapelist_ := ["Block", "Egg"]
   shapelist_ := ["human"] #shapelist_ := ["dog", "penguin", "human"]
   shape := "human"
   new_3dmodel_filename := "default"
end

procedure rerender()
   local body_pic := 0
   local txcoords, tmp, sz, coords

   if height == "" then {
      height := 0.7
      }
   EraseArea()
   Translate(0,0.5,-4)
   Rotate(rtod(angle),0,1,0)
   Scale(xsize,height,zsize)
   if map(primarycolor[-4:0]) == ".gif" then {
      WAttrib("texmode=on","texture="||primarycolor) |
          write("couldn't turnon texture ", image(primarycolor))
      body_pic := 1 
      }
   else {
      WAttrib("texmode=off")
      Fg("ambient "||primarycolor) |
	    write("couldn't set fg ", image(primarycolor))
      }
   if headchoice = 1 then {
      DrawSphere(0,0.6,0,0.5) # head
      WAttrib("texmode=on","texture="||face,"texcoord=auto")
      # Face cube            
      txcoords    := [0.0, 0.0,   0.0, 1.0,   1.0, 1.0,   1.0, 0.0 ]   
      tmp :=       txcoords[1] || "," || txcoords[2] || "," || 
         txcoords[3] || ","
      tmp := tmp || txcoords[4] || "," || txcoords[5] || "," || 
         txcoords[6] || ","
      tmp := tmp || txcoords[7] || "," || txcoords[8]
      sz := 0.65 / 2.0
      coords := [ 0     , 0,      0,
                  0     , 2 * sz, 0,
                  2* sz , 2 * sz, 0,
                  2* sz , 0,      0 ]
      
      # Face polygon # formerly a cube
      PushMatrix() 
         Translate( -sz, 0.6/2, 0.5) 
         WAttrib("texmode=on", "texture="|| face, "texcoord="||tmp) 
         FillPolygon ! coords
         WAttrib("texmode=off")
      PopMatrix() 
      } 
   else {
      PushMatrix()
         #write("face is ", face)
         WAttrib("texmode=on","texture="||face,"texcoord=auto") |
	    write("couldn't turnon texture ", image(face))
         Translate(0,0.7,0)
         Rotate(270, 1, 0, 0)
         Scale(1,1,1.2)
         DrawSphere(0,0,0,0.5)
         WAttrib("texmode=off")
      PopMatrix()
      }
   DrawCylinder(0,0,0,0.1,0.1,0.1) #neck
   WAttrib("texmode=off")
   if map(shirtcolor[-4:0]) == ".gif" then {
      write("Shirt is :", shirtcolor)
      WAttrib("texmode=on","texture="||shirtcolor) |
	 write("couldn't set texture ", image(shirtcolor))
      }
   else {
      Fg("ambient "||shirtcolor) |
	    write("couldn't set fg ", image(shirtcolor))
      }
   DrawCylinder(0,-1,0,1.0,0.5,0.5) #body
   if gender == "w" then {
      DrawSphere(0.175,-0.3,0.3, 0.3)     # chest1
      DrawSphere(-0.175,-0.3,0.3, 0.3)    # chest2
      createNameTag(username,0.8,0,-0.75,0.5)
      }
   else
      createNameTag(username,0.8,0,-0.3,0.5)  
   DrawSphere(0.7,-0.1,0,0.3) # left shoulder
   DrawSphere(-0.7,-0.1,0,0.3) # right shoulder
   WAttrib("texmode=off")
   if body_pic == 1 then {
      WAttrib("texmode=on","texture="||primarycolor) |
	    write("couldn't set texture ", image(primarycolor))
      }
   else {
      Fg("ambient "||primarycolor) |
	    write("couldn't set fg ", image(primarycolor))
      }
   DrawCylinder(0.7,-1.2,0, 1.2, 0.15, 0.15) # left arm
   DrawSphere(0.7,-1.15*0.95,0,0.24) # left hand
   DrawCylinder(-0.7,-1.2,0,1.2,0.15,0.15) # right arm
   DrawSphere(-0.7,-1.15*0.95,0,0.24) # right hand
   WAttrib("texmode=off")
   if map(pantscolor[-4:0]) == ".gif" then {
      WAttrib("texmode=on","texture="||pantscolor) |
	    write("couldn't set texture ", image(pantscolor))
      }
   else {
      Fg("ambient "||pantscolor) |
	    write("couldn't set fg ", image(pantscolor))
      }
   DrawSphere(0.25,-0.95,0,0.25) # left pelvis
   DrawCylinder(0.25,-0.95-0.85,0,0.85,0.25*0.7,0.25*0.7) # left leg    
   DrawSphere(-0.25,-0.95,0,0.25) # right pelvis
   DrawCylinder(-0.25,-0.95-0.85,0,0.85,0.25*0.7,0.25*0.7) # right leg
   WAttrib("texmode=off")  
   if map(shoescolor[-4:0]) == ".gif" then {
      WAttrib("texmode=on","texture="||shoescolor) |
	    write("couldn't set texture ", image(shoescolor))
      }
   else {
      Fg("ambient "||shoescolor) |
	    write("couldn't set fg ", image(pantscolor))
      }
   DrawTorus(0.25,-0.95-0.85,0,0.13,0.2) # left foot
   DrawTorus(-0.25,-0.95-0.85,0,0.13,0.2) # right foot
   WAttrib("texmode=off") 
   Refresh()
end

procedure createNameTag(name,len,x,y,z)
   local i, txcoords, tmp, interval, ls, coords
   i := 0
   ls := len/*name    #*/
   interval := -(x+len/2)
   WAttrib("texmode=off")
   while i < *name do {
      txcoords    := [0.0, 0.0,   0.0, 1.0,   1.0, 1.0,   1.0, 0.0 ]   
      tmp :=       txcoords[1] || "," || txcoords[2] || "," || 
              txcoords[3] || ","
      tmp := tmp || txcoords[4] || "," || txcoords[5] || "," || 
              txcoords[6] || ","
      tmp := tmp || txcoords[7] || "," || txcoords[8]
      coords := [ 0 , 0 , 0,
                  0 , ls, 0,
                  ls, ls, 0,
                  ls, 0 , 0 ]
          PushMatrix() 
            Translate(interval,y,z)
            WAttrib("texmode=on","texture="||output_path||"images"||ps||
		    "letters"|| ps||name[i+1]||".gif", "texcoord="||tmp) 
            FillPolygon ! coords
            WAttrib("texmode=off")
            DrawCube(ls/2,ls/2,-ls/2-0.001,ls) 
          PopMatrix()
          interval +:= ls
          i +:= 1
    }
    WAttrib("texmode=off")
end

procedure amake(d)
   &window := d
   WAttrib("texmode=on")
   rerender()
end


class Subwindow3D : Component ()
   method display()
      amake(cwin)
      Refresh(cwin)
   end
   method init()
      if /self.parent then
         fatal("incorrect ancestry (parent null)")
      self.parent_dialog := self.parent.get_parent_dialog_reference()

      self.cwin := (Clone ! ([self.parent.get_cwin_reference(), "gl",
			      "size="||w_spec||","||h_spec, "bg=gray",
			      "pos=605,50", "inputmask=mck"] |||
			     self.attribs))
      self.cbwin := (Clone ! ([self.parent.get_cbwin_reference(), "gl",
			       "size="||w_spec||","||h_spec, "bg=gray",
			       "pos=605,50"] |||
			      self.attribs))
      set_accepts_focus()
      #dispatcher.add_subwin(self.cwin)
   end
end
#
# gif2avt
#
class gif2avt : Dialog(quit_button,
   ftext,         
   picture,       # .gif file to be processed
   img,win2,win3,
   xoffset, yoffset,
   isSelecting,
   result,imagename,
   PL,   # list that saves all the points clicked
   count # number of points chosen
   )
   method handle_undo1(ev)
      local i
      Zoom(img,cwin,0,0,WAttrib(img,"width"),WAttrib(img,"height"),
         200,200,128,128)
      count := 0
      every i := !PL  do  { pull(PL) }
   end
   method handle_picture_entered(ev)
      local browser, temp 
      browser := FileDialog()
      browser.show_modal()
      picture := ftext.set_contents(browser.get_result())
      img := WOpen("size=128,128", "canvas=hidden")
      temp := WOpen("image="||picture, "canvas=hidden")|fail
      Zoom(temp,img,0,0,WAttrib(temp,"width"),WAttrib(temp,"height"),
         0,0,128,128)
      Zoom(img,cwin,0,0,WAttrib(img,"width"),WAttrib(img,"height"),
         200,200,128,128)
      WClose(temp)
   end
   method handle_tile (ev)
      local i
      Fg(cwin, "red")
      isSelecting := 1
      Zoom(img,cwin,0,0,WAttrib(img,"width"),WAttrib(img,"height"),
         200,200,128,128)
      count := 0
      every i := !PL  do  { pull(PL) }
   end
   method handle_tile_done(ev)
      local h1,w1,h2,w2,xdiff,ydiff, i, j
      isSelecting := 0
      h1 := PL[*PL-3]-200
      w1 := PL[*PL-2]-200
      h2 := PL[*PL-1]-200
      w2 := PL[*PL]-200
      xdiff := h2-h1
      ydiff := w2-w1
      i := j := 0
      win3 := WOpen("size=512,512", "canvas=hidden")|stop("NO!!!!!")
      while i < 256 do { 
         while j < 256 do { 
            CopyArea(img,win3,h1,w1,h2,w2,i,j)|stop("too much!!!")
            j +:= ydiff 
            }
         j := 0
         i +:= xdiff
         }
      CopyArea(win3,cwin,0,0,WAttrib(win3, "width"), 
         WAttrib(win3, "height"), 540,340)
   end
   method handle_face (ev)
      Fg(cwin, "green")
      isSelecting := 1
      Zoom(img,cwin,0,0,WAttrib(img,"width"),WAttrib(img,"height"),
	   200,200,128,128)
      count := 0
      while pull(PL)
   end
   method handle_face_done(ev)
      local h1,w1,h2,w2,xdiff,ydiff
      h1 := PL[*PL-3]-200
      w1 := PL[*PL-2]-200
      h2 := PL[*PL-1]-200
      w2 := PL[*PL]-200
      xdiff := h2-h1
      ydiff := w2-w1
      win2 := WOpen("size="||xdiff||","||ydiff)
      #win3 := WOpen("size="||xdiff||","||ydiff), "canvas=hidden")
      CopyArea(img,win2,h1,w1,h2,w2,0,0)
      xoffset := (256-xdiff)/2
      yoffset := (256-ydiff)/2
      CopyArea(win2,win,0,0,xdiff,ydiff,540+xoffset,340+yoffset)     
   end 
   method handle_done(ev)
      win3 := WOpen("size=512,512")
      CopyArea(win2,win3,0,0,WAttrib(win2,"width"),WAttrib(win2,"height"),
	       xoffset,yoffset)
      imagename := output_path || username || ".gif"
      WriteImage(win3, imagename) | stop("failed")
      WClose(win2)
      WClose(win3)
      WClose(img)    
      dispose()  
   end
   method get_result()
      return \imagename
   end
   method start_capturing (ev)
      if isSelecting = 1 then {
         Zoom(img,cwin,0,0,WAttrib(img,"width"),WAttrib(img,"height"),
	      200,200,128,128)
         if count = 0 then {
            if *PL = 0 then {
               every 1 to 4 do pull(PL)
               } 
            put(PL, &x, &y, "-1", "-1")    
            }
         else {
            pull(PL)
            pull(PL)
            put(PL, &x, &y)
            DrawLine(cwin, PL[*PL-1],PL[*PL],PL[*PL-1],PL[*PL-2])
            DrawLine(cwin, PL[*PL-1],PL[*PL],PL[*PL-3],PL[*PL])
            DrawLine(cwin, PL[*PL-1],PL[*PL-2],PL[*PL-3],PL[*PL-2])
            DrawLine(cwin, PL[*PL-3],PL[*PL],PL[*PL-3],PL[*PL-2])
            }
         count +:= 1
         }
   end
   method stop_capturing(ev)
      count := 0
   end
   method component_setup()
      local tab_set, tab_item_1, tab_item_2, tab_item_3
      local txt1, txt2, txt3, tile1, tiledone1, capture_face
      local face_done, undo, done
 
      attrib("size=800,565", "font=sans", "bg=light gray","label=gif2avt", 
         "resize=on")
      PL := [ ]
      txt1 := Label("pos=10%,10%","label=Select your picture: ")
      add(txt1)
      ftext := TextField("pos=10%,15%","size=170,","draw_border=t")
      add(ftext)
      h := TextButton("label=Browse...", "pos=35%,15%")
      h.connect(self, "handle_picture_entered", ACTION_EVENT)
      add(h) 
      connect(self, "start_capturing", MOUSE_DRAG_EVENT)
      connect(self, "stop_capturing", MOUSE_RELEASE_EVENT) 
      txt2 := Label("pos=65%,20%","label=STEP 1: Capture the tile area ")
      add(txt2)  
      tile1 := TextButton("label=Capture", "pos=75%,25%")
      tile1.connect(self, "handle_tile", ACTION_EVENT)
      add(tile1)
      tiledone1 := TextButton("label=Finish", "pos=85%,25%")
      tiledone1.connect(self, "handle_tile_done", ACTION_EVENT)
      add(tiledone1)
      txt3 := Label("pos=65%,35%","label=STEP 2: Now select the face area ")
      add(txt3)
      capture_face := TextButton("label=Capture", "pos=75%,40%")
      capture_face.connect(self, "handle_face", ACTION_EVENT)
      add(capture_face)
      face_done := TextButton("label=Finish", "pos=85%,40%")
      face_done.connect(self, "handle_face_done", ACTION_EVENT)
      add(face_done)  
      undo := TextButton("label=Undo", "pos=75%,10%")
      undo.connect(self, "handle_undo1", ACTION_EVENT)
      add(undo)
      done := TextButton("label=DONE", "pos=45%,85%")
      done.connect(self, "handle_done", ACTION_EVENT)
      add(done)
      connect(self, "dispose", CLOSE_BUTTON_EVENT)
   end
initially(a[])
   self.Dialog.initially()
   count := 0
   isSelecting := 0
end
