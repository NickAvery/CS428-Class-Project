#
# $Id: cetl.icn
# This file is in the public domain.
#

import gui
import undo
import lang

$include "guih.icn"

record undo_rec(undo_type, undo_list, undo_x, undo_y, undoend_x, undoend_y,
		redo_type, redo_list, redo_x, redo_y, redoend_x, redoend_y)

global clipboard_contents, clipboard_list, old_cursor_y, changedlines_set

#
# A scrollable editable text area.
# An CONTENT_CHANGED_EVENT is generated whenever the contents
# are changed by the user, a CURSOR_MOVED_EVENT when the cursor moves,
# and a SELECTION_CHANGED_EVENT whenver the selection changes.
#
class CETL : EditableTextList (
   contents,
   cursor_x,		#
   cursor_y,		#
   mark_x,		#
   mark_y,		#
   long_line,		#
   old_mw,
   view_list,
   tab_width,
   changed,
   mouse_locked,
   scroll_locked,
   undolist,# Taken from old-version editabletextlist
   wordlist, # Taken from old-version editabletextlist
   noedit, # Taken from old-version editabletextlist
   startdragx, # Taken from old-version editabletextlist
   enddragx, # Taken from old-version editabletextlist
   startdragy, # Taken from old-version editabletextlist
   enddragy, # Taken from old-version editabletextlist
   donedrag, # Taken from old-version editabletextlist
   highlightcolor, # Taken from buffertextlist
   autoindent, # Taken from buffertextlist
   scroll_y,  # Taken from buffertextlist
   pos,result,found, counter
   )

  #
  #override original method
  #set attrib
  #will remove old attribute value and replace it with the new one
  #

  method set_attribs(attrval)
  local attr, i
       attrval ? {
	   attr := tab(many(&letters)) || ="="
	   every i := 1 to *attribs do {
	       if match(attr, attribs[i]) then {
		   attribs[i] := attrval
		   return
		   }
	       }
       }
      return self$EditableTextList.set_attribs(attrval)
   end

   method Search_IDESession_Table()
      local myfilename,counter := 1,found:=1,edit_box_attribute:=[],attrib:=""

      edit_box_attribute :=
	 world.nsh_dialog.VCSC_tab.get_which_one().get_children()[1].attribs
      attrib := edit_box_attribute[1]

      if find("light yellow",attrib) then {#send events only to the blue
	 myfilename := world.nsh_dialog.VCSC_tab.get_which_one().label
	 while (found=1)&(counter <= idesession.Table_Index) do{
	    if (\ (idesession.Tidesession[counter])).IDEFile==myfilename then {
		  #it maybe &null for some field for some users
		  found := 0
	       }
	    counter +:= 1
	    }#end while
	 }
      return found||" "||counter
   end

   method create_msg()
      result := Search_IDESession_Table()
      result ?  {
	 found := integer(tab(find(" ")))
	 move(1)
	 counter := integer(tab(0))
	 }
   end

   method handle_cetl_messages(case_name, e, key, shortcut, cetl_cmd, msg)
       case case_name of {
	  "cut" | "copy" | "paste" | "undo" | "redo"| "select_all" : {
	      if find("(PF)", ide.CurrentTabItem().label) then {
		 update_changed_lines(cursor_y)
		 update_changed_lines_events(cursor_y ||":"||case_name||"->")
		 }
	      if found = 0 then {
      		 if find(key,image(e)) then {
		    e :=  shortcut
	  	    }
		 if idesession.Tidesession[counter-1].CIDE == "on" then {
		    if case_name === "paste" then {
		       #clipboard_contents := get_systemclipboard().get_content()

		       session.Write("\\CETLPaste " || counter-1||" "||
					   image(clipboard_contents))

		       session.Write("\\CETLhostuser " || counter-1||" "||
					   image(hostuser))

		       session.Write(cetl_cmd || counter-1||" "||image(e))
		       }
		    else session.Write(cetl_cmd || counter-1||" "||image(e))
		    }
	      }
	   }
	  "page_up" | "page_down" | "start_of_line" | "end_of_line" : {
	      if found = 0 then {
      		 if find(key,image(e)) then {
		    e :=  shortcut
	  	    }
		 if idesession.Tidesession[counter-1].CIDE == "on" then {
		    session.Write(cetl_cmd ||  counter-1||" "||e)
		    }
	      }
	   }
	  "delete_line" | "delete_left" | "delete_right" : {
	      if find("(PF)", ide.CurrentTabItem().label) then {
		 update_changed_lines(cursor_y)
		 update_changed_lines_events(cursor_y ||":"||case_name||"->")
		 }
	      if found = 0 then {
		 if idesession.Tidesession[counter-1].CIDE =="on" then {
		    if &shift then idesession.shift_pressed := 1
		    else idesession.shift_pressed := 0
		    if case_name == "delete_line" then
		       session.Write(cetl_cmd ||  counter-1||" delLine")
		    else session.Write(cetl_cmd ||  counter-1||" "||image(e))
		    }
		 }
	   }
	  "vsb" | "hsb": {
	      if found = 0 then {
		 if idesession.Tidesession[counter-1].CIDE =="on" then {
      		    session.Write(cetl_cmd || msg)
		    }
		 }
	      }
	  "handle_press" | "handle_drag" | "handle_release" : {
	      if found = 0 then {
		 if idesession.Tidesession[counter-1].CIDE == "on" then {
		    session.Write(cetl_cmd || msg)
		    }
		 }
	      }
	  "home" | "end" | "up" | "down" | "left" | "right" : {
	     if found = 0 then {
		if idesession.Tidesession[counter-1].CIDE =="on" then {
		   if &shift then idesession.shift_pressed := 1
		   else idesession.shift_pressed := 0
		   session.Write(cetl_cmd || counter-1||" "|| e ||
				 " "||idesession.shift_pressed)
		   }
		}
	    }
	 "default" :{

	    if found = 0 then {
	       if idesession.Tidesession[counter-1].CIDE =="on" then {
		  if \e ~== "-10" then { # exclude maximize/minimize events
  		     if e == " " then e := "^^"  #handle space
		     session.Write(cetl_cmd || msg)
		     }
		  }
	       }
	    }
	 }

   end

   method handle_cut(e)
      self.EditableTextList.handle_cut(e)
      clipboard_contents := get_clipboard().get_content()
      create_msg()
      handle_cetl_messages("cut", e, "record", "\^x", "\\CETLevent ")
   end

   method handle_copy(e)
      self.EditableTextList.handle_copy(e)
      clipboard_contents := get_clipboard().get_content()
      create_msg()
      handle_cetl_messages("copy", e, "record", "\^c", "\\CETLevent ")
   end

   method handle_paste(e)
      self.EditableTextList.handle_paste(e)
      get_clipboard().set_content(clipboard_contents)
      create_msg()
      handle_cetl_messages("paste", e, "record", "\^v", "\\CETLevent ")
   end

   method on_vsb(ev,y_coor,enter_here)
      local m

      if /enter_here & \scroll_locked then fail #lock scrollbar
      create_msg()
      if \enter_here=1 then {
	 if \vsb then {
	    vsb.set_value(y_coor)
	    enter_here := 0
	    }
	 }
      self.EditableTextList.on_vsb(ev)
      m :=  counter-1 ||" "||get_areay()||" "||ev.type||" "||image(ev.param)||" "||"v"
      if /enter_here then
	 handle_cetl_messages("vsb", ev, "on_vsb", " ", "\\CETLscrol ", m)
   end

   method on_hsb(ev,x_coor,enter_here)
      local m
      if /enter_here & \scroll_locked then fail#lock scrollbar
      create_msg()
      if \enter_here = 1 then {
	 if \hsb then {
	    hsb.set_value(x_coor)
	    enter_here := 0
	    }
	 }
      self.EditableTextList.on_hsb(ev)
      m :=  (counter-1) ||" "||.get_areax()||" "||ev.type||" "||
	  image(ev.param)||" "||"h"
      if /enter_here then
	 handle_cetl_messages("hsb", ev, "on_hsb", " ", "\\CETLscrol ", m)
   end

   method handle_undo(e)
      self.EditableTextList.handle_undo(e)
      create_msg()
      handle_cetl_messages("undo", e, "&null", "\^z", "\\CETLevent ")
   end

   method handle_redo(e)
      self.EditableTextList.handle_redo(e)
      create_msg()
      handle_cetl_messages("redo", e, "&null", "\^y", "\\CETLevent ")
   end

   method handle_press(e,recieved)
      local m
      if /recieved & \mouse_locked then fail #lock mouse
      self.EditableTextList.handle_press(e)
      create_msg()
      m := (counter-1) || " " || image(e) || " " || &x || " " || &y
      handle_cetl_messages("handle_press", e, "handle_press", " ",
			   "\\CETLmouse ", m)
   end

   method handle_drag(e,recieved)
      local m
      if /recieved & \mouse_locked then fail #lock mouse
      self.EditableTextList.handle_drag(e)
      create_msg()
      m := (counter-1) || " " || image(e) || " " || &x || " " || &y
      handle_cetl_messages("handle_drag", e, "handle_drag", " ",
			   "\\CETLmouse ", m)
   end

   method handle_release(e,recieved)
      local m
      if /recieved & \mouse_locked then fail #lock mouse
      self.EditableTextList.handle_release(e)
      create_msg()
      m := (counter-1) || " " || image(e) || " " || &x || " " || &y
      handle_cetl_messages("handle_release", e, "handle_release", " ",
			   "\\CETLmouse ", m)
   end

   method handle_start_of_line(e)
      self.EditableTextList.handle_start_of_line(e)
      create_msg()
      handle_cetl_messages("start_of_line", e, "start_of_line", " ",
			   "\\CETLevent ")
   end

   method handle_end_of_line(e)
      self.EditableTextList.handle_end_of_line(e)
      create_msg()
      handle_cetl_messages("end_of_line", e, "end_of_line", " ","\\CETLevent ")
   end


   method handle_key_home(e)
      self.EditableTextList.handle_start_of_line(e)
      create_msg()
      handle_cetl_messages("home", e, "key_home", " ", "\\CETLkey ")
   end

   method handle_key_end(e)
      self.EditableTextList.handle_end_of_line(e)
      create_msg()
      handle_cetl_messages("end", e, "key_end", " ", "\\CETLkey ")
   end

   method handle_select_all(e)
      self.EditableTextList.handle_select_all(e)
      create_msg()
      handle_cetl_messages("select_all", e, "&null", "\^a", "\\CETLevent ")
   end

   method handle_key_up(e)
      self.EditableTextList.handle_key_up(e)
      create_msg()
      handle_cetl_messages("up", e, "key_up", " ", "\\CETLkey ")
      return
   end

   method handle_key_down(e)
      self.EditableTextList.handle_key_down(e)
      create_msg()
      handle_cetl_messages("down", e, "key_down", " ", "\\CETLkey ")
      return
   end

   method handle_key_left(e)
      self.EditableTextList.handle_key_left(e)
      create_msg()
      handle_cetl_messages("left", e, "key_left", " ", "\\CETLkey ")
   end

   method handle_key_right(e)
      self.EditableTextList.handle_key_right(e)
      create_msg()
      handle_cetl_messages("right", e, "key_right", " ", "\\CETLkey ")
   end

   method handle_key_page_up(e)
      self.EditableTextList.handle_key_page_up(e)
      create_msg()
      handle_cetl_messages("page_up", e, "key_page_up", " ", "\\CETLevent ")
      return
   end

   method handle_key_page_down(e)
      self.EditableTextList.handle_key_page_down(e)
      create_msg()
      handle_cetl_messages("page_down", e, "key_page_down", " ","\\CETLevent ")
      return
   end

   method handle_delete_line(e)
      self.EditableTextList.handle_delete_line(e)
      create_msg()
      handle_cetl_messages("delete_line", e, "delete_line", " ","\\CETLevent ")
   end

   method handle_delete_left(e)
      self.EditableTextList.handle_delete_left(e)
      create_msg()
      handle_cetl_messages("delete_left", e, "delete_left", " ","\\CETLevent ")
   end

   method handle_delete_right(e)
      self.EditableTextList.handle_delete_right(e)
      create_msg()
      handle_cetl_messages("delete_right", e,"delete_right"," ","\\CETLevent ")
   end

   method handle_return(e)
      local pos,result,counter,found

      self.EditableTextList.handle_return(e)
      result := Search_IDESession_Table()

      if find("(PF)", ide.CurrentTabItem().label) then {
	 update_changed_lines(cursor_y)
	 update_changed_lines_events(cursor_y || ":" || "handle_return" ||"->")
	 }

      pos := find(" ",result)
      found := integer(result[1:pos])
      counter := integer(result[pos+1:0])
      if found = 0 then {
	 if idesession.Tidesession[counter-1].CIDE =="on" then {
	    if &shift then idesession.shift_pressed := 1
	    else idesession.shift_pressed := 0
	    session.Write("\\CETLevent " || (counter-1) || " " || image(e))
	 }
      }

   end

   method handle_default(e)
      self.EditableTextList.handle_default(e)
      create_msg()
      if \e === " " then e := "^^"
      handle_cetl_messages("default", e, "handle_default", " ", "\\CETLevent ",
			   (counter-1) || " " || e)
   end
   #
   # Method modified by RAE
   #
   method handle_event(e)
      local old_contents_size, old_mw, E

      if E := (\vsb).handle_event(e) then {
	 #
	 # Handled by VSB; amend line number and refresh contents
	 #
	 constrain_cursor()
	 refresh()
	 text_area_to_high()
	 }
      else if E := (\hsb).handle_event(e) then {
	 #
	 # Handled by HSB; amend left offset and refresh
	 #
	 constrain_cursor()
	 refresh()
	 text_area_to_high()
	 }
      else {
	 if e === -11 then fail # window closed, nothing to do?
	 old_contents_size := *contents

	 changed := moved := &null
	 if integer(e) = &lpress then
	    handle_press(e)
	 else if integer(e) = &ldrag then
	    handle_drag(e)
	 else if integer(e) = &mpress then
	    simulate_wheelbutton()
	 else if integer(e) = &lrelease then
	    handle_release(e)
	 else if \has_focus then {
	    case e of {
	       Key_Home  : handle_key_home(e)
	       Key_End   : handle_key_end(e)
	       Key_PgUp  : handle_key_page_up(e)
	       Key_PgDn  : handle_key_page_down(e)
	       Key_Up    : handle_key_up(e)
	       Key_Down  : handle_key_down(e)
	       Key_Left  : handle_key_left(e)
	       Key_Right : handle_key_right(e)
	       #"\t"     : handle_tab_text(e)    #not working
	       "\b"      : handle_delete_left(e)
	       "\r" | "\l": handle_return(e)
	       "\^k" : handle_delete_line() #handle_nodefault()
	       "\^a" : handle_start_of_line(e)
	       "\^e" : handle_end_of_line(e)
	       "\d" | "\^d" : handle_delete_right(e)
	       "\^x" :  handle_cut(e)
	       "\^c" :  handle_copy(e)
	       "\^v" :  handle_paste(e)
	       "\^z" :  handle_undo(e)
	       "\^y" :  handle_redo(e)
	       "\^s" :  handle_save()
	       "\^f" :  ide.handle_files()
	       "\^n" :  ide.find_next()
	       default : handle_default(e)    #not working
	    }
	 }

	 if \moved then {
	    #
	    # Cursor moved.  Make sure still on screen; update scrollbars,
	    # and refresh text.
	    #

    	    # Reparse code when the cursor moves in the Y axis
	    case e of {
	       Key_PgUp | Key_PgDn | Key_Up | Key_Down | Key_Home | Key_End : {
		# Clear line error since the cursor moved
		ReparseCode()
	       }
	    }

	    constrain_line()
	    refresh(1)
	    text_area_to_high()

	    return _Event(e, self, 0)
	 }
	 else if \changed then {
	    if (*contents ~= old_contents_size) | \long_line |
	       (old_mw ~= TextWidth(cwin, detab(contents[long_line],
						tab_width + 1))) then {
	       #
	       # Contents changed.  Re-compute all internal fields, ensure on
	       # screen and re-display whole object.
	       #
	       set_internal_fields()
	       constrain_line()
	       display()

	       # Set reparse flag
	       doReparse := 1
	       }
	    else {
	       constrain_line()
	       refresh(1)
	       text_area_to_high()
	       }
	    return _Event(e, self, 0)
	 }
      }
   end

   # width of subject object may include line numbering
   method get_subject_width()
      local lineno_space
      lineno_space := TextWidth(cwin,detab(*contents, tab_width + 1))+3
      return long_line.tw + lineno_space
   end

   #
   method toggle_autoindent()
      if \autoindent then autoindent :=  &null
      else autoindent := 1
   end

   #Not a very good simulation !!!
   method simulate_wheelbutton()

      if \has_focus then {
	 scroll_y := &y

	 while Event() === &mdrag do {
	    if &y > scroll_y then {
	       handle_key_down()
	       handle_key_down()
	       handle_key_down()
	       }

	    if &y < scroll_y  then {
	       handle_key_up()
	       handle_key_up()
	       handle_key_up()
	       }
	    constrain_line()
	    refresh(1)
	    text_area_to_high()
	    }
	 }
   end

   method set_cursor_from_pos()
      local l, nlines, s, i, v
      l := (&y - view.y) / line_height
      nlines := get_curr_lines()
      l <:= 0
      l >:= nlines - 1

      v := view_list[l + get_first_line()]
      cursor_y := v.index

      s := v.str
      i := 1
      l := get_left_pos()
      while (i < *s) & (TextWidthEx(cwin, s, 1, i + 1, tab_width) < &x - l) do
	 i +:= 1

      cursor_x := v.first + i - 1
   end


   method get_left_pos()
      local lineno_space
      lineno_space := TextWidth(cwin,detab(*contents, tab_width + 1))+3
      return (lineno_space + view.x  - (\hsb).get_value()) |
	     (lineno_space + view.x )
   end

   method reset_drag()
      enddragx := startdragx
      enddragy := startdragy
   end

   #
   #
   #  This method returns the offset(or number of added blanks because
   #  of the tabs) up to the end position. If the use_selfcontents parameter is
   #  null then the number of blanks up to the position (endpos) in the
   #  actual line (the line with the blanks that is displayed) is returned.
   #  If  use_selfcontents is not null, then the number of blanks that would be
   #  inserted up to the position (endpos) in contents is returned.
   #
   method offset_pos(tab_line,endpos,use_selfcontents)
      local posx := 0, sblnks := 0, linepos := 0, numtabs := 0, x12

      tab_line ? {
	 while x12 := move(1) do {
	    linepos +:= 1
	    if /use_selfcontents then {
	       if posx == endpos - 1  then {
		  # stop at the position in the line displayed
		  return sblnks - numtabs
		  }
	       }
	    else {
	       if linepos == endpos then # stop where at endpos in contents
		  return  sblnks - numtabs
	       }
	    if x12 == "\t" then {
	       numtabs +:= 1
	       posx +:= 1
	       sblnks +:= 8 - (posx-1)%8
	       posx +:= (8 -  (posx-1)%8) - 1
	       }
	    else
	       posx +:= 1
	    } # while
	 }
      #  subtract numtabs the positions "\t" since we already counted them
      return sblnks - numtabs
   end

   method highlight_line(i)
      start_handle()
      if /i then i := 1
      if not (*contents >=  i > 1) then i := 1

      mark_x := 1
      mark_y := i
      cursor_y := i
      cursor_x := *contents[i] + 1
      end_handle()
   end

   method start_handle()
      old_view_list_size := *view_list
      old_mw := long_line.tw
      old_cursor_x := cursor_x
      old_cursor_y := *view_list
      old_has_region := has_region() | &null
      changed := &null
   end

#
method copy_to_clipboard(l)
local large_str, i
   if /l | *l = 0 then fail
   large_str := l[1] || "\n"
   every i := 2 to *l do
      large_str ||:= l[i]
   #get_systemclipboard().set_content(large_str)
   WAttrib("selection=" || large_str)
   return large_str
end

method get_list_from_clipboard()
   static nonblank, nonwhite
   local large_str := "", l := [], str := "", start := 1, p := 1, end1 := 1

   initial {
      nonblank := &ascii -- ' '
      nonwhite := nonblank -- '\t'
      }
   
   if not (large_str := WAttrib("selection")) then fail

   while end1 := find("\n",large_str,start,0) do {
      str := large_str[start:end1]
      if p := upto(nonblank, str) then
	 str := str[p:0]
      put(l, str)
      start := end1 + 1
      }
   str := large_str[start:0]
   if p := upto(nonwhite, str) then
      str := str[p:0]
   put(l, str)
   return l
end

method update_changed_lines(lineno)
   local changedlines_str := "", fileName, projName
   insert(changedlines_set, lineno)
   ide.CurrentTabItem().label ? {
      fileName := tab(find("(PF):"))
      move(5)
      projName := tab(0)
      }
   updatedsdfilelines [projName || ":" || fileName] := changedlines_set
   session.Write("\\getUpdatedLines " || world.nsh_dialog.user_me || " " ||
		 projName || " " || fileName)
   display()
   session.Write("\\updateChangedLines "||world.nsh_dialog.user_me||" "||
      projName||" "||fileName||"&"||lineno)
end

method update_changed_lines_events(change_str)

   ide.CurrentTabItem().label ? {
      fileName := tab(find("(PF):"))
      move(5)
      projName := tab(0)
      }
   updatedsdfile_lines_events [projName||":"||fileName] ||:= change_str
end

#-----------------------
   initially(a[])
      self.EditableTextList.initially()

      changedlines_set := set()
      cursor_x := cursor_y := 1
      highlightcolor := "65535,65535,32428"
      autoindent := &null
      scroll_y := 1

      accepts_focus_flag := &null
      startdragx := enddragx := startdragy := enddragy := 1
      donedrag := noedit := 0
      undolist := []
      redolist := []
      wordlist := []
end
