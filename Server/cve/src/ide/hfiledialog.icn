#
# $Id: hfiledialog.icn,v 1.3 2008-06-24 23:52:58 hanibs Exp $
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#
# This extension-aware variant file dialog likes .icn files.
#

import gui
$include "guih.icn"

$ifdef _MS_WINDOWS_NT
$define PATHCHAR "\\"
$else
$define PATHCHAR "/"
$endif

#
#
# File dialog class.  This class provides a standard file dialog.
# 
# @example
# @ d := FileDialog()
# @ d.show()
# @ write(d.get_result() | "cancelled")
#
class HFileDialog : FileDialog(
   file_extension,	    # File type extension
   fext_list		    # File extension list
   )

   #
   # Set the initial files type
   #
   method set_file_type(s)
      return init_fileType := s
   end

   #
   # Set the initial file/directory from a whole path.
   # 
   method set_path(s)
      self.FileDialog.set_path(s)
      init_fileType := "*.icn"
      return s
   end

   method on_file_extension()
      on_fextension_change()
   end

   method on_dlist()
      local s, value, l
      #
      # Clicked in the directory list; get the item clicked on.
      #
      value := dlist.get_contents()[dlist.get_selections()[1]]
      s := get_std_dir()
      #
      # Go to parent directory (unless at root directory)
      #
      if \value == (".." || PATHCHAR) then {    
	 if s ~== PATHCHAR then {
	    s[-1] := ""
	    while s[-1] ~== PATHCHAR do s[-1] := ""
	    }
	 dir.set_contents(s)
	 }
      else
	 dir.set_contents(s ||:= \value)
      #
      # Update directory and file lists.
      #
      l := (get_directory_list(s,file_extension) | [[],[]])
      dlist.set_contents(l[1])
      dlist.goto_pos(1, 0)
      dlist.clear_selections()
      flist.set_contents(l[2])
      flist.goto_pos(1, 0)
      flist.clear_selections()
      file.set_contents("")
   end
   method on_fextension_change()
      #
      # Changed the file extension list; get the item clicked on.
      #
      value := dlist.get_contents()[dlist.get_selections()[1]]
      s := get_std_dir()
      #
      # Go to parent directory (unless at root directory)
      #
      if \value == (".." || PATHCHAR) then {    
	 if s ~== PATHCHAR then {
	    s[-1] := ""
	    while s[-1] ~== PATHCHAR do s[-1] := ""
	    }
	 dir.set_contents(s)
	 }
      else
	 dir.set_contents(s ||:= \value)
      #
      # Update directory and file lists.
      #
      l := (get_directory_list(s,file_extension) | [[],[]])
      dlist.set_contents(l[1])
      dlist.goto_pos(1, 0)
      dlist.clear_selections()
      flist.set_contents(l[2])
      flist.goto_pos(1, 0)
      flist.clear_selections()
   end

   method on_dir()
      local s, l
      #
      # Return pressed in directory TextField; update lists.
      #
      dir.set_contents(s := get_std_dir())
      l := (get_directory_list(s,file_extension) | [[],[]])
      dlist.set_contents(l[1])
      dlist.goto_pos(1, 0)
      dlist.clear_selections()
      flist.set_contents(l[2])
      flist.goto_pos(1, 0)
      flist.clear_selections()
      file.set_contents("")
   end

   method component_setup()
      local l
      extChoosed := "FALSE"
      #
      # Defaults if none set by caller.
      #
      if /init_dir | (init_dir == "") then {
	 init_dir := chdir() | PATHCHAR
	 }
      /init_file := ""
      /init_fileType := ""
      if (init_dir[-1] ~== PATHCHAR) then init_dir ||:= PATHCHAR

      l := Label("pos=25,25", "align=l,c", "label=Directory")
      add(l)
      dir := TextField("pos=100,25", "size=100%-150", "align=l,c", "accel=d")
      dir.connect(self, "on_dir", ACTION_EVENT)
      dir.set_contents(init_dir)
      add(dir)
      l.set_linked_accel(dir)

      l := Label("pos=25,60", "align=l,c", "label=File")
      add(l)
      file := TextField("pos=100,60", "size=100%-150", "align=l,c", "accel=f")
      file.connect(self, "on_file", ACTION_EVENT)
      file.set_contents(init_file)
      add(file)
      l.set_linked_accel(file)

      l := Label("pos=25,95", "align=l,c", "label=File Type")
      add(l)
      file_extension := List()
      file_extension.set_pos("100", "80")
      file_extension.set_size("100%-150", "20")
      file_extension.connect(self, "on_file_extension", SELECTION_CHANGED_EVENT)
      file_extension.set_selection_list(["All Files(*.*)",
					 "C Sources(*.cpp; *.c; *.cc; *.h)",
					 "Java Files(*.java)",
					 "Unicon Files(*.icn)",
					 "Project Files(*.uprj)"])
      add(file_extension)
      l.set_linked_accel(file_extension)

      l := (get_directory_list(init_dir,file_extension) | [[],[]])

      dlist := TextList("pos=25,110", "size=50%-38,100%-170", "select_one",
			"selection_on_key_moves=f")
      dlist.connect(self, "on_dlist", SELECTION_CHANGED_EVENT)
      dlist.set_contents(l[1])
      add(dlist)

      flist := TextList("pos=50%+12,110", "size=50%-38,100%-170", "select_one",
			"selection_on_key_moves=f")
      flist.connect(self, "on_flist", SELECTION_CHANGED_EVENT)
      flist.set_contents(l[2])
      add(flist)

      okay := TextButton("pos=33%,100%-30", "align=c,c", "label=Okay","accel=o")
      okay.connect(self, "on_okay", ACTION_EVENT)
      add(okay)

      cancel := TextButton("pos=66%,100%-30", "align=c,c", "label=Cancel",
			   "accel=c")
      cancel.connect(self, "dispose", ACTION_EVENT)
      add(cancel)
      connect(self, "dispose", CLOSE_BUTTON_EVENT)
   end
end

#
# Read a directory.
#
procedure get_directory_list(s,file_extension)
   local dir_list, file_list, ext
   /fatal_error := stop
   fext_list :=["*.*", ".cpp"|".c"|".cc"|".h", ".java", ".icn", ".uprj"]

   ext := fext_list[file_extension.get_selection()]

$ifdef _MS_WINDOWS_NT
   s := map(s,"/","\\")
   if (*s > 1) & (s[-1] == PATHCHAR) &
      (map(s,&letters,repl("a",52)) ~== "a:\\") then
      s[-1] := ""
$else
   if (*s > 1) & (s[-1] == PATHCHAR) then s[-1] := ""
$endif
 
   p := open(s) | {
      write(&errout, "get_directory_list: can't open ", image(s))
      fail
      }
   if not (s[-1] == PATHCHAR) then s ||:= PATHCHAR
   dir_list := []
   file_list := []
   while s2 := read(p) do {
      sr := stat(s||s2) | {
	 write(&errout, "get_directory_list: can't stat ", image(s2))
	 fail
	 }
      if sr.mode[1] == "d" then
	 put(dir_list, s2 || PATHCHAR)
      else
	 if file_extension.get_selection() == 1 then
	    put(file_list, s2)
	 else {
	    if file_extension.get_selection() == 2 then
	       ext := ".cpp"|".c"|".cc"|".h"
	    if find(ext,s2) then #[2:*ext]
	       put(file_list, s2)
	    }
   }
   close(p)
   return [sort(dir_list), sort(file_list)]
end
