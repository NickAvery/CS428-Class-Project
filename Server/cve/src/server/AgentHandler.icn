$include "../common/defaults.icn"

class AgentHandler(agents,    # Don't access this directly... use
                              # add() and member() instead.
                   anonymous_name,
                   server,
                   avatars
                   )

   # Given a filename, build_from_file opens it up and parses the
   # file. The file can contain comments (using '#' character to end
   # of line); otherwise, it needs to contain lines of the form /key
   # \s+ values/x (that is, the first word on the line is the key;
   # the rest are its value).
   method build_from_file(filename,dirname)
   local f, line, key, value
   local fields := table()
   local actor
   local index

      # Default the agent name to the file name. Note that this can
      # be overridden inside the file.
      if *filename < *".agent" | (filename[-*".agent":0] ~== ".agent") then {
	 write("build_from_file expects a .agent filename, which " ||
	       image(filename) || " is not.")
	 write("Its ending is " || image(filename[-*".agent":0]))
	 fail
	 }

      fields["name"] := filename[1:-*".agent"] # Strip ".agent" extension
      while index := find(PS,fields["name"]) do {
	 # Strip leading path components, also
	 fields["name"][1:index+*PS] := ""
	 }
       
      if not (f := open(filename)) then {
	 write("Unable to open file " || image(filename))
	 fail
	 }
       
      while line := read(f) do {
	 line[find("#", line):0] := ""    # Strip out comments
	 key := value := &null
	 line ? {
	    tab(many(' \t'))
	    key := tab(upto(' \t'))
	    tab(many(' \t'))
	    value := tab(0)
	    }
	 if \key & \value then {
	    fields[key] := value
	    }
	 }
       
      case \ (fields["class"]) of {
      "Echo": {
	 actor := EchoActor(server.dynStHandler.srvSceneGraph, server)
	 actor.name := \fields["name"]

	 # Does it have an avatar?
	 if actor.avatar := \fields["avatar"] then {
	    write("Storing an avatar of " || image(actor.avatar))
	    avatars[actor.name] := actor.avatar
	    }
	 }
       
      "Markov": {
	 actor := MarkovActor(server.dynStHandler.srvSceneGraph, server,
			      make_path(dirname,fields["filename"]))
	 actor.name := \fields["name"]

	 # Does it have an avatar?
	 if actor.avatar := \fields["avatar"] then {
	    write("Storing an avatar of " || image(actor.avatar))
	    avatars[actor.name] := actor.avatar
	    }
	 }

      "GC": {
	 actor := GCActor(server.dynStHandler.srvSceneGraph, server)
	 actor.name := \fields["name"]
	 }

      "Scheduler": {
	 actor := ScheduleActor(server.dynStHandler.srvSceneGraph, server)
	 actor.name := \fields["name"]
	 }

      default: {
	 write("Unknown class of " || image(fields["class"]))
	 fail
	 }
      }

      write("Created an actor " || (\actor.name | "unknown name") ||
	    " of type "|| fields["class"] || "  from " ||image(filename))
       
      return actor
   end

   # The agent needs to be an Actor (or at least type-substitutable for one).
   method add(agent)
      if /agent then {
	 write("Agent is null")
	 fail # We can't add null, so don't even try
	 }
      /(agent.name) := @anonymous_name

      return agents[agent.name] := agent 
   end

   method member(name)
      if ::member(agents,name) then return agents[name] else fail
   end

   method pulse()
      local agent
      every (!agents).heartbeat()
   end

   method startup()
      every (!agents).startup()
   end
    
   method shutdown()
      every (!agents).shutdown()       
   end

initially(server)
local agentdir, dirname,filename, cwd, built

   self.server := server
   agents := table()
   avatars := table()
   anonymous_name := create ("__anonymous__" || seq())

   cwd := chdir()
   if cwd[-3:0]=="bin" then chdir("..")
   else if cwd[-10:0] == ("src" || PS || "server") then {
      chdir(".."); chdir("..")
      }
   if not (stat(AGENT_RPATH)) then mkdir(AGENT_RPATH)
   agentdir := open(AGENT_RPATH, "r") | {
      write("Unable to open up agents directory " || image(AGENT_RPATH))
      fail
      }

   while dirname := read(agentdir) do {
      if dirname == ("."|".."|"CVS") then next
      if stat(make_path(AGENT_RPATH, dirname)).mode[1] ~== "d" then next

      filename := make_path(AGENT_RPATH,dirname,dirname || ".agent")
      built := build_from_file(filename,make_path(AGENT_RPATH,dirname))
      add(\built) | {
	 write("Unable to build agent for " || image(filename))
	 }
      }             
end
