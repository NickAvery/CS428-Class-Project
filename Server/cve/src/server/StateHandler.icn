##############################################################################
#
#   File:     StateHandler.icn
#
#   Subject:  Handles Dynamic State of the user & manages of the Scene Graph
#             for the CVE
#
#   Author:   Akshay V. Dabholkar (adabholk@cs.nmsu.edu)
#
#   Date:     January 27, 2005
#
##############################################################################
#
#   This file is in the public domain.
#
##############################################################################
#
#   This class acts as a mediator between the server and the Scene Graph.
#   It plays the role of reducing the server code (as it is already a BLOB ;))
#
#   This class will be used by other server objects at runtime.
#
#   It also provides an array of methods that help manipulate the graph an
#   retreive the information intelligently.
#
##############################################################################
#


$include "../common/defaults.icn"

class StateHandler(
   server, # The reference of the server object

   ### DYNAMIC STATE Data Structures #####################
   TDoorState, # stores the position angle, openness, lock of the door.
   TmoveCounter, # Table for counting the motions of each logged in user
   TonlineUsers,
   logHandler, # the new logger baby
   srvSceneGraph
   )

   ### MAINTAINENCE Methods #####################

   method removeUser(Cmds,net, Tsock_user,user_to_go)
      local position, message, currNodeName

      position := user_to_go.getPosition()
      message := user_to_go.name||" body "||
	      position[1]||" "||position[2]||" "||position[3]||" "||position[4]
      TmoveCounter[net] := MAX_MOVES
      # Save the avatar position to the database.
      saveAvatarState(Cmds,net, Tsock_user[net],message)
      logHandler.logit("removeUser(): saving the avatar position " ||
      "to the database")
      delete(TonlineUsers, user_to_go.name)
      currNodeName := self.srvSceneGraph.avatarTable[user_to_go.name]["node"]
      delete(self.srvSceneGraph.nodesTable[currNodeName].Tavatars,
	     user_to_go.name)
      logHandler.logit("Removing user "||user_to_go.name||
		       " from the node "||currNodeName)
      message := user_to_go.get_summary()
      logHandler.logUserActivity(user_to_go.name, "Logged Out")

      logHandler.logUserActivity(user_to_go.name, "AFK:"||user_to_go.afk_duration)

      if /currMode | (currMode == "Map") then 
         currMode := "3D"

      logHandler.logUserActivity(user_to_go.name, "Out "||currMode)

      logHandler.logUserActivitySummary(user_to_go.name, message)
   end

   method printAvtinNode(node)
      every write(key(node.Tavatars))
   end


   # This method essentially does the same as checkpoint but it is a
   # heavyweight method that does all the bookkeeping when the environment
   # shuts down or the server shuts down. We don't intend to bring down the
   # server anytime. So I am not sure about the semantics of this method at
   # this point of time. This method will be called by World::close_cve()

   method saveAvatarState(Cmds, sock, userToSave, args)
      local params := ""
      local user_id
      TmoveCounter[sock] +:= 1;

      params := Cmds.SplitArgs(args)
      user_id := userToSave.name
      if params[2] == "body" then {
         saveSafeAvtState([params[3],params[4],params[5],params[6]],
                          userToSave,&null,sock)
         }

      # Store the position only after MAX_MOVES to prevent repeated
      # database access.
      if TmoveCounter[sock] >= MAX_MOVES then {
         storeAvatarState(sock,userToSave)
         TmoveCounter[sock] := 0
      }
   end

   method storeAvatarState(sock,userToSave)
      local usrStateFPath, position, currNodeName
      local user_id, message

      user_id := userToSave.name
      #usrStateFPath := "../state/users/"||userToSave.name||".state"
      position := userToSave.getPosition()
      userToSave.saveState()
      logHandler.logit(user_id || "'s state is being saved...."||
            position[1]||" "||position[2]||" "||position[3]||
            " "||position[4]||" "||position[5])
   end

   method loadAvatarState(sock, user)
      local usrStateFPath, position
      local user_id, message

      #userToLoad := Tsock_user[sock]
      user_id := user.name
      #usrStateFPath := "../state/users/"||userToLoad.name||".state"
      user.loadState()
      position := self.srvSceneGraph.getAvatarState(user_id)
      if *position > 0 then {

        saveSafeAvtState(position,user,&null,sock)

        logHandler.logit(user_id || "'s  state is being loaded...."||
            position[1]||" "||position[2]||" "||position[3]||" "||position[4])
      }

      return (user.getPosition())
   end

   method saveSafeAvtState(position,userObj,Tsock_user,sock)
      local currNodeName

      #
      # Check if the values are valid, otherwise reset to standard
      #
      currNodeName := self.srvSceneGraph.determineCurrRoom(position[1],
						   position[3],position[2])
      #
      # If Avatar position is not with in a node then load default values
      #
      if /currNodeName then {
         position[1] := AVATAR_ORIGIN_X
         position[2] := AVATAR_ORIGIN_Y
         position[3] := AVATAR_ORIGIN_Z
         position[4] := AVATAR_ANGLE
         currNodeName := AVATAR_ORIGIN_NODE
         return
         }
      #
      # Get the users that are online. Only save state for them.
      #
      self.srvSceneGraph.updateAvatarState(
	   userObj.name, position[1], position[2], position[3],
	   position[4],currNodeName,TonlineUsers,TmoveCounter[sock])
      userObj.setPosition(position[1],position[2],position[3],
			  position[4],currNodeName)

   end

   method saveDoorState(Cmds,args)
     local params := ""
     local edgeName

     params := Cmds.SplitArgs(args)
     self.srvSceneGraph.updateEdgeState(params[1],params[2],
					params[3],params[4])
   end

   method getAvatarNodeInfo(avatarName,x,z,y)
      return self.srvSceneGraph.determineCurrRoom(x,z,y)
   end

   method getAdjDynamicState(Cmds,args,sock,userToLoad)
      local avtName, params := ""
      local oldNodeName, newNodeName, dynStateMessage,theta
      local avatarpresentx,avatarpresentz,avatarpresentlookx,avatarpresentlookz

      avtName := userToLoad.name
      params := Cmds.SplitArgs(args)
      oldNodeName := params[1]
      newNodeName := params[2]

      avatarpresentx:=real(params[3]) 
      avatarpresentz:=real(params[4])
      avatarpresentlookx:=real(params[5])
      avatarpresentlookz:=real(params[6])

      theta:=checkForDirectionRuntime(avatarpresentx,avatarpresentz,
				      avatarpresentlookx,avatarpresentlookz)

      # Place avatar in the new node.
      #write("oldNodeName: ",oldNodeName," newNodeName: ",newNodeName)
      self.srvSceneGraph.handleAvatarNodeChanges(avtName,oldNodeName,
						 newNodeName, TonlineUsers)
      #
      # Delete Current user from the list so as to not to send the current user
      # state to himself again
      #
      delete(TonlineUsers,avtName)
      dynStateMessage :=
	 srvSceneGraph.getAdjDynamicStateForNode(newNodeName, MAX_RENDER_LEVEL,
                                              1,TonlineUsers,theta)
      # Add the user back
      TonlineUsers[avtName] := avtName
      return dynStateMessage
   end

   method checkForDirectionRuntime(avatarpresentx,avatarpresentz,
				   avatarpresentlookx,avatarpresentlookz)
      local theta
      
      if  (((avatarpresentx-avatarpresentlookx) >= 0) &
	   ((avatarpresentz-avatarpresentlookz) >= 0 )) then
          theta := "east"
      else if (((avatarpresentx-avatarpresentlookx) <= 0) &
	       ((avatarpresentz-avatarpresentlookz) >= 0 )) then 
          theta := "north"
      else if (((avatarpresentz-avatarpresentlookz) <= 0) &
	       ((avatarpresentx-avatarpresentlookx) <= 0 )) then
          theta := "west"
      else if (((avatarpresentz-avatarpresentlookz) <= 0) &
	       ((avatarpresentx-avatarpresentlookx) >= 0 )) then
          theta := "south"
      return theta
   end

   #
   # Given a command and state change (one of AvtMove or EdgeMove),
   # and a given user performing the command (userToSave), fill in the
   # table TrecpUser_sock with a mapping user -> socket (taken from
   # Tuser_sock) describing those users who need to be receive
   # information about the motion (calculated from the scene graph).
   #
   # Currently send movements only to the avatars in the node if edges are
   # passive other wise send to avatars in the adjacent rooms whose connecting
   # edges are active.
   #
   method getRecipientUsers(Cmds, userToSave, Tuser_sock, TrecpUser_sock,
                            stateChange,params)
      local user_id, avtTable := table(), avtName, user

      user_id := userToSave.name
      params := Cmds.SplitArgs(params)

      if stateChange == "AvtMove" then
	 avtTable := self.srvSceneGraph.getAvatarsForAvtMove(user_id)
      else if stateChange == "EdgeMove" then
          avtTable := self.srvSceneGraph.getAvatarsForEdgeMove(params[1])
      else {
         write("Error: unknown statechange " || image(stateChange) ||
	       " for getRecipientUser")
         fail
      }
      every avtName := key(avtTable) do {
         every user := key(Tuser_sock) do {
            if user.name == avtName then
	       TrecpUser_sock[user] := Tuser_sock[user]
         }
      }
   end

   ###### Done till here #################

   #
   # Method to be called during server startup. This method sends the
   # configuration files to the client whenever a client logs on into
   # the server. This essentially is the state of the environment that
   # the user was working in.
   #
   method restoreEnvironment(room) # can be renamed to loadEnvironment()
      # Code for loading blackboards state goes here....
      # send all the state files to the users currently connected.
      # Also sends the state to all the users.

      # Returns the primitives for the room state to be drawn, in a list
   end


   # This is a lightweight method will periodically checkpoint the current
   # state into a file or a database for restoration in the event of a
   # server crash. We want this method to be lightweight because currently
   # due to lack of thread support we dont want to get the server busy in
   # doing this.
   method checkpoint()

      # This method will save the state files.... just close them then
      # reopen again....
      # Resets the global file pointers to new values. The file pointers
      # for all active users will be stored in a global list.

   end

   ### HELPER Methods #####################

   method loadDoorStateTable()
   end
   ### COMMUNICATION Methods #####################

   #
   # This method basically does the job of sending the dynamic state at
   # runtime to the various clients. It performs the work of a mediator. It
   # can communicate the avatar movements.
   #

   method forwardState(user_id,userConn)

      # send the files to a new client that recently logged in.
      # First he will be restored to his previous position and then on
      # the client side he will only render the room that he enters in....
      #
      # Files: User State File (/cve/states/users/user.state),
      #        Environment State File (/cve/states/cve.state)
      #
      # Client Side: He will use the proximity rendering algo to render
      # only the visible environment and use the state file
      # Here hit the database using the user_id and retrieve the
      # informationa and bundle it into a message and send to the client
      #local stateMsg := "", x, y, z, angle, room

      #group := GROUP_DB
      #state := STATE_DB

      #account_user := group_admin := "kosta"
      #account_password := "weird"
      #db_fd := open_db(USER_DB, "dr")
      #auth := fetch(db_fd, user_id)

      #stateMsg = room||"|"||x||"|"||y||"|"||z||"|"||angle
      #server.sendtoOne(userConn,"Loading Environment....", "say", userConn)
      #server.sendtoOne(userConn,stateMsg, "updateState", userConn)
      #send the necessary state files fileXfer
   end

   # This method does the job of accepting the client's state changes
   # and saving them into a database/file or can do a hot update by
   # conveying it to the method propogateState()
   method receiveState()

   end

   # all the methods from avatar.icn that update the other clients to be
   # moved here START

   # END


   method updateBlackboard()

   end

   method terminate()
      self.srvSceneGraph.storeToDisk(1,[],[],TonlineUsers)
   end

   #
   #---- For VoIP
   #
   method getMyRoom(name)
      local room
      room := srvSceneGraph.getAvtRoom(name)
      return room
   end
   
   #
   #---- For VoIP
   #
   method getAvatInMyRoom(name)
      local myroom, avatars_list
      myroom := srvSceneGraph.getAvtRoom(name)
      avatars_list := srvSceneGraph.getAvtInRoom(myroom)
      return avatars_list
   end

initially(logging)
   TmoveCounter := table(0)
   TonlineUsers := table()
   logHandler := logging

   # Instantiate in server mode
   srvSceneGraph := ServerCVESceneGraph(1,logging)
end
